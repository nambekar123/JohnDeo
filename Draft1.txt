
'Global variables (Database Library)
Dim g_strObjectType 	'String that  contains Class Name of the object (Ex : WebEdit,WebButton etc)
Dim g_arrPropertyNames     'Array that contains all the property names specified in object repository in an array ( Ex : Array(name,html tag,file name,..... )
Dim g_arrPropertyValues     'Array that  contains Property Valuees corresponding to the PropertyNames of the object in an array (Ex : Array(test, A,Up2.gif,...))
Dim g_strPropertyIndex    'String that contains the property name index which will be used in webGetObject component to get the first object
Dim g_dDictionary	'Global variable that contains the reference to the Dictionary object
Dim g_iAddIteration     'contains the QTP iteration value


'QTP CONFIGURATION FILE
'FOLLOWING CODE/FUNCTION(S) WILL BE EXECUTED WHEN MASTER LIBRARY FILE IS LOADED DURING RUN TIME

'********Manjunath - Precondition util code, These should be run first in any Function Library ********
	'***Assigning current browser as nothing, Current Browser is used in report event failed status
	'Other global variable related to web is in webGlobal.vbs
	Dim g_CurrentBrowser  	'Object that Contains the Browser object property ("Name or hwnd")
	Set g_CurrentBrowser=Nothing 'Assigning nothing to handle Runtime Error which will get in
					'Report Event Fail, if webSetPage didnâ€™t called once	
'************************************************************************************
'#############################################################################
	'CODE MODIFICATION
	'Vani S 	02/19/2019 'Declare the global variables for Browser Type and Object Repository Table name and assign Null/Empty values								
	'This modification is implemented to support cross browser testing
	Dim g_strObjRepositoryTableName
	Dim g_BrowserType
	g_strObjRepositoryTableName = ""
	g_BrowserType = ""
	 'END CODE MODIFICATION
'#############################################################################

'##############################################################################
	'CODE MODIFICATION
	'Nikhil Ambekar	11/19/2019 'Declare  global variable for xml object. Taken from old 'xml Global.vbs' file & this file is removed now.
	Dim g_xmlObj 'object that contains XML object
	'END CODE MODIFICATION
'#############################################################################

'#############################################################################
' PREREQUISITE CODE
'1) Close all the EXCEL.exe process
	xlCloseAllExcelFile
' END OF PREREQUISITE CODE
'#############################################################################
' BEGIN CONFIGURATION IMPLEMENTATION
'1) Instantiate New Data Dictionary
	ddNewDataDictionary
	'+++++++++++++++++++++++++++++++++++++++++++++++++++++++
	'These lines of code should be run once in either of the libraries (MasterLib OR ApplicationSpecificLib) associated to script before starting up the other related activities
	'To accomplish that we are checking the "CurrentDate" key existence in DD and proceeding for the next step
	If Not g_dDictionary.Exists("CurrentDate") Then
			'1.A) Load current system date into DD with the key CurrentDate
			utilMathCurrentDate 		
			'2) Load the test data from the QC Resources Module.
			qcDownloadResourceByName "Test_Data", ""
				'Check if test data path from QC is loaded to Data Dictionary, then Load all the external test data to data dictionary
				If g_dDictionary.Exists("Test_Data_Path") Then
						xlLoadExcelData ddGetItem ("Test_Data_Path"),"ALL"
				End If
			'*******************************************************************
				'Note: Please mention the required configuration settings either in TEST DATA file/Default sheet of the script, if the script is not connected to Quality Center
								'It's recommended to add these setting in QC Test Data file as these will be used in all the scripts
								'Example: For OBJECT REPOSITORY Database mention the following key with the values in any data sheets
								'1.Object_Repository_DataSourceType
								'2.Object_Repository_dbTableName
								'3.Object_Repository_ConnectionInfo		...
			'*******************************************************************
			'3) Load the test data from "default.xls" file, when master library file is loaded.
			xlLoadExcelData "",""

	End If
	
'#############################################################################
			'CODE MODIFICATION
			'Udayakumar Reddy 	03/15/2021
			'Below condition with webCloseAllBrowsers is moved here. Earlier it was called right after xlLoadExcelData.
			If Trim(Lcase(ddGetItem ("UseWebsetBrowser"))) = "no" or ddGetItem ("UseWebsetBrowser") = "UseWebsetBrowser" Then
				webCloseAllBrowsers
			End If
'#############################################################################
	'+++++++++++++++++++++++++++++++++++++++++++++++++++++++
'4) Load default action sheet data to all the called external action
	qtpActionImport 'Step will use full while doing the action iteration (same template for different set of data)

'#############################################################################
'CODE MODIFICATION
'Vani S 	02/19/2019
'This modification is done to read the configuration/environment data from test set folder
'Check the "TestsetFolderAttachment" key existence in the base(script) level DD
If g_dDictionary.Exists("TestsetFolderAttachment") Then
	If lcase(Trim(g_dDictionary("TestsetFolderAttachment"))) = "yes" Then
		qcGetTestDataValuesFromParentTSFolder
	End If	
End If	
'END CODE MODIFICATION
'#############################################################################

'#############################################################################
'CODE MODIFICATION
'Udayakumar Reddy  	07/15/2020
'This modification is implemented to map the netwwork drive
If (ddGetItem ("DriveLetter") <> "DriveLetter") Then
	winMapNetDrive "DriveLetter", "DrivePath"
End If
'END CODE MODIFICATION
'#############################################################################

'#############################################################################
'CODE MODIFICATION
'Vani S 	02/19/2019
'This modification is implemented to support cross browser testing	
'Set the Browser Type to test
setBrowserType

'Set the object repository Table	
setObjectRepositoryTableName
'END CODE MODIFICATION
'#############################################################################


'Global variables (Web Library)
Dim g_objIE             'Object  that Contains Intrnet Explorer object instance.
Dim g_objBrowserPage: 	'Object  that contains the browser page hierarchy.	
Dim g_objBrowserFrame 'Object  that contains the browser page Frame hierarchy
'********Manjunath - g_CurrentBrowser declaration is done utilNewTest, As this variable having some value defind **************
	'***If the variable is not defined then it will give Runtime Error which will get in Report Event Fail, if webSetPage didn’t called once  	
	'##Dim g_CurrentBrowser  	'Object that Contains the Browser object property ("Name or hwnd")
	'##Set g_CurrentBrowser=Nothing
'************************************************************************************************************
Dim g_objBrowserFocus 	'Object  that Containsthe browser name which is to be focus.
Dim g_objwebTable	'Object that contains the webtable
Dim g_BrowserFocusIndex 	'Variable that contains the browser index
Dim g_FrameFocus			'Global variable contains the Frame name	
Dim g_FrameFocusIndex		'Global variable contains the Frame index
Dim g_FireEvent_EventName     		'Global variable contains the name of the fire event method


'#########################################################################################################################################
' NAME: clickOnObject
' PURPOSE: Performs click operation on any clickable object.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Vangara Venkateswarlu											10/11/2018								New
'#######################################################################################################################################

Sub clickOnObject(ScreenName_ObjectName)
'PREREQUISITE CODE
'1) Declarations
'##############################################################
'Dim g_FireEvent_EventName  'String that  contains g_FireEvent_EventName value  of the object
strReportStepLabel = "Master Library--->clickOnObject"
'Get the object based on input parameter : ScreenName_ObjectName
	strScreenName_ObjectName=ScreenName_ObjectName
	'Get the strg_FireEvent_EventName as  input parameter : g_FireEvent_EventName
	strg_FireEvent_EventName=g_FireEvent_EventName
'##'2) Initialize Error Handling
'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
'On Error Resume Next
'##'Clear Error
'##Err.Clear
'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
'Get 'InputText' from data dictionary
'InputValue=ddGetItem(InputText)
'		g_FireEvent_EventName = "onmouseover"
'Verify if ScreenName_ObjectName is not empty
If Trim(ScreenName_ObjectName)<>"" Then
'Get the 'ScreenName_ObjectName' from object repository using ‘getObjectWithHierarchy’   ScreenName_ObjectName
Set clickObj = getObjectWithHierarchy(ScreenName_ObjectName)
			'Verify if clickObj exists
If clickObj.Exist Then
					'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
					 On Error Resume Next
		'verify 'g_FireEvent_EventName' is empty
					If g_FireEvent_EventName<>"" Then
						'Set to Run mouse operations using the mouse
						Setting.WebPackage("ReplayType") = 2
						'Use the fire event method "onmouseover" to the obtained object
						clickObj.FireEvent g_FireEvent_EventName
						'Change the global variable g_FireEvent_EventName to ""
						g_FireEvent_EventName = ""					
			           'Store the generated run time error number and error description in variables.
			            errNumber = Err.Number
			            errDescription = Err.Description
			            'Set back to Run mouse operations using browser events.
			            Setting.WebPackage("ReplayType") = 1
			            'Clear the error.
			            Err.Clear
			            'Ends the Error Handling Scope.
			            On Error GoTo 0
							If errNumber <> 0 Then
			             		'Report the status Failed as Error while executing FireEvent
			             		reporterReportEvent "Failed",strReportStepLabel, "Error while executing FireEvent method having the value '"&strg_FireEvent_EventName&"' on the object '" &strScreenName_ObjectName&"' in the component 'clickOnObject' with reason: " & errDescription & "."
		             		Else
		             			'Report the status passed if successfully performed click operation on object
	                	 		reporterReportEvent "Passed", strReportStepLabel , "FireEvent operation '"&strg_FireEvent_EventName&"' performed successfully on object  : '" &strScreenName_ObjectName&"'"
							End If
					End If	
					'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
					 On Error Resume Next
					'Clear Error
					 Err.Clear
					'verify If 'onclick','ondblclick' and onsubmit are not equal 'strg_FireEvent_EventName' Then  					
					If lcase(strg_FireEvent_EventName) <> "onclick" and lcase(strg_FireEvent_EventName) <> "ondblclick" and lcase(strg_FireEvent_EventName) <> "onsubmit" Then
						'Click on the obtained object
		            	clickObj.Click	
		            	'Store the generated run time error number and error description in variables.
			            errNumber = Err.Number
			            errDescription = Err.Description
			            'Clear the error.
			            Err.Clear
			            'Ends the Error Handling Scope.
			            On Error GoTo 0 		
			            'Verify if errNumber number is 0
			            If errNumber = 0 Then            		
		                	'Report the status passed if successfully performed click operation on object
		                	 reporterReportEvent "Passed", strReportStepLabel , "Click operation performed successfully on object  : '" &strScreenName_ObjectName&"'"
			            Else
							'Report the status as Failed if unable to perform click operation on object
							reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform click operation on object '"&strScreenName_ObjectName&"' with reason: " & errDescription & "."
			            End If
					End If	            	
		
Else
		'Report the status Failed as object does not exist
		reporterReportEvent "Failed",strReportStepLabel, "The given object '"& strScreenName_ObjectName& "' does not exists in the available page.Please specify valid properties and values in the object repository"
			 End If 			
Else
'Report the status as Failed for passing 'ScreenName_ObjectName' value is empty
reporterReportEvent "Failed",strReportStepLabel, "ScreenName_ObjectName is a mandatory parameter and cannot be empty .So please enter a valid 'ScreenName_ObjectName'."
End If
End Sub


'#########################################################################################################################################
' NAME:  closeWindow
' PURPOSE:  To close an active Window.
' PARAMETERS:
'		INPUT :
'				ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.		
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Vinitha Raghu													06/13/2018				   	   NEW
'#######################################################################################################################################
Function closeWindow(ScreenName_ObjectName)
'PREREQUISITE CODE
'1) Declarations
'##############################################################
Dim winObj  'String that  contains input value  of the object
strReportStepLabel = "Master Library--->closeWindow"	
'##'2) Initialize Error Handling
'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
'    On Error Resume Next
'##'Clear Error
'##Err.Clear
'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################

	'Verify if ScreenName_ObjectName is not empty
	If Trim(ScreenName_ObjectName) <> "" Then
	    'Get the 'ScreenName_ObjectName' from object repository using ‘getObjectWithHierarchy’
	    set ObjWindow=getObjectWithHierarchy(ScreenName_ObjectName)
		'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
'		On Error Resume Next
'		'Clear Error
'		Err.Clear			
		'Verify if object exists
		If ObjWindow.Exist Then
			On Error Resume Next	
			'Set the Test Results not to display anything(This is done to handle Window's run time error)
'			Reporter.Filter=rfDisableAll 'No events are displayed in the Test Results.
			'getting the value of the property 'hwnd'
			winObj = ObjWindow.GetROProperty("hwnd")
			'close the browser/window
			Window("hwnd:="&winObj).Close
			'Set the Test Results to default mode(Display all status )
'			Reporter.Filter=rfEnableAll 'All reported events are displayed in the Test Results.
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
				'Verify the error occurrence	
				If errNumber =0 Then
					'Report as Passed as there was no error occurred  while Close the browser
					reporterReportEvent "Passed",strReportStepLabel, "The window has been Closed successfully "
				Else
					'Report as Warning with the error description
					reporterReportEvent "Failed",strReportStepLabel,"Failed to perform close operation on the window having name : '"&ScreenName_ObjectName&"' Reason: '"& errDescription&"'."
				End If 	
		Else
	 		'Report the status Failed as object does not exist
	 		reporterReportEvent "Failed",strReportStepLabel, "The given object "& ScreenName_ObjectName& " does not exists.Please specify valid properties and values in the object repository"
		End if 	
	Else
		'Report the status as Failed for passing 'ScreenName_ObjectName' value is empty
		 reporterReportEvent "Failed",strReportStepLabel, "ScreenName_ObjectName is a mandatory parameter and cannot be empty .So please enter a valid ScreenName_ObjectName ."
	End if
End Function


'######################################################################################################################
' NAME:ddAddItem
' PURPOSE: To add a new item for the specified key name to data dictionary.
'PARAMETERS:
'	INPUT:
'		Name:  	String that contains the key name to be added to data dictionary .
'		Value: 	  String that contains value of the Key to be stored  into data dictionary
'		      		**Note : The data dictionary set to disallow duplicate key name .When a duplicate key name is found Key Name[N] suffix is added
'                                 :  [N] contains an integer value starting from 1 ,2 ,3 ,4 , .......
'	OUTPUT: Boolean value
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  C.MCMILLAN		12/2011				        NEW
'Sunil Kumar G		06/2013					Modified to handle key index value and also to handle object.
'Narasinha			  07/2013				  Updated for initializing the value for g_iAddIteration 	
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'######################################################################################################################
Function ddAddItem(Name, Value) 'As boolean
'Initialize the function to false
	ddAddItem = False	
	' Verify a global Data dictionary  object is created, which is used for adding a key name and respective value for  data dictionary
	If Not g_dDictionary Is Nothing Then	
		On Error Resume Next
		'Clear the Error
		Err.Clear
		'Verify that passed value object type
		If IsObject(Value) Then
			'Assign the object to variable
			Set objOrValue=Value
		Else
			'Assign the value to variable by removing the unwanted spaces in both ends
			objOrValue=Trim(Value)
		End If
		'Add item to data dictionary as key name and  value
		g_dDictionary.Add Name,objOrValue
		'If the item already exists then increment the iteration
		'This allows the element to be used in 2-N iterarions.
		If Err.number > 0 then
			Err.Clear
			reporterReportEvent "Warning", "Data Library-->ddAddItem", "Existing Record with KeyName Found.  Duplicate being added in the format KeyName[index]."
			'Initialize the key index
			g_iAddIteration=1
			'If item already exist in data dictionary increment item substring
			Do Until Not(g_dDictionary.Exists(Name &"["& g_iAddIteration &"]"))
				'Increment the Key index
				g_iAddIteration = g_iAddIteration + 1
			Loop			
			Err.Clear
			'Add incremented substring item in data dictionary
			g_dDictionary.Add Name &"["& g_iAddIteration &"]", objOrValue
'Store the generated run time error number  in a variable.
			errNumber = Err.Number
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'verify error occured while adding item to data dictionary  and report the failed status
			if errNumber >0 then
				reporterReportEvent "Failed", "Data Library-->ddAddItem", "Couldn't add Item to Dictionary"
				Exit Function
			End if
		End If
	Else
		reporterReportEvent "Failed","Data Library ---> ddAddItem","Data Dictionary Not initialized.  A dictionary object is needed for test execution."
	End If
		'If no error is found then set function to true
		ddAddItem = True	
End Function


'###############################################################################################################################
' NAME:  ddAddRecordSetValue
' PURPOSE: Add RecordSet Row Field(column) value to data dictionary for the supplied key
' PARAMETERS:
'		INPUT:
'				SQLStatement_KeyName : Name of the key identifier in the data dictionary referencing the SQL String the Recordset is named after.
'				RS_RowNumber : (Numeric) Row number in the Recordset
'				RS_FieldName : Name of the Field (column) identifier in the Recordset
'				ddKeyNameToSave_RSValue : Name of the key identifier in the data dictionary to save the Row/Field value to.				
'	   OUTPUT :
'				ddKeyNameToSave_RSValue will contain the Row/Field value in DD
'HISTORY
'NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------------------------------------------------------
'Manjunath L M			5/27/2014					NEW
'###############################################################################################################################
Sub ddAddRecordSetValue(SQLStatement_KeyName,RS_RowNumber,RS_FieldName,ddKeyNameToSave_RSValue)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################		
			Dim strRS_FieldName '(String )FieldName in the RecordSet from which need to fetch the data
			Dim intRS_RowNumber '(Numeric) RowNumber in the RecordSet from which need to fetch the data 			
			Dim strSQLStatement_KeyName '(String) Name of the key identifier in the data dictionary referencing the SQL String the Recordset is named after.
			Dim strRowFieldValue '(String) The value retrieved for the RowField from the RecordSet			
			Dim objRecordSet ' (Object) RecordSet retrieved from DD under the key SQLStatement_RecordSet
			Dim blnFieldNameExist '(Boolean) Field(Column) name existence status
			Dim intFieldIndex_RS_FieldName ' (Numeric) Obtained Field(column) index, after comparing the supplied field name with the existing  field names in RecordSet
			Dim intRS_RowDefault ' (Numeric) Start row of the RecordSet
			Dim blnIsRS_RowNumberFound '(Boolean) Row number existence status
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Data Library ---> ddAddRecordSetValue"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'2) Get all the inputs
		strRS_FieldName=ddGetItem(RS_FieldName)
		intRS_RowNumber=ddGetItem(RS_RowNumber)		
		strSQLStatement_KeyName=ddGetItem(SQLStatement_KeyName)
		'3) Check the existence of RecordSet for the supplied SQL Statement
		If g_dDictionary.Exists(strSQLStatement_KeyName&"_RecordSet") Then
			'4) Get the RecordSet for the supplied SQL Statement
			Set objRecordSet=ddGetItem(strSQLStatement_KeyName&"_RecordSet") 			
			blnFieldNameExist=False ' Define blnFieldNameExist to false
			'5) Iterate through all the fields(columns)
			For ColumnIndex=0 To objRecordSet.Fields.Count-1                            			
				'5.1) Check obtained column name and supplied column name are same, If so get the column index and exit from the loop
				If Lcase(objRecordSet.Fields.Item(ColumnIndex).Name)=Lcase(strRS_FieldName)Then
					blnFieldNameExist=True
					intFieldIndex_RS_FieldName=ColumnIndex				
					Exit For
				End If
			Next
			'6) Report failure - Supplied FieldName not exist in the RecordSet obtained for the SQL Statement
			If Not blnFieldNameExist Then  reporterReportEvent "Failed",strReportStepLabel,"The supplied Field(Column) Name: '"&strRS_FieldName&"' does not exist in the RecordSet "&_
										"obtained for the SQL Statement: '"&strSQLStatement_KeyName&"' . Please recheck and supply a valid FieldName to component and rerun the script"
			intRS_RowDefault=1 ' Define the row, default start to one
			blnIsRS_RowNumberFound=False ' Define blnIsRS_RowNumberFound to false
			'7) Check RS_RowNumber is numeric
			If IsNumeric(intRS_RowNumber) Then
				'8) Iterate through all the records to find the supplied row
				Do While Not objRecordSet.EOF	OR  blnIsRS_RowNumberFound
					'8.1)Check the current rownumber of RecordSet is the same as passed in I/P RS_RowNumber
					If intRS_RowDefault = Cint(intRS_RowNumber) Then
						blnIsRS_RowNumberFound=True' If same assign blnIsRS_RowNumberFound true,
						Exit Do										'And exit from the Do loop
					End If
					'8.2) Increment the RS_RowDefault number by one
					intRS_RowDefault=intRS_RowDefault+1
					'8.3) Move RecordSet pointer to next
					objRecordSet.MoveNext
				Loop
				'9) Report failure- Supplied FieldName not exist in the RecordSet obtained for the SQL Statement
				If Not blnIsRS_RowNumberFound Then  reporterReportEvent "Failed",strReportStepLabel,"The supplied RowNumber: '"&intRS_RowNumber&"' does not exist in the RecordSet "&_
										"obtained for the SQL Statement: '"&strSQLStatement_KeyName&"' . Please recheck and supply a valid RowNumber to component and rerun the script"
			Else
				'7.1) Report failure- Supplied RowNumber is not numeric
				reporterReportEvent "Failed",strReportStepLabel,"The supplied RowNumber: '"&RS_RowNumber&"' is not numeric. Please supply only numeric value."
			End If
			'10) Initialize Error Handling
			On Error Resume Next
			'11) Get the Row Field value from the RecordSet and return the same to calling component
			strRowFieldValue=Trim(objRecordSet.Fields(intFieldIndex_RS_FieldName).Value)			
			'11.1) Move RecordSet pointer to first, This will be useful while getting the multiple row field value from the same RecordSet
			objRecordSet.MoveFirst
			'11.2) Close RecordSet
			Set objRecordSet=Nothing			
			'10.1) Verify the error occurrence, and if any suppress the errors
			errNumber=Err.Number
			errDescription=Err.Description
			On Error Goto 0
			'10.2) Check for the errors
			If errNumber = 0Then
				'11) Call ddAddItem to add the retrived value to DD with the supplied keyname ddKeyNameToSave_RSValue
				ddAddItem ddKeyNameToSave_RSValue , strRowFieldValue
				'12) Report done as the obtained value stored to DD for the supplied keyname ddKeyNameToSave_RSValue
				reporterReportEvent "Done",strReportStepLabel,"The retrieved RowField value: '"&strRowFieldValue&"' from  RecordSet, which is obtained for the SQL Statement: '"&_
								strSQLStatement_KeyName&"' is added to DD for the supplied keyname: '"&ddKeyNameToSave_RSValue&"'"
			Else
				'10.3)  Report failure - Error obtained while retrieveing the value from the RecordSet
				reporterReportEvent "Failed",strReportStepLabel,"Failed to get the value for the supplied RowNumber: '"&intRS_RowNumber&"' and FieldName: '"&_
				strRS_FieldName&"' from the RecordSet , which is obtained for the SQL Statement: '"&strSQLStatement_KeyName&"' due to reason: "&errDescription           			
			End If
		Else
			'3.1) Report failure - RecordSet not found for the supplied SQL Statement
			reporterReportEvent "Failed",strReportStepLabel,"No RecordSet found for the SQL Statement: '"&strSQLStatement_KeyName&"' . Please call the ddQueryDataSource "&_
																						"component in the script before running this statement."
		End If              		
End Sub


'##############################################################################################################
' NAME:  ddDataSourceFactory
' PURPOSE: The Factory object instantiates new DB Objects through a common interface without knowing
'			the implementation
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'C.McMillan               06/2013                 NEW
'Manjunath                08/2013                 Updated the class name from DataSourceFactory to ddDataSourceFactory. 						
'##############################################################################################################
Class ddDataSourceFactory
' Class DataSourceFactory
	Private Sub Class_Initialize()
	End Sub
	Private Sub Class_Terminate()
	End Sub
	'#####################################################################################
	' NAME:  CreateNewDbObject	
	' PURPOSE: Query database and return the dataset to the user.
	' PARAMETERS:
	'		INPUT : DataSourceType: String that contains the data type name equal to the class being instantiated.
	'	   OUTPUT : OBject that contains the intantiated database object.
	'HISTORY
	'NAME:						DATE:					PURPOSE
	'-----------------------------------------------------------------------------------------------------
	'Anil                          11/30/2012                 NEW
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
	'######################################################################################
	Function CreateNewDbObject(DataSourceType)
		Dim objDb
		On Error Resume Next
		Err.Clear
		Execute "Set objDb = NEW "& Lcase(DataSourceType)
'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		If errNumber = 506 Then
			reporterReportEvent "Fail","Data Source Library------>CreateNewDbObjectr","Supporting Libraries for Database Type "& DataSourceType &" are not installed; please contact the automation team."
		Else If errNumber <> 0 Then
			reporterReportEvent "Fail","Data Source Library------>CreateNewDbObjectr","Automation Error Reported: "& errDescription
			End If
		End If		
		Set CreateNewDbObject = objDb
	End Function     		
End Class



'##############################################################################################################
' NAME:  ddDataWriterFactory
' PURPOSE: The Factory object instantiates new Writer Objects through a common interface without knowing
'			the implementation
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M  	05/05/2014					New
'##############################################################################################################
Class ddDataWriterFactory
	'Class DataWriterFactory
	Private Sub Class_Initialize()
	End Sub
	Private Sub Class_Terminate()
	End Sub
	'#####################################################################################
	' NAME:  CreateNewDataWriterObject	
	' PURPOSE: Create the writer class
	' PARAMETERS:
	'		INPUT :
	'				 DataWriterType : String that contains the data writer type(excel, text....) being instantiated.
	'	   OUTPUT :
	'				Object that contains the intantiated data writer object.
	'HISTORY
	'NAME:						DATE:					PURPOSE
	'-----------------------------------------------------------------------------------------------------
	'Manjunath L M  	05/05/2014					New
	'######################################################################################
	Function CreateNewDataWriterObject(DataWriterType)
	   'PREREQUISITE CODE
		'1) Declarations
		'##############################################################
			Dim objDataWriter 		'Object that contains the instantiated writer class 														
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Data Writer Library------>CreateNewDataWriterObject"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################   		
		' Initialize Error Handling
		On Error Resume Next
		Err.Clear
		Execute "Set objDataWriter = NEW "& Lcase(DataWriterType)
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		If errNumber = 506 Then
			reporterReportEvent "Failed",strReportStepLabel, "Supporting Libraries for DataWriter Type "& DataWriterType &" are not installed; please contact the automation team."
		ElseIf errNumber <> 0 Then
			reporterReportEvent "Failed",strReportStepLabel, "Automation Error Reported: "& errDescription&" ; please contact the automation team."
		End If		
		'Assign the writer class object to calling component
		Set CreateNewDataWriterObject = objDataWriter
	End Function     		
End Class


'###############################################################################################################################################
' NAME :ddGetItem
' PURPOSE: To get  data for the specified  key name from data dictionary .
'PARAMETERS:
'	   INPUT :
'		       Name: String that contains key name of the field you wish to retrieve a value for that .
'	  OUTPUT:
'			  ddGetItem:Stirng that contains value of corresponding Key Name .
'HISTORY
'NAME:						DATE:				PURPOSE
'-----------------------------------------------------------------------------------------------------
'C.MCMILLAN					12/2011				NEW
'SunilKumar G				05/2013				Modified to handle action iteration .	
'Manjunath 			  		06/2013				Modified to add  a report for iteration .
'Narasinha			  		07/2013				Modified to verify the g_dDictionary object is exist		
'Manjunath 			 		08/2013				Modified to handle the db object if action iteration is greater then one and to Verify the input prameter  existance in dictionary
'Lakshman Kumar A.H.     	26/02/2014			Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Somika Jain				10/10/2019			Modified to write the encrypted passwords for oracle and DB2 database connection in UFT reports.
'Jayarami Reddy				02/27/2020			Made ddGetItem a public function
'###############################################################################################################################################
Public Function ddGetItem (Name) 'As string
'##On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
'##On Error Resume Next
ItemFound = False'Assign the boolean false
	'Verify  global Data dictionary  object is created  or not
	If Not g_dDictionary Is Nothing Then
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear the Error
		Err.Clear
		'Get test itteration value used to retrieve keyname sub-string
		' if test iteration is one then retrieve key value supplied by the user
		If qtpGetCurrentIteration = 1 And qtpGetCurrentActionIteration=1 And g_dDictionary.Exists(Name) Then
			'Assign obtained value to variable strKeyValue
			strKeyName=Name
			'Verify Item in data dictionary if test Action iteration is greater than one
		ElseIf  qtpGetCurrentActionIteration > 1 And g_dDictionary.Exists(Name &"["& (qtpGetCurrentActionIteration -1) &"]") Then
			'Assign obtained value to variable strKeyValue
			strKeyName=Name &"["& (qtpGetCurrentActionIteration - 1) &"]"
			'Verify Action iteration is equal to 0ne and the key name is not exist in the data dictionary
		ElseIf  (qtpGetCurrentActionIteration <> 1 OR qtpGetCurrentIteration <> 1 )And (Not(g_dDictionary.Exists(Name &"["& (qtpGetCurrentActionIteration -1) &"]"))) Then
			'Assign obtained value to variable strKeyValue
			strKeyName=Name' This is done to handle the object in ddQueryData source
			'Verify Item in data dictionary if test iteration is greater than one
		ElseIf  qtpGetCurrentIteration > 1 And g_dDictionary.Exists(Name &"["& (qtpGetCurrentIteration -1) &"]") And qtpGetCurrentActionIteration=1  Then	
			'Assign obtained value to variable strKeyValue
			strKeyName=Name &"["& (qtpGetCurrentIteration - 1) &"]"
		End If
		'Verify the input prameter  exists in global dictionary
		If g_dDictionary.Exists(strKeyName)  Then
			ItemFound = True
			'Verify that retrieved value is an object
			If IsObject(g_dDictionary(strKeyName)) Then
				'Return the object which is retrived
				'If IsObject True then we know a value is present
				Set ddGetItem=g_dDictionary(strKeyName)
			Else	
				'return the value to the component 'ddGetItem'
				If Not IsEmpty(g_dDictionary(strKeyName)) Then
					ddGetItem=g_dDictionary(strKeyName)	
				End If
			End If	
		End If
		'############################ MODIFICATION ###################################
		'Existing code was writing the actual password used for oracle and DB2 database connection in UFT reports.
		'Somika added below if condition on 10/10/2019 to encrypt the oracle and DB2 password and write the same to UFT reports.
		If strKeyName="dd_DB2DecryptedPassword" or strKeyName="dd_OraDecryptedPassword" then
			tmpPwd=crypt.encrypt(g_dDictionary(strKeyName))
		   reporterReportEvent "Done","Data Library-->ddGetItem","Database password has value: "&tmpPwd			
		else
		'########################### END MODIFICATION ################################
			If ItemFound Then
				'Report the status as "Done"
				reporterReportEvent "Done","Data Library-->ddGetItem","Key Name : "&Name& " has value: "&g_dDictionary(strKeyName)			
					
				Err.Clear'If object is obtained for the key name then error will be obtained so before going to some other component we are clearing the error
			Else
				'if Key does not exist in data dictionary  then return the Key name itself as value
				ddGetItem=Name
				'Report the status as "warning"
				reporterReportEvent "Warning","Data Library-->ddGetItem","No value found for Key Name : "&Name& " in datadictionary returned value is : "&Name			
			End if
		End If
	Else
		'if global data dictionary object is not  created then report the status as failed
		reporterReportEvent "Failed","Data Library-->ddGetItem","Dictionary not Initialized.  Dictionary object needed for test execution."
	End If
End Function


'#################################################################################################################################################
' NAME:  ddGetObjectProperties
' PURPOSE:  To get the data from object repository. Initially the component checks the data in data dictionary and then it checks the object value in object repository.
'							if the data is not found then the "screenname_objectname" itself will be  added to data dictionary.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName:	String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT :
'			g_strObjectType:		    String that contains class name of the object.
'			g_arrPropertyNames    Array that contains all the property names specified in object repository in an array ( Ex : Array(name,html tag,file name,..... )
'			g_arrPropertyValues    Array that  contains Property Values  corresponding to the PropertyNames of the object in an array (Ex : Array(test, A,Up2.gif,...))
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Anil							12/06/2012			NEW
'C.McMillan			   06/15/2013		Modified Line 30 to add DBName parameter to ddQueryDataSource
'Manjunath L M	  08/16/2013		Modified to get the Object_Repository_dbTableName from test data file and removed the process of fetching the record set
'																from data dictionary for the supplied ScreenName_ObjectName
'Manjunath L M		09/06/2013		Verify the object record set for the sqlQueryStatement ,if its not there in DD then go for ddQueryDataSource to create the new recordset for the sqlQueryStatement
'Manjunath L M	  	10/25/2013		Modified to handle the assistive property for the object
'Manjunath L M		11/13/2013		Modified to handle if if the object repository is having column name “ParentObject”.
'Lakshman Kumar A.H.     19/03/2014					Removed Error Handling Initialization.
'Vani S				   02/19/2019		 Modified the code to support cross browser testing
'#################################################################################################################################################
Private Function ddGetObjectProperties(ScreenName_ObjectName)
	''PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	Dim sqlQueryStatement 'String that contains the sqlQueryStatement for the ScreenName_ObjectName
	'##'2) Initialize Error Handling
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
	'##'Clear Error
	'##Err.Clear
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	'CODE MODIFICATION
	'10/25/2013  Manjunath Modified to handle the assistive property for the object
		'Initialize global variables to empty
		g_strObjectType=""		
		'##g_strPropertyName1=""
		g_arrPropertyNames=""
		'##g_strPropertyValue1=""
		g_arrPropertyValues=""
		'##g_strPropertyName2=""
		'##g_strPropertyValue2=""		
		'3)Verify the input prameter  exists in global dictionary
		If Not g_dDictionary.Exists(ScreenName_ObjectName)  Then
			'4) Execute the database query for the specified input parameter "ScreenName_ObjectName"
			'CODE MODIFICATION
			'09/06/2013  Manjunath Verify the object record set for the sqlQueryStatement ,if its not there in DD then go for ddQueryDataSource to create the new recordset for the sqlQueryStatement
			
			'Create the sqlQueryStatement for the supplied ScreenName_ObjectName
			'sqlQueryStatement="Select * From "&ddGetItem("Object_Repository_dbTableName")&" Where ScreenName_ObjectName='"&ScreenName_ObjectName&"'"
			
			'#############################################################################
			'CODE MODIFICATION
			'Vani S 	02/19/2019 		'Updated the query with global variable g_strObjRepositoryTableName(Table name in the query) to support cross browser testing.
			sqlQueryStatement="Select * From "&g_strObjRepositoryTableName&" Where ScreenName_ObjectName='"&ScreenName_ObjectName&"'"
			'END CODE MODIFICATION
			'######################################
			
			'5)Verify the object record set for the sqlQueryStatement
			If Not g_dDictionary.Exists(sqlQueryStatement&"_RecordSet") Then			
				'######################################
				'CODE MODIFICATION
				'09/04/2013  C.MCMILLAN  REMOVE OBJECT ASSIGNMENT, ddQueryDataSources doesn't return a value; value is assigned to
				'		the Data Dictionary as the SqlQueryStatement.
				'Set objRecordSet=ddQueryDataSource ("Object_Repository","Select * From "&ddGetItem("Object_Repository_dbTableName")&" Where ScreenName_ObjectName='"&ScreenName_ObjectName&"'")
				'sqlQueryStatement="Select * From "&ddGetItem("Object_Repository_dbTableName")&" Where ScreenName_ObjectName='"&ScreenName_ObjectName&"'"
				'Call ddQueryDataSource to create the new recordset for the sqlQueryStatement
				ddQueryDataSource "Object_Repository",sqlQueryStatement
			End If
			'If g_dDictionary.Exists(sqlQueryStatement) Then
			'Verify whether the record set is obtianed for supplied sqlQueryStatement
			If g_dDictionary.Exists(sqlQueryStatement&"_RecordSet") Then			
				'Set objRecordSet=ddGetItem (sqlQueryStatement)
				Set objRecordSet=ddGetItem (sqlQueryStatement&"_RecordSet")
				'Get the object properties for the specified  input parameter "ScreenName_ObjectName"
				If Not objRecordSet.EOF Then					
					'Assign the object type to a global variable g_strObjectType
					g_strObjectType=Trim(objRecordSet("ObjectType").Value)      	
					'CODE MODIFICATION
					'11/13/2013  Manjunath  Modified to handle if if the object repository is having column name “ParentObject”.
						'Get the all the property names mentioned from column index 2
						For indexProperty=2 To objRecordSet.Fields.Count-2 Step 2'As 0th column index consist of ScreenName_ObjectName
																	'and 1st column index consist of object type, so we are looping it from column index 2
						'ASSUMPTION : ParentObject Column is the last column if the object repository is having column name “ParentObject”.
					'END CODE MODIFICATION
					'######################################
							'Check for the property name and value should not be null. Even number column index will consist the property name and the odd column
							If Trim(objRecordSet.Fields.Item(indexProperty).Value) <> "" And Trim(objRecordSet.Fields.Item(indexProperty+1).Value) <> "" Then'index will consist of property value
								'Check the global variable g_arrPropertyNames is redefined  as array or not
								If Not IsArray(g_arrPropertyNames) Then'if not then define first value of array
									g_arrPropertyNames=Array("Replaced with first property name") 'that will be overwrite  by first property  name or value
									g_arrPropertyValues=Array("Replaced with first property value")
								Else
									'if the global variable is defined  as array then for updating next values redefine the array
									ReDim Preserve g_arrPropertyNames(UBound(g_arrPropertyNames) + 1)
									ReDim Preserve g_arrPropertyValues(UBound(g_arrPropertyValues) + 1)						
								End If
								'Get all the property names in a global array g_arrPropertyNames, each name added to the array
								'##g_strPropertyName1=Trim(objRecordSet("PropertyName1").Value)	
								g_arrPropertyNames(UBound(g_arrPropertyNames)) = objRecordSet.Fields.Item(indexProperty).Value
								'Get all the property value in a global array g_arrPropertyValues, each value added to the array
								'##g_strPropertyValue1=Trim(objRecordSet("PropertyValue1").Value)
								g_arrPropertyValues(UBound(g_arrPropertyValues)) = objRecordSet.Fields.Item(indexProperty+1).Value
								'##g_strPropertyName2=Trim(objRecordSet("PropertyName2").Value)
								'##g_strPropertyValue2=Trim(objRecordSet("PropertyValue2").Value)
							End If
						Next					
				Else
					'Report the status as warning, notifying the user as no object properties retrieved for the specified input parameter  "ScreenName_ObjectName"
					reporterReportEvent	"Warning","Database Library --->ddGetObjectProperties","Unable to get the object properties from object repository database for : "&ScreenName_ObjectName
				End If
			Else
				'Report the status as warning, notifying the user as no object properties retrieved for the specified input parameter  "ScreenName_ObjectName"
				reporterReportEvent	"Warning","Database Library --->ddGetObjectProperties","Unable to get the object properties from object repository database for : "&ScreenName_ObjectName
			End If
			'END CODE MODIFICATION
			'######################################
			'END CODE MODIFICATION
			'######################################
		End If
	'END CODE MODIFICATION
	'######################################
End Function


'############################################################################
' NAME : ddNewDataDictionary
' PURPOSE: Create a new data dictionary to hold test data.
'PARAMETERS: NONE
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  C.MCMILLAN		 12/2011					NEW
'Manjunath L M		07/2013					Modified to verify the dictionary object existance
'																	and to remove the old (junk) values
'############################################################################
Private Sub ddNewDataDictionary()
	'Verify  global Data dictionary  object existance
	If Not IsObject(g_dDictionary) Then
		'Create a dictionary object which is used to add item to dictionary or getitem from dictionary.
		Set g_dDictionary = CreateObject ("Scripting.Dictionary")
		'Remove the old(junk) content from data dictionary before adding new data
		g_dDictionary.RemoveAll
		'Prompt the script to throw an error when adding duplicates key names to data dictionary ..
		g_dDictionary.CompareMode = 1  		
	End If
End Sub
'######################################################################


'#################################################################################################################################################
' NAME:  ddQueryDataSource
' PURPOSE: Query database and return the dataset to the user.
' PARAMETERS:
'		INPUT:  DbName: String that contains the Db Name used to identify the db in the Dictionary.
'				sqlQueryStatement : String that contains SQL query statement ot be executed.
'	   OUTPUT :  Object that contains copy of the data we requested through SQL statement (DataSet).
'HISTORY
'NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'C.McMillan               06/2013                 NEW
'Manjunath L M 		  09/06/2013	Modified to add the recordset object for the key name sqlQueryStatement&"_RecordSet"
'Manjunath LM 		09/10/2013 		ddGetItem component will check the sqlQueryStatement  in DD,If not found assume that the sqlQueryStatement is a Literal String
'Lakshman Kumar A.H.     19/03/2014					Removed Error Handling Initialization.
'#################################################################################################################################################
Sub ddQueryDataSource(DbName, sqlQueryStatement)
''PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	Dim dataSourceFact	'Object that contains the class which will provide methods for interacting with databases
	Dim dataSourceObj	'Object that contains the class which will provide methods for interacting with databases
	Dim sqlStatement	'String that contains the sqlQueryStatement
	Dim dataSourceRecordSet'Object that contains the record set object for the supplied sqlQueryStatement
	'##'2) Initialize Error Handling
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
	'##'Clear Error
	'##Err.Clear
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################	
	'Test if DbConnection is already saved to Dictionary
	If Not g_dDictionary.Exists(DbName &"_Connection")  Then
		'Verify that the needed Data Driver is installed on the machine.
		ddVerifyDataDriver(ddGetItem(DbName &"_DataSourceType"))
		'Create a New DataSource Factory Object which creates new Db Objects
		Set dataSourceFact = New ddDataSourceFactory
		Set dataSourceObj = dataSourceFact.CreateNewDbObject(ddGetItem(DbName &"_DataSourceType"))
		'Connect to the Data Source
		dataSourceObj.ConnectToDataSource(DbName)
		'Add the newly created connection to the data dictionary
		ddAddItem DbName &"_Connection", dataSourceObj 	
	End If
	'###############################
	'CODE MODIFICATION
	'09/2013 C.MCMILLAN	
	'1)Modify SQL Statement to accept either a passed in string or Dictionary reference
	'2)Modify g_dDictionary.Item to fix syntax error
	'3)Get Recorset, save to dictionary, report results
	'Query Data Source--Save a copy of the dataset to the dictionary
	'Get SQL Statement	
	'CODE MODIFICATION
	'09/10/2013 Manjunath LM ddGetItem component will check the sqlQueryStatement  in DD,If not found assume that the sqlQueryStatement is a Literal String
	sqlStatement = ddGetItem (trim(sqlQueryStatement))
	'##If not found assume that the sqlQueryStatement is a Literal String
	'##If sqlStatement = "sqlQueryStatement" then sqlStatement = trim(sqlQueryStatement)
	Set dataSourceRecordSet = g_dDictionary.Item(DbName &"_Connection").QueryDataSource(sqlStatement)
	'END CODE MODIFICATION
	'#################################
	'###############################
	'CODE MODIFICATION
	'09/06/2013 Manjunath L M modified to add the recordset object for the key name sqlQueryStatement&"_RecordSet"
	ddAddItem sqlStatement&"_RecordSet", dataSourceRecordset
	'END CODE MODIFICATION
	'#################################
	'END CODE MODIFICATION
	'#################################
End Sub


'######################################################################################################################
' 	NAME:	ddReplaceItem
' 	PURPOSE: 	To replace an existing item for the specified key of data dictionary.
'	PARAMETERS:
'	INPUT:
'		strKeyName:  String that contains the key name for which value needs to be replaced from data dictionary .
'		strValue: 	      String that contains new value that is going to be replaced for existing one.
'	OUTPUT: NA
'	HISTORY
'	NAME:			             DATE:					PURPOSE
'  Neeraj Gaur			7/26/2013					NEW
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'######################################################################################################################
Sub	ddReplaceItem(strKeyName,strValue) 	'As String
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next		
		'Clear the error.
		Err.Clear
		'Verify if key is already existing in Data dictionary.
		If g_dDictionary.Exists(strKeyName) Then
			'Replace the existing value in dictionary for the key that is passed as parameter.
			g_dDictionary.Item(Trim(strKeyName))=Trim(strValue)
			blnItemExists = True
		End If
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0

	   'Error Handling	
		If errNumber  = 0 then 																
			If blnItemExists = True Then		  'Verify if item is replaced successfully for the input key in the Data dictionary.
				reporterReportEvent "Passed","Data Library ---> ddReplaceItem","Replacing the value in Data Dictionary is successful. New value " & chr(34) & strValue  & chr(34) &" is entered for key "  & chr(34) & strKeyName  & chr(34)
			Else														'Verify if key does not exist in Data dictionary.
				reporterReportEvent "Failed", "Data Library-->ddReplaceItem", "Key " & strKeyName & " is not found in data dictionary."
			End If
		Else   			'Verify if item is not replaced successfully in the Data dictionary.			
			If g_dDictionary Is Nothing Then	 'Verify global Data dictionary object is created or not
				reporterReportEvent "Failed","Data Library ---> ddReplaceItem","Data Dictionary Not initialized.  A dictionary object is needed for test execution."		
			Else														 'Verify if any other error occurred while replacing and item in data dictionary and report the failed status.
				reporterReportEvent "Failed", "Data Library-->ddReplaceItem", "Replacing the value in Data Dictionary is not successful with reason: "& errDescription
			End If
		End If
End Sub


'###############################################################################################################################
' NAME:  ddSaveItemToFile
' PURPOSE: Stores values from Data Dictionary Keys(text, recordset ..)to a specified file
' PARAMETERS:
'		INPUT:
'				DDKeys : Semicolon-Delimited String containing the Key Name References to the Values to be written to a file
'				SavePath : The destination file path
'	   OUTPUT :
'			None
'HISTORY
'NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------------------------------------------------------
'MLM			05/07/2014             						New
'MLM			07/22/2014		 		Removed '_RecordSet' appending for Query(RS) retrieval, Handled internally.
'###############################################################################################################################
Sub ddSaveItemToFile(DDKeys, SavePath)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################		
			Dim arrDDKeys_DataValues() 'Array, that contains strings(KeyName) with the vaule seperated by a semicolon OR objects(RS).	
			Dim arrKeyNames 			  'Array that contains all the key names supplied by the user
			Dim strDataType					 'String that contains type of the data(Txt, RS....)
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "DataWriter Library --> ddSaveItemToFile"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'Create FSO object and check the file existence.
		Set Fso=CreateObject("Scripting.FileSystemObject")
		'Get the save path location from dd
		strSavePath=ddGetItem(SavePath)
		'File not exist , Fail
		If Fso.FileExists(strSavePath) Then                     		
			'Determine Writer Type based on file Extension of the file path
			strExtensionOfSavePath_DataWriterType=Trim(Fso.GetExtensionName(strSavePath))
			'Create the correct data writer object based on the extension passed into the “strSavePath” variable
			'Check the file read/write status
			If  strExtensionOfSavePath_DataWriterType="xls" Or strExtensionOfSavePath_DataWriterType="xlsx" Then
				'create the temp file path for read only sheet for the specified file
				strTempPath=strReverse(Replace(StrReverse(strSavePath),"\","$~\",1,1))
				'Check read only file existence for the specified file
				If Fso.FileExists(strTempPath) Then 	reporterReportEvent "Failed",strReportStepLabel,"The supplied EXCEL file from the path '"&strSavePath&"' present and read only."&_
																				"To write the data we need to have read/write file. Please close the opened file and re-run"        				
				DataWriter="Excel" 'Define data writer for excel file as "Excel"
			'**
			'IF NEW WRITERS TO BE INCLUDED
			'**
			Else
				reporterReportEvent "Failed",strReportStepLabel,"The data writer of type '"&strExtensionOfSavePath_DataWriterType&"' is not defined yet. Please contact automation team"
			End If
		Else
			reporterReportEvent "Failed",strReportStepLabel,"The supplied file/save path '"&strSavePath&"' is not present OR User do not have access to the required drive. Please supply valid file/save path and re-run"
		End If  		
		'DDKeys should contain only the keynames from data dictionary
		If LCase(TypeName(DDKeys))="string" Then
			'DDKeys shouldn’t be empty
			If  Trim(DDKeys) <> "" Then				
				'Get all the keys supplied to a array
				arrKeyNames=Split(DDKeys,";")
				'Get all the values from DD, for the keys supplied in an array
				'If the keys contains the object value, then add only those objects to array
				'If the keys contains string value, then add keyname;Keyvalue to array
				'Iterate through all the keys in arrKeyNames
				For intArrIndex= 0 To Ubound(arrKeyNames)
					'Define the data array dynamically
					ReDim Preserve arrDDKeys_DataValues(intArrIndex)
					'########################################
					'CODE MODIFCATION	
					'07/22/2014 MLM  Removed _RecordSet appending for Query(RS) retrieval, Handled internally.
						'##If IsObject(ddGetItem(arrKeyNames(intArrIndex)))Then
						 'Check the supplied key value is object			
						If  IsObject(ddGetItem(arrKeyNames(intArrIndex)))Then			
							Set arrDDKeys_DataValues(intArrIndex)=ddGetItem(arrKeyNames(intArrIndex))
						'Verify the supplied key is a Query statement by appending '_RecordSet' to it and verify the existance in DD
						ElseIf g_dDictionary.Exists(ddGetItem(arrKeyNames(intArrIndex))&"_RecordSet") Then   								
							'Assign the object to defined array
							Set arrDDKeys_DataValues(intArrIndex)=ddGetItem(ddGetItem(arrKeyNames(intArrIndex))&"_RecordSet")						
						Else
							'Assign the keyName;KeyValue to defined array
							arrDDKeys_DataValues(intArrIndex)=arrKeyNames(intArrIndex)&";"&ddGetItem(arrKeyNames(intArrIndex))
						End If
					' END OF CODE MODIFICATION
					'########################################
				Next		
				'Verify object type of the values present in arrDDKeys_DataValues
				'If all the key value object type not same fail
				strDataType=ddVerifyDataType (arrDDKeys_DataValues)' Returns the datatype of the key values(RS, Txt,...)                                				
				'Create a New DataWriter Factory object
				Set dataWriterFactory = New ddDataWriterFactory 'which creates new writer object depends on the SavePath extension(Defined in DataWriter)
				Set dataWriterObj = dataWriterFactory.CreateNewDataWriterObject(DataWriter)	
				'Call respective writer type depends on DataType: Which will copy all the data to supplied keys to specific writer
				Execute "dataWriterObj."&strDataType&"WriteToFile arrDDKeys_DataValues , strSavePath"
				'Report done if the data writing is completed
				reporterReportEvent "Done",strReportStepLabel,"All the data exists in the supplied DDKeys values are copied to file: '"&strSavePath&"'"
			Else
				'If keys are invalid, keys may contains empty values ....
				reporterReportEvent "Failed",strReportStepLabel,"The supplied DDKeys are empty . Please supply some key values in DDKeys and re-run"		
			End If
		Else
			'If keys are invalid, keys may contain object/empty ....
			reporterReportEvent "Failed",strReportStepLabel,"The supplied DDKeys are not valid . Please supply valid DDKeys and re-run"		
		End If
End Sub


'###########################################################################
' NAME : ddVerifyDataDriver
' PURPOSE: Verify the specified database driver installed
'PARAMETERS:
'                  INPUT:
'                           dataSourceType:String that conatins database driver name to be verified
'				  OUTPUT: Boolean value
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Manjunath L M	 27/12/2012					NEW
'  C. McMillan	    15/06/2013					Line 34 changed to compare 2 lcase values
',Manjunath L M 	22/08/2013					Line 35 removed the spaces in between the words
'Nikhil Ambekar		26/12/2019					Commented code including condition which verifies ODBCINST.INI file existence in the system
'###########################################################################
Private Function ddVerifyDataDriver(dataSourceType)	

	'####################### CODE MODIFICATION #####################################
	'Nikhil Ambekar		26/12/2019				Commented code including condition that verifies ODBCINST.INI file
	'Create shell object to get OS root directory
	'Set objShell=CreateObject("WScript.Shell")
	'Get the OS root directory
	'WinDirPath=objShell.ExpandEnvironmentStrings("%WinDir%")
	'Create FileSystemObject to get database drivers content from "ODBCINST.INI"
	'Set objFso= CreateObject("Scripting.FileSystemObject")

	'Verify the "ODBCINST.INI" file existance
	'If objFso.FileExists(WinDirPath&"\ODBCINST.INI")  Then
			'Report the status as done
			'reporterReportEvent "Done","Data Source Library------>ddVerifyDataDriver","Installed ODBC  file exists  in "&WinDirPath
			'Open the "ODBCINST.INI" file in read only mode
			'Set objFileopen=objFso.OpenTextFile(WinDirPath&"\ODBCINST.INI",1,True)
			'Initailize boolean value to false[This is no more valid]
			'blnODBCFound=True
			'Itterate until end of the stream in "ODBCINST.INI"
			'Do until objFileopen.AtEndOfStream
					'Read the file content line by line
					'strText=Lcase(Trim(objFileopen.ReadLine))
					'Verify specified database driver name is installed
				'	If Instr(1,Replace(strText," ",""),Lcase(dataSourceType))>0 And Instr(1,strText,"installed")>0 Then
						    'Initailize boolean value to true
							'blnODBCFound=True							
							'Exit Do
					'End if
			'Loop
			'Return the blnODBCFound to the function
			'ddVerifyDatabaseDriverInstalled=blnODBCFound
			'Report the status depend on boolean value in blnODBCFound
			'If blnODBCFound Then
					'Report the status as done
					'reporterReportEvent "Done","Data Source Library------>ddVerifyDataDriver","Verified Database Driver (ODBC) of type "& dataSourceType &" installed in the machine "&Environment("LocalHostName")
				'Else
					'Report the status as failed
					'reporterReportEvent "Failed ","Data Source Library------>ddVerifyDataDriver","Databse Driver (ODBC) of type "& dataSourceType &" not installed in the machine "&Environment("LocalHostName") &".  Reboot, Install Required Driver, or use a different machine."
			'End If
		'Else
			'Report the status as failed
			'reporterReportEvent "Failed","Data Source Library------>ddVerifyDataDriver","Installed Datbase Driver (ODBC) file not exists  in "& WinDirPath &".  Please contact Automation Team for assistance."
	'End If
	'########################### END MODIFICATION #################################
End Function


'###############################################################################################################################
' NAME:  ddVerifyDataType
' PURPOSE: Determine the type of values and return's a string representation of that object back to calling function
' PARAMETERS:
'		INPUT:
'				arrDataValues: Array that contains the data values 				
'	   OUTPUT :
'			None
'HISTORY
'NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------------------------------------------------------
'Manjunath L M		    05/02/2014                  New
'###############################################################################################################################
Private Function ddVerifyDataType(arrDataValues)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################		
			Dim strTypeName		'String that contains TypeName of the array element(value)											
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "DataWriter Library -->ddSaveItemToFile--> ddVerifyDataType"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'Iterate through all the elements in the array and check for type
		For dataTypeIndex=0 To Ubound(arrDataValues)		
			'If first element assign typename of the value to strTypeName variable
			If dataTypeIndex=0 Then
				strTypeName=TypeName(arrDataValues(dataTypeIndex))
			'Check the first element type and next element type are same
			ElseIf StrComp(strTypeName,TypeName(arrDataValues(dataTypeIndex)),1) <> 0 Then
				'If not same then fail
				reporterReportEvent "Failed",strReportStepLabel,"The values supplied writing to a file are not of similar type. Please pass the similar type values and re-run"		
			End If
		Next	
		'Return the dataWriter type to calling component
		Select Case Lcase(strTypeName)
			'TypeName is RecordSet then return RS
			Case "recordset" ddVerifyDataType="RS"
			'TypeName is string then return TXt
			Case "string" ddVerifyDataType="Txt"
			Case Else
				'Report fail no particular writer
				reporterReportEvent "Failed",strReportStepLabel,"The TYPE obtained for the supplied values is: "&strTypeName&". Specific writer not defined for this type."																							
		End Select
End Function


'############################################################################################################################################################
' NAME:  getCustomObjectHierarchy
' PURPOSE:  To construct the custom object hierarchy (Browser ().Window().Page().Object()) for the  supplied objects in ScreenName_ObjectName.
' PARAMETERS:
' INPUT  :
'			ScreenName_ObjectName: String that contains the object name or object names that refers to the value in the data dictionary or refers to the object properties from object repository.

'		
'			NOTE:
'				1.If multiple objects are provided as input then ';' should be used as delimeter.
'				2. All the Object names should be included in the object repository.
'					Example: obj_Browser();obj_Page();obj_Alert()
' OUTPUT : None
'HISTORY
'NAME:				          DATE:		PURPOSE
'-----------------------------------------------------------------------------------------------------
'Surendra				05/25/2017		New

'########################################################################################################################################################

Private Function getCustomObjectHierarchy(ScreenName_ObjectName)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		Dim strwebClass 	         'String that  contains Class Name of the object
		'##Dim strPropertyName1   'String that  contains Property Name1 of the object
		'##Dim strPropertyName2   'String that  contains Property Name2 of the object
		Dim arrPropertyName         'Array that contains all the property names
		'##Dim strPropertyValue1   'String that  contains Property Value1 corresponding to the PropertyName1 of the object 		
		'##Dim strPropertyValue2	'String that  contains Property Value2 corresponding to the PropertyName2 of the object
													' by default value it is string so prefixed with str		
		Dim arrPropertyValue		 'Array that contains all the property values
		Dim strPropertyDescription 'String that contains the property name and property value description
		strReportStepLabel = "CustomObject Library --->getCustomObjectHierarchy"
		'##'2) Initialize Error Handling
		'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'##'Clear Error
		'##Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		ArrScreenName_ObjectName=split(ScreenName_ObjectName,";")'spliting ScreenName_ObjectName with ; delimiter to get individual objects
		strWebGetCustomObjectHierarchy=""
		For si = 0 To ubound(ArrScreenName_ObjectName)'Iterate through all available ScreenName_ObjectNames with ; as a delimiter
		
	   '3)Call ddGetObjectProperties to get the properties for the object supplied in ScreenName_ObjectName
		ddGetObjectProperties ArrScreenName_ObjectName(si)
		'Get the propertynames and propertyvalues in declared variable .
		strwebClass=g_strObjectType
		'##strPropertyName1=g_strPropertyName1
		'##strPropertyName2=g_strPropertyName2
		arrPropertyName=g_arrPropertyNames
		'##strPropertyValue1=g_strPropertyValue1		
		'##strPropertyValue2=g_strPropertyValue2
		arrPropertyValue=g_arrPropertyValues  	
		'4) Check at least one property and it's value is specified for the supplied ScreenName_ObjectName
	    If IsArray(arrPropertyName) And IsArray(arrPropertyValue) Then	
			'5)Create the object hierarchy for the obtained object
			'##strPropertyDescription=strPropertyName1&":="&strPropertyValue1
			strPropertyDescription=arrPropertyName(0)&":="&arrPropertyValue(0)
			'Iterate through all the property names and property values to create the object description
			For indexPropertyName=1 To Ubound(arrPropertyName)
				'Create the property description by using the supplied property names and values
				'##strPropertyDescription=strPropertyDescription&Chr(34)&","&Chr(34)&strPropertyName2&":="&strPropertyValue2
				strPropertyDescription=strPropertyDescription&Chr(34)&","&Chr(34)&arrPropertyName(indexPropertyName)&":="&arrPropertyValue(indexPropertyName)
			Next
'			Wait 3	
			'Constructing description by using the supplied property names and values, stores into strWebGetCustomObjectHierarchy
			strWebGetCustomObjectHierarchy=strWebGetCustomObjectHierarchy&"."&strwebClass&Chr(40)&Chr(34)&strPropertyDescription&Chr(34)&Chr(41)

		
		

		Else
			'##'Clear the error.
			'##Err.Clear
			'##'Ends the Error Handling Scope.
			'##On Error GoTo 0
			'Report the status as Failed if not a single property and value specified in the database(repository)
			reporterReportEvent	"Failed", strReportStepLabel, "Please specify at least one property and it's value in database(repository) for the supplied  element: "&ArrScreenName_ObjectName(si)
		End If	
		
Next	


			On Error Resume Next
			'Clear Error
			Err.Clear
			strWebGetCustomObjectHierarchy=mid(strWebGetCustomObjectHierarchy,2)
			
			'Create the object hierarchy
			Execute "Set getCustomObjectHierarchy="&strWebGetCustomObjectHierarchy
'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'5)  Verify for the error occurance
			If errNumber =0 Then
				'Report as done as there was no error occured  while creating the object hierarchy
				reporterReportEvent "Done",strReportStepLabel, "Object hierarchy created successfully for the supplied object : "&ScreenName_ObjectName
			 Else
				'Report as Failed as there was error occured  while creating the object hierarchy
				reporterReportEvent "Failed",strReportStepLabel,"Failed to create Object hierarchy for the supplied object : "&ScreenName_ObjectName&Chr(13)&" due to the reason "& errDescription & " .Please contact Automation Team ."
			End If

End Function


'#########################################################################################################################################
' NAME:  getDecryptedvalue
' PURPOSE:  To decrypted the given Encrypted value.
' PARAMETERS:
'		INPUT			
'			ddEncryptPassword : String or Dictionary object( Key) that contains encrypted value to enter in the webedit field.
'			ddDecryptedPassword: Dictionary object( Key) that store decrypted value
'		OUTPUT : Decrypted password into Dictionary object( Key)'ddDecryptedPassword'
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Venkateswarlu 									10/23/2017				   	   NEW
'Udyakumar Reddy								04/05/2022						This modification is implemented to create credential popup 
'																				with hta format and get decrypted of encrypted value
'##############################################################################################################################################
Private Function getDecryptedvalue(ddEncryptPassword,ddDecryptedPassword)
	strReportStepLabel = "Web Library ---->getDecryptedvalue"
	strGetPwdHtml=""
	'################################################################################################################
	'CODE MODIFICATION
	'Udayakumar Reddy  	03/18/2022
	'This modification is implemented to create credential popup with hta format and get decrypted of encrypted value
	'Create FSO object
	Set objFSO=CreateObject("Scripting.FileSystemObject")
	Set objWShell = createObject("WScript.Shell")
	'END CODE MODIFICATION
	'################################################################################################################
	'Verify if ddDecryptedPassword is empty
	If Trim(ddDecryptedPassword)<>"" Then
		'To get  data for the specified  key and store  into variable
		strEncryptPassword=ddGetItem(Trim(ddEncryptPassword))
		'################################################################################################################
		'CODE MODIFICATION
		'Udayakumar Reddy  	03/25/2022
		'This modification is implemented to verify and create UFT folder at "%APPDATA%" path
		appData = objWShell.expandEnvironmentStrings("%APPDATA%")
		appDataUFTPath = appData&"\UFT"
		fldexistSt=objFso.FolderExists(appDataUFTPath)
		If objFso.FolderExists(appDataUFTPath) Then
			htaFile=appDataUFTPath&"\UserCredentialDialog.hta"
			'Report as done when UFT folder created successfully at &appData
			reporterReportEvent "Done",strReportStepLabel,"UFT folder already exist at "&appData
		Else
			objFSO.CreateFolder appDataUFTPath
			htaFile=appDataUFTPath&"\UserCredentialDialog.hta"
			'Report as done when UFT folder created successfully at &appData
			reporterReportEvent "Done",strReportStepLabel,"UFT folder created successfully at "&appData
		End If
		'END CODE MODIFICATION
		'################################################################################################################
		
		'################################################################################################################
		'CODE MODIFICATION
		'Udayakumar Reddy  	03/18/2022
		'This modification is implemented to verify credential popup hta file and delete if already exist and create new hta file
		If objFSO.FileExists(htaFile) Then
			Set objFile_hta = objFSO.GetFile(htaFile)
			objFile_hta.Delete
			'Report as done when Deleted exiting hta file successfully
			reporterReportEvent "Done",strReportStepLabel,"Deleted exiting hta file successfully."
		End If
		'Text of hta popup file
		htaTxt="<head><title>Encrypt value Details</title>"&"<HTA:APPLICATION  MAXIMIZEBUTTON="&chr(34)&"no"&chr(34)&"></head><script language="&chr(34)&"VBScript"&chr(34)&">Window.ResizeTo "&"250"&","&" 100"&"</script><body><input type="&chr(34)&"password"&chr(34)&" name="&chr(34)&"password"&chr(34)&" SIZE= "&chr(39)&"40"&chr(39)&"><br></body>"
		'Create hta file
		Set objFile = objFSO.CreateTextFile(htaFile,True)
		'Write to a hta file
		objFile.Write htaTxt & vbCrLf
		'Close the file
		objFile.Close
		'Form command line
		CmdCommand = "%WINDIR%\system32\mshta.exe "&Chr(34)& htaFile &Chr(34)&" "&"&&exit"
		'Create shell object
		Set objShell = CreateObject("WScript.Shell")
		'Run the command
		objShell.Run CmdCommand, 0, false
		'END CODE MODIFICATION
		'################################################################################################################
		'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		Err.Clear
		'################################################################################################################
		'CODE MODIFICATION
		'Udayakumar Reddy  	03/18/2022
		'Create Password Encrypt object and set to variable
		Set objPassword = Window("nativeclass:=HTML Application Host Window Class","regexpwndtitle:=Encrypt value Details","text:=Encrypt value Details").Page("title:=Encrypt value Details").WebEdit("html tag:=INPUT","name:=password","type:=password")
		'END CODE MODIFICATION
		'################################################################################################################
			'Verify if  Password Encrypt object exist
			If objPassword.Exist(10) Then
				'Set Encrypted value into pwd field.
				objPassword.SetSecure strEncryptPassword
			Else
				'Verify if the popup: 'Encrypt value Details' is unable to open
				reporterReportEvent "Failed",strReportStepLabel,"The popup:'Encrypt value Details' is not Opened Successfully"
			Exit Function	
			End If
				'Get the Decrypted value based on supplied input parameter(encrypted)
				strGetPwdHtml = objPassword.GetROProperty("value")
				'Add the Decrypted Password into data dictionary.
				ddAddItem ddDecryptedPassword,strGetPwdHtml
				'################################################################################################################
				'CODE MODIFICATION
				'Udayakumar Reddy  	03/18/2022
				'Close credential dialog and delete the hta file
				Window("nativeclass:=HTML Application Host Window Class","regexpwndtitle:=Encrypt value Details","text:=Encrypt value Details").Close
				'END CODE MODIFICATION
				'################################################################################################################
				errNumber = Err.Number
				errDescription = Err.Description
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
			'Verify if the given encrypted value is decrypted
			If errNumber = 0 Then
				'Report as passed when Encrypted Password value is Decrypted successfully
				reporterReportEvent "Passed",strReportStepLabel,"For given Encrypted Password value '" &strEncryptPassword& "' is Decrypted successfully."
			Else
				'Report as failed when Failed to Decrypt Password Value
				Err.Clear
				On Error GoTo 0
				reporterReportEvent "Failed",strReportStepLabel,"Failed to Decrypt Password Value Due to the following error '" &errDescription& "'"
			End If
			
	Else
	'Report as failed when 'ddDecryptedPassword' provided is empty
	reporterReportEvent "Failed",strReportStepLabel, "ddDecryptedPassword is a mandatory parameter so please provide valid 'ddDecryptedPassword'"
	End If		
	'################################################################################################################
	'CODE MODIFICATION
	'Udayakumar Reddy  	03/18/2022
	'Release the objects
	Set objFile_hta = Nothing
	Set objShell= Nothing
	Set objFSO = Nothing
	'END CODE MODIFICATION
	'################################################################################################################
End Function


'############################################################################################################################################################
' NAME:  getObjectWithHierarchy
' PURPOSE: Gets the properties and values of an object stored in object repository (MS Access DB) and forms the object hierarchy.
' PARAMETERS:
'        INPUT
'            ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'        OUTPUT :
'            getObjectWithHierarchy: Object that contains the object hierarchy (ex1: TeWindow ().TeScreen ().TeField ()).
'                                                                              (ex2: Browser ().Window (). Page () )
'                                                                              (ex3: Window ().Dialog (). WinEdit() )
'HISTORY
'NAME:                          DATE:        PURPOSE
'-----------------------------------------------------------------------------------------------------
'Vani S                06/12/2018        New
'Vani S				   02/19/2019		 Modified the code to support cross browser testing
'###########################################################################################################################################################

Private Function getObjectWithHierarchy(ScreenName_ObjectName)
'PREREQUISITE CODE
'1) Declarations
'##############################################################
Dim arrObjects()   '[Array] Contains the strings of the objects with class name and all the property names and property values
Dim chkParentObj  '[Integer] Contains the existence of Parent object for the respective ScreenName_ObjectName
Dim indexObj  '[Integer] Contains the index of arrObjects()
Dim indexObjHierarchy '[Integer] Contains the the index of objects hierarchy
'Initialize chkParentObj to 1 which indicates the existence of Parent Object
chkParentObj = 1
'Initialize indexObj to 0
indexObj = 0
strReportStepLabel = "CustomObject Library --->GetObjectWithHierarchy"

'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################

'Loop through the Objects to get the property names and their respective values to form the Object hierarchy string until the Parent Object is Null
Do
'Declare a dynamic-array for arrObjects variable and allocate storage space with indexObj .
ReDim Preserve arrObjects(indexObj)
'Verify the input prameter exists in global dictionary
If Not g_dDictionary.Exists(ScreenName_ObjectName) Then
'Create the sqlQueryStatement for the supplied ScreenName_ObjectName
'sqlQueryStmnt="Select * From "&ddGetItem("Object_Repository_dbTableName")&" Where ScreenName_ObjectName='"&ScreenName_ObjectName&"'"

			'#############################################################################
			'CODE MODIFICATION
			'Vani S 	02/19/2019 		'Updated the query with global variable g_strObjRepositoryTableName(Table name in the query) to support cross browser testing.
			sqlQueryStmnt="Select * From "&g_strObjRepositoryTableName&" Where ScreenName_ObjectName='"&ScreenName_ObjectName&"'"
		   'END CODE MODIFICATION
		   '#################################

'Verify the object record set for the sqlQueryStmnt
If Not g_dDictionary.Exists(sqlQueryStmnt&"_RecordSet") Then
'Call ddQueryDataSource to Query database and return the dataset to the user
ddQueryDataSource "Object_Repository",sqlQueryStmnt
End If
'Verify whether the record set is obtianed for supplied sqlQueryStmnt
If g_dDictionary.Exists(sqlQueryStmnt&"_RecordSet") Then
'Set objRecordSet=ddGetItem (sqlQueryStmnt)
Set objRecordSet=ddGetItem (sqlQueryStmnt&"_RecordSet")
'Get the object properties for the specified  input parameter "ScreenName_ObjectName"
If Not objRecordSet.EOF Then
'Get the Object's Class name from the Column ObjectType in Object repository
ObjClass = objRecordSet("ObjectType").Value
'Get the Object's Parent Object from the Column ParentObject in Object repository
ObjParent = objRecordSet("ParentObject").value
'Intialize the Properties description to empty
PropDesc = ""
'Loop through the coulmns to get the all the property names and their values from column index 2
For indexCol = 2 To objRecordSet.Fields.Count-2 Step 2
PropName = objRecordSet.Fields.Item(indexCol)
PropVal = objRecordSet.Fields.Item(indexCol+1)
'Check for the empty/null values in PropName and PropVal variables
If PropName <> "" and PropVal <> "" Then
PropDesc = PropDesc&Chr(34)&PropName&":="&PropVal&Chr(34)&","
Else
'Exit from the loop if any of the PropName and PropVal are null/empty
Exit For
End If
Next
PropDesc = Trim(Left(PropDesc,len(PropDesc)-1))
'Store the object string in arrObjects
arrObjects(indexObj) = ObjClass&Chr(40)&PropDesc&Chr(41)
'Increase the indexObj by 1
indexObj=indexObj+1
Else
'Report the status as Failed, notifying the user as no records found in object repository for the specified input parameter  "ScreenName_ObjectName"
reporterReportEvent "Failed",strReportStepLabel,"There are no records found in object repository database for : "&ScreenName_ObjectName&" to get the object properties"
End If
'Assign the value of ObjParent to ScreenName_ObjectName
ScreenName_ObjectName = ObjParent
'Check ScreenName_ObjectName for Null value
If IsNull(ScreenName_ObjectName) Then
'Assign 0 to chkParentObj
chkParentObj = 0
End If
Else
'Report the status as Failed, notifying the user as no object properties retrieved for the specified input parameter  "ScreenName_ObjectName"
reporterReportEvent "Failed",strReportStepLabel,"Unable to get the object properties from object repository database for : "&ScreenName_ObjectName
End If
End If
'End the loop if chkParentObj is 0
Loop Until chkParentObj = 0
'Initialize ObjHierarchy to Empty
ObjHierarchy = ""
'Loop through the arrObjects to form the object string with complete hierarchy by concatinating all the individual objects
For indexObjHierarchy= ubound(arrObjects) to 0 step -1
'msgbox Trim(Objstr(j))
ObjHierarchy =ObjHierarchy&Trim(arrObjects(indexObjHierarchy))&"."
Next
'Form the object with complete object hierarchy and return the object
Execute "Set getObjectWithHierarchy = "&Left(ObjHierarchy,len(ObjHierarchy)-1)
End Function


'##############################################################################################################################
' NAME:  getTextFromScreen
' PURPOSE: To get the entire text or specified part of text from a screen.
'		INPUT :
' PARAMETERS:
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary
'			ddReferencevalue : Data Dictionary Key reference that contains the entire text/specified part of text in the Data dictionary object.
'			ddTopRow : The row number where the text starts in the screen.
'			ddLeftCol : The column number where the text starts in the screen.
'			ddBottomRow : The row number where the text ends in the screen.
'			ddRightCol : The col number where the text ends in the screen.
'			ddReferencevalue: Dictionary object( Key) that store Reference value
'		OUTPUT : Reference value into Dictionary object( Key)'ddReferencevalue'
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Venkateswarlu 													   	   NEW
'###############################################################################################################################

Function getTextFromScreen(ScreenName_ObjectName,ddReferencevalue,ddTopRow,ddLeftCol,ddBottomRow,ddRightCol)

'PREREQUISITE CODE
'1) Declarations
'##############################################################
Dim strScreenText
Dim ScreenTObj 'Object that contains created hierarchy object(ex:TeWindow().TeScreen())
strReportStepLabel = "Mainframe Library --->getTextFromScreen"
'    ddTereferenceString
'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
'Get the reference value from key for the parameter 'ddReferencevalue' and assign to the variable ‘strReferencevalue’
strReferencevalue=ddGetItem(ddReferencevalue)
'Get the reference value from key for the parameter 'ddReferencevalue' and assign to the variable ‘strReferencevalue’
ddReferencevalue=ddGetItem(ddReferencevalue)
'Get the reference value from data dictionary for the parameter 'ddTopRow'
intTopRow=ddGetItem(ddTopRow)
'Get the reference value from data dictionary for the parameter 'ddLeftCol'
intLeftCol=ddGetItem(ddLeftCol)
'Get the reference value from data dictionary for the parameter 'ddBottomRow'
intBottomRow=ddGetItem(ddBottomRow)
'Get the reference value from data dictionary for the parameter 'ddRightCol'
intRightCol=ddGetItem(ddRightCol)
'Verify if ScreenName_ObjectName and ddReferencevalue is empty/null
If Trim(ScreenName_ObjectName)<>"" and Trim(strReferencevalue) <> "" Then
'2) Call getObjectWithHierarchy component to get the object hierarchy for the supplied TeScreen
'Get the object based on input parameter : ScreenName_ObjectName
Set objScreen = getObjectWithHierarchy(ScreenName_ObjectName)
'Verify for 'objScreen' existence
If objScreen.Exist Then
'Verify If 'intTopRow' and 'intLeftCol' and 'intBottomRow' and  'intRightCol' is null/ empty
If Trim(ddTopRow) = "" and Trim(ddLeftCol) = "" and Trim(ddBottomRow) = "" and Trim(ddRightCol)="" Then
'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
On Error Resume Next
'Clear Error
Err.Clear
'Get all the text from a specific screen and assign to the variable 'strScreenText'
strScreenText = objScreen.GetText()
'Store the generated run time error number and error description in variables.
errNumber = Err.Number
errDescription = Err.Description
'Clear the error.
Err.Clear
'Ends the Error Handling Scope.
On Error GoTo 0
'Verify If any error occurred and length of ‘strScreenText’ is equal to zero
If Len(Trim(strScreenText)) = 0 and errNumber <> 0 Then
'Report as failed if 'strScreenText' is empty
reporterReportEvent "Failed",strReportStepLabel,"Unable to get the text from screen error description is :'" &errDescription& "'"
Else
'Add the retrieved value to the dictionary
ddAddItem strReferencevalue,strScreenText
'Report the status of the component as passed with retrieved value
'                    reporterReportEvent "Passed", strReportStepLabel, "Retrieved the text from the Screen Successfully,Retrieved text for the object "& ScreenName_ObjectName & " is : "&strDefaultValue
reporterReportEvent "Passed", strReportStepLabel, "Retrieved the text from the Screen Successfully,Retrieved text from the screen is: "&strScreenText
End If
	'Verify if 'intTopRow' and 'intLeftCol' and 'intBottomRow' and 'intRightCol' is not empty/Null
ElseIf Trim(intTopRow)<>"" and Trim(intLeftCol)<>"" and Trim(intBottomRow)<>"" and trim(intRightCol)<>"" Then
		'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
					On Error Resume Next
					'convert intTopRow string  into integer
					intTopRow = Cint(intTopRow)
					'convert intTopRow string  into integer
					intLeftCol = Cint(intLeftCol)
					'convert intTopRow string  into integer
					intBottomRow = Cint(intBottomRow)
					'convert intTopRow string  into integer
					intRightCol = Cint(intRightCol)
					'Store the generated run time error number and error description in variables.
					errNumber = Err.Number
					errDescription = Err.Description
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0	
					'Verify the error occurance and for -ve values	
					If errNumber <>0 Then
					'Report as failed if either 'intTopRow' or 'intLeftCol' or 'intBottomRow' or 'intRightCol' is not numeric
					reporterReportEvent "Failed",strReportStepLabel,"The supplied values ddTopRow:'"&intTopRow&"' or ddLeftCol:'"&intLeftCol&"' or ddBottomRow:'"&intBottomRow&"'or ddRightCol:'"&intRightCol&"' should be positive integer values. "&Chr(13)&" Please provide valid numeric values"
					End If
					'Verify If any one of the parameter is -ve value
					If intTopRow<0 or intLeftCol<0 or intBottomRow<0 or intRightCol<0 Then
					'Report as failed if either 'intTopRow' or 'intLeftCol' or 'intBottomRow' or 'intRightCol' is not numeric
					reporterReportEvent "Failed",strReportStepLabel,"The supplied values ddTopRow:'"&intTopRow&"' or ddLeftCol:'"&intLeftCol&"' or ddBottomRow:'"&intBottomRow&"'or ddRightCol:'"&intRightCol&"' should be positive integer values and not less than zero. "&Chr(13)&" Please provide valid numeric values"
					End If	
					On Error Resume Next
					
'To retrieve the text from the specified screen area/rectangle and assign to the variable 'strScreenText'
strScreenText = objScreen.GetText(intTopRow,intLeftCol,intBottomRow,intRightCol)
'Store the generated run time error number and error description in variables.
errNumber = Err.Number
errDescription = Err.Description
'Clear the error.
Err.Clear
'Ends the Error Handling Scope.
On Error GoTo 0
'Verify If any error occurred and length of ‘strScreenText’ is equal to zero
If Len(Trim(strScreenText)) = 0 and errNumber <> 0 Then
'Report as failed if 'strScreenText' is empty
reporterReportEvent "Failed",strReportStepLabel,"Unable to get the text from the screen which is within the  coordinates ddTopRow:'"&intTopRow&"', ddLeftCol:'"&intLeftCol&"' and ddBottomRow:'"&intBottomRow&"', ddRightCol:'"&intRightCol&"', Error is :'" &errDescription& "'"
Else
'Add the retrieved value to the dictionary
ddAddItem strReferencevalue,strScreenText
'Report the status of the component as passed with retrieved value
reporterReportEvent "Passed", strReportStepLabel, "Successfully retrieve the text from the screen which is within the coordinates ddTopRow:'"&intTopRow&"', ddLeftCol:'"&intLeftCol&"' and ddBottomRow:'"&intBottomRow&"', ddRightCol:'"&intRightCol&"',Retrieved text from the screen is: "&strScreenText
		End If
End if
'            Else
'                'Report as failed if Null/Empty values are provided for any of the coordinates
'                reporterReportEvent "Failed",strReportStepLabel,"Null/Empty values are provided for any of the coordinates ddTopRow:'"&intTopRow&"' or ddLeftCol:'"&intLeftCol&"' or ddBottomRow:'"&intBottomRow&"' or ddRightCol:'"&intRightCol&"' ."&Chr(13)&" Please provide the values for all the 4 co-ordinates."
'            End if
Else
'Report as failed if screen does not exist
			 reporterReportEvent "Failed",strReportStepLabel, "The given object "& ScreenName_ObjectName&" does not exists.Please specify valid properties and values in the object repository"
End If
Else
'Report as failed if 'ddReferencevalue' or 'ScreenName_ObjectName' provided is empty
reporterReportEvent "Failed",strReportStepLabel,"ddReferencevalue and ScreenName_ObjectName are mandatory parameters. Please provide valid values for 'ddReferencevalue' and 'ScreenName_ObjectName'"
End If
End Function


'#########################################################################################
' NAME:  ibmdb2
' PURPOSE: The ibmdb2 class will provide the data library methods for interacting with Db2 databases.
'HISTORY
'	NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'venkateswarlu 						11/02/2017		          		Updated
'#########################################################################################
Class ibmdb2
		' PREREQUISITE CODE
		' Declarations      	
		Dim Db2objConnection ' Object that contains the Db2 object instance
		Dim errNumber ' Contains Error Number
		Dim errDescription  ' Contains Error description		
		Dim strReportStepLabel   ' String that contains the step label for the reports (StepLabel consist of LibraryName---->ComponentName)		
		Dim strDb2Provider   'string that contains the provider for db2 database
		'Class_Initialize Is fired whenever the class object is instantiates
		Private Sub Class_Initialize()
		End Sub
		'Class_Terminate when the object goes out of scope or object is set to nothing
		Private Sub Class_Terminate()
		End Sub
		' NAME:  ConnectToDataSource
		' PURPOSE:  To establish new connection to Db2 database
		' PARAMETERS:
		'       INPUT:
		'			DbName: String that contains the Db Name used to identify the db in the Dictionary.
					'*****************
					'Inputs by global data		
		'					DbName "_Username"	: DD Reference that contains the Username for the Db2 login
		'					DbName "_Password	: DD Reference that contains the Password for the Db2 login
		'					DbName "_DSN	: DD Reference that contains the Db2 database DSN
					'*****************
		'       OUTPUT: None
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Manjunath L M  			  04/03/2014          		NEW
		'#########################################################################################
		Sub ConnectToDataSource(DbName)		
			' PREREQUISITE CODE
			' 1) Declarations		
			Dim strConnectionString 'String that contains the Connection String [Provider, DSN, Username, Password]                      		
			strReportStepLabel="IBMDb2 Library--->ConnectToDataSource"			
			'Assign the provider for IBMDb2 to variable strDb2Provider
			strDb2Provider="{IBM DB2 ODBC DRIVER}"	
			' END PREREQUISITE CODE
			' **************************
			' BEGIN FUNCTION IMPLEMENTATION
			' ###############################################################
			' 2) Check for the presence DB2 connection credentials in datadictionary
			' 2.1) Test in the data dictionary for the existance of the Db2 database Username
			blnDictionaryUsername = g_dDictionary.Exists(DbName &"_Username")
			' 2.2) Test in the data dictionary for the existance of the Db2 database Password
			blnDictionaryPassword = g_dDictionary.Exists(DbName &"_Password")
			' 2.3) Test in the data dictionary for the existance of the Db2 database DSN
			blnDictionaryDSN = g_dDictionary.Exists(DbName &"_DSN")  					
			' 3) Check any of the connection credentials parameter is not empty
			If blnDictionaryUsername  And blnDictionaryPassword And blnDictionaryDSN Then
			'Get the Decrypt password and store into variable'dd_DB2DecryptedPassword'		
			getDecryptedvalue ddGetItem(DbName &"_Password"),"dd_DB2DecryptedPassword"					
				' 4) Create DB2 Connection String							                                     		
				strConnectionString="Driver="&strDb2Provider&";DBALIAS="&ddGetItem(DbName &"_DSN")&";Uid="&ddGetItem(DbName &"_Username")&";Pwd="&ddGetItem("dd_DB2DecryptedPassword")&";"
				' Initialize Error Handling
				On Error Resume Next
				' Clear Error
				Err.Clear	
				' 5) Create a database object instance
				Set Db2objConnection=CreateObject("ADODB.Connection")		
				' 6) Attempt to connect to DB2 database
				Db2objConnection.Open strConnectionString       	
				' 7) Verify the error occurrence, and if any suppress the errors
				errNumber=Err.Number
				errDescription=Err.Description
				On Error GoTo 0
				' 7.1) If no errors while opening the DB2 connection report done
				If errNumber=0 Then     				
					reporterReportEvent "Done", strReportStepLabel , "Connection to DB2 data base is done successfully for given connection "&DbName
				' 7.2) if error number is -2147467259, report failed stating that provider is not valid
				ElseIf errNumber="-2147467259" And Instr(1,errDescription,"Data source name")<>0 Then
					reporterReportEvent "Failed", strReportStepLabel , "Failed to make DB2 connection due to invalid data provider supplied. Please contact automation team"			
				' 7.3) if error number is -2147217805, report failed stating that connection string is not valid
				ElseIf errNumber="-2147217805" Then
					reporterReportEvent "Failed", strReportStepLabel , "The created ConnectionString(Provider_DSN_UN_PWD) to make DB2 connection does not follow the "&_
					"OLE DB specification. Please contact automation team"	
				' 7.4) if error number is -2147467259, report failed stating that authentication is not proper
				ElseIf errNumber="-2147467259" Then
					'Report Failed if the connection string does not contains the required authentication
					reporterReportEvent "Failed", strReportStepLabel  , "The DB2 data base needs proper authentication details like DSN, Username and Password "&_
					", Please specify the correct details required and re-run the script."
				' 7.5) Report fail for any other errors
				Else
					'Report the status as Failed and error description
					reporterReportEvent "Failed", strReportStepLabel ,"Failed to connect DB2 data base for given connection "&DbName& Chr(13) &" Reason: "& errDescription &_
					"Please contact automation team."
				End If      		
			Else		
				'3) Report the status as Failed if any of the connection credentials is empty
				reporterReportEvent "Failed", strReportStepLabel ,"Connection information[DbName_DSN, DbName_Username and/or DbName_Password] is not found in the Data Dictionary for the DbName: "&DbName&_
				". Please provide the required info and re-run the script."
			End If
		End Sub
		'#########################################################################################
		' NAME:  QueryDataSource
		' PURPOSE: Query "DB2" database and return dataset to the user
		' PARAMETERS:
		'		INPUT      :
		'				sqlQueryStatement : String that contains query statement to be executed on Db2 database
		'	   OUTPUT :
		'				QueryDataSource : Object that contains the recordset
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Manjunath L M  			  04/03/2014          		NEW
		'#########################################################################################
		Function QueryDataSource(sqlQueryStatement)
			' PREREQUISITE CODE
			' 1) Declarations
			' ##############################################################			
			strReportStepLabel="IBMDb2 Library--->QueryDataSource"
			' END PREREQUISITE CODE
			' **************************
			' BEGIN FUNCTION IMPLEMENTATION
			' ###############################################################			
			' 2) Initialize Error Handling
			On Error Resume Next
			' Clear Error
			Err.Clear
			' 3) Execute specified sql statement and return the dataset
			Set QueryDataSource=Db2objConnection.Execute(sqlQueryStatement)			
			' 4) Verify the error occurrence, and if any suppress the errors
			errNumber=Err.Number
			errDescription=Err.Description
			On Error GoTo 0
			 '4.1) If no errors while executing query in DB2 connection report done
			If errNumber=0 Then
				'Report as Done as there was no error occured  while performing query execution
				reporterReportEvent "Done" , strReportStepLabel , "The supplied query: "&sqlQueryStatement&" is executed and returned the Db2 dataset object successfully"                                       	
			Else
				' 4.2) Report the status as Failed and  error description
				reporterReportEvent "Failed", strReportStepLabel ,"Failed to execute the query: "&sqlQueryStatement&" in  Db2 data base due to Reason : "&Chr(13)&errDescription
			End If
		End Function
End Class


'###################################################################################################################################
' NAME:  launchApplication
' PURPOSE:  To Launch an application.
' PARAMETERS:
'		INPUT
'			ddAppName : Mandatory Parameter - String that contains the executable file to run or any command line arguments. Need not to include the application's .exe extension. Ex: "winword" or "winword.exe"
'			ddFileName : Optional Parameter - String that contains the name of the file. Ex:  Letter.docx
'			ddAppFolderPath : Optional Parameter - String that contains the folder path for the application.The default is the folder that contains the executable file.
'		OUTPUT : None
'HISTORY
'NAME:								DATE:							PURPOSE:
'Vani								07/04/2018						NEW
'Somika 							09/05/2019						Modified to launch the browser in maximize mode irrespective of browser type
'Somika 							09/13/2019						Modified to enable the UFT extension in chrome if it is disabled
'Udayakumar 						09/07/2020						Modified to launch the MS Edge Chromium browser and enable the UFT extension if it is disabled
'Udayakumar 						02/16/2020						'This modification is implemented to support MS Edge Chromium browser, since existing object properties not working for updated MS Edge Chromium browser version 88.0.705.68.
'Udayakumar 						03/15/2021						'This modification is implemented to support MS Edge Chromium browser, since existing object properties not working for updated MS Edge Chromium browser version 88.0.705.81.
'Udayakumar Reddy 				03/18/2021 						'This modification is implemented to accessing firefox browser by user profile, since existing code was not support to access the firefox browser in multiple machines.
'Jayarami Reddy 					08/03/2022  						This modification is implemented to close all Browsers excpet 'quality center' on MS Edge browser
'Jayarami Reddy					10/03/2022						Modified code to launch MS Edge browser only once if extension is enabled
'Sushmashree						12/01/2022						As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'Jayaram Reddy 					08/16/2023						Removed hardcoded UFT installation path & now grabbing it from system environment variable and then forming path for firefox extension file. 
'###################################################################################################################################
Function launchApplication(ddAppName,ddFileName,ddAppFolderPath)
	'PREREQUISITE CODE
'Declarations
'##############################################################
Dim strFile
	strReportStepLabel = "Master Library ---> launchApplication"
	'END PREREQUISITE CODE
'**************************	
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
'Get input parameter ddAppName from data dictionary and assign it to strApp
strApp = ddGetItem(Trim(ddAppName))
'Get input parameter ddFileName from data dictionary and assign it to strFile
	strFile = ddGetItem(Trim(ddFileName))	
	'Get input parameter ddAppFolderPath from data dictionary and assign it to strFile
	strFolderPath = ddGetItem(Trim(ddAppFolderPath))
	'Verify for the parameter ddAppName for Null/Empty
	If strApp <> "" Then			
		'## Initialize Error Handling	
		'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error			
		On Error Resume Next
		'Clear the error.
		Err.Clear
		'#############################################################################
		'CODE MODIFICATION
		'Somika Jain 	09/13/2019 added the below code since existing code was not able to enable UFT extention in Chrome browser
						'If user wants to launch application in chrome then this method has been enhanced in such a way that it will first open chrome
						'with default page, check the extension, enables it if the extension is disabled and then relaunch the chrome brwser with given application URL
		'========Plugin POC code merged==================
		If strApp="chrome.exe" Then
			'Launch google chrome with default page
			Systemutil.Run "chrome.exe","www.google.com","","",3
			if Window("regexpwndtitle:= Google Chrome", "is child window:=0","is owned window:=0").Exist(35) then
				Window("regexpwndtitle:= Google Chrome", "is child window:=0","is owned window:=0").Activate
				Set WshShell = CreateObject("WScript.Shell")
					'wait 3
					'Press F6 to locate the address bar
					WshShell.SendKeys "{F6}"
					wait 3
					'Pass the chrome extension URL
					WshShell.SendKeys "chrome://extensions"
					WshShell.SendKeys "{ENTER}"
				if Window("hwnd:=.*","regexpwndtitle:= Google Chrome","is owned window:=0","is child window:=0","text:=Extensions - Google Chrome").Exist(20) then
					'Search for UFT extesion on chrome extension page
					' CODE MODIFICATION
					'Udayakumar Reddy	09/07/2020 Updated search keyword in below code since existing search keyword has been changed from "Micro Focus Functional Testing Agent" to "Micro Focus UFT Agent" in Chrome browser
					Window("hwnd:=.*","regexpwndtitle:= Google Chrome","is owned window:=0","is child window:=0","text:=Extensions - Google Chrome").Type "Micro Focus UFT Agent"
					'Verify if extension is already enabled
					If Browser("name:=Extensions","title:=Extensions").Exist Then
						'Report the pass message if extension is already enabled
						reporterReportEvent "Passed","UFT extension verification","UFT extension is already enabled"
					else
						'Enable the extension if it is disabled
						Set WshShell1 = CreateObject("WScript.Shell")
							wait 3
							WshShell1.SendKeys "{TAB}"
							WshShell1.SendKeys "{TAB}"
							WshShell1.SendKeys "{TAB}"
							WshShell1.SendKeys "{TAB}"
							WshShell1.SendKeys "{TAB}"
							wait 2
							WshShell1.SendKeys "{ENTER}"
							reporterReportEvent "Passed","UFT extension verification","UFT extension is now enabled"
					End If
				else
					reporterReportEvent "Failed","Chrome extension Page","Unable to search UFT extension on extension page"
				End If
			else
				reporterReportEvent "Failed","Chrome Home Page","Unable to identify the Google home page"
			End If
			'Close the browser
			SystemUtil.CloseProcessByName "chrome.exe"
			
			'###############################################################################################################
			'CODE MODIFICATION
			'Jayarami Reddy 	09/07/2022	 Updated the code to launch chrome browser
			Systemutil.Run strApp,strFile,strFolderPath,"",3
			'END CODE MODIFICATION
			'###############################################################################################################
			
		End If
		'========Plugin PC code ends here===================
		'END CODE MODIFICATION
		'#############################################################################
		'CODE MODIFICATION
		'Udayakumar Reddy 	09/07/2020 This modification is implemented to support MS Edge Chromium browser, since existing code was not support MS Edge Chromium.
								'So if user wants to launch application in MS Edge Chromium then this method has been enhanced in such a way that it will first open MS Edge
								'with application URL, check the extension, enables it if the extension is disabled and then relaunch the MS Edge browser with given application URL
		'Verify the strApp is msedge type
		If strApp="msedge.exe" Then
			'Launch MS Edge with Application url page
			Systemutil.Run strApp,strFile,strFolderPath,"",3
			''Added creation time property to close the browser that has creation time zero
			If Browser("name:=.*","title:=.*","creationtime:=0").Exist(10) then
				reporterReportEvent "Passed","Microsoft Edge UFT extension verification","UFT extension is already enabled"
			Else
				Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge|.*Microsoft​ Edge").Highlight
				Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge|.*Microsoft​ Edge").Click
				Set WshShell = CreateObject("WScript.Shell")
				wait 5
				WshShell.SendKeys "{F4}"
				wait 5
				'Pass the ms edge extension URL
				WshShell.SendKeys "edge://extensions/"
				wait 5
				WshShell.SendKeys "{ENTER}"
				wait 5
				'#############################################################################
				'CODE MODIFICATION
				'Jayarami Reddy		02/16/2021 		'This modification is implemented to support MS Edge Chromium browser, since existing object properties not working for updated MS Edge Chromium browser version 88.0.705.68.
				'Udayakumar 		03/15/2021		'This modification is implemented to support MS Edge Chromium browser, since existing object properties not working for updated MS Edge Chromium browser version 88.0.705.81.
				If Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge|.*Microsoft​ Edge").Exist(2) then
					Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge|.*Microsoft​ Edge").Activate
					'Search for UFT extesion on ms edge extension page
					Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge|.*Microsoft​ Edge").Type "Micro Focus UFT Agent"
					
					WshShell.SendKeys "{ENTER}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 5
					WshShell.SendKeys " "
					wait 5
					
					'###############################################################################################################
					'CODE MODIFICATION
					'Jayarami Reddy 	08/03/2022 This modification is implemented to close all Browsers excpet 'quality center' on MS Edge browser
					'Jayarami Reddy 	09/07/2022  This modification is implemented to close all browsers if extension is enable after using send keys
					
					'Create description object for browser
					Set objDescription=Description.Create
					objDescription("micClass").Value="Browser"
					
					'Initializing 'BroIndex' as 0
					BroIndex=0
					'Initializing 'latestBrowserCollection' as 0
					latestBrowserCollection=0
					
					'Attempt to get the collection of opened browsers
					Set objCurrentBrowserCollection = Desktop.ChildObjects(objDescription)
					'verify if opened 'objBrowserCollection' greater than 0 then
					If objCurrentBrowserCollection.Count > 0 Then
						'Iterate through each browser in the collection
						For BroIndex=0 to objCurrentBrowserCollection.Count-1
							'Get the 'strTitle' property value from browser and assign to the variable 'strTitle'
							strTitle = Trim(lcase(objCurrentBrowserCollection.item(BroIndex).GetROProperty("title")))
							'Get the 'application version' property value from browser and assign to the variable 'strBrowserVersion'
							strBrowserVersion = Trim(lcase(objCurrentBrowserCollection.item(BroIndex).GetROProperty("application version")))
							'Setting the browser index to browser object
							Set objBrowser = objCurrentBrowserCollection(BroIndex)
							'Check 'chromium edge’ is not present in ‘strBrowserVersion’  and  string ‘qualitycenter’ or ‘qcbin’ not present in browser url
							If Not((Instr(strBrowserVersion,"chromium edge")>0 and (Instr(strTitle,"quality center") >0) Or (Instr(strBrowserVersion,"internet explorer")>0 and Instr(strTitle,"quality center")>0))) Then
			                		'Delete cookies
							objBrowser.DeleteCookies
							'Clear cache
							objBrowser.ClearCache
			                		'Close the Browser
			                		objBrowser.close
							End If
						Next
					End If
					'END CODE MODIFICATION
					'###############################################################################################################
					
					'Launch MS Edge with Application url page
					Systemutil.Run strApp,strFile,strFolderPath,"",3
					'Added creation time property to close the browser that has creation time zero
					If Browser("name:=.*","title:=.*","creationtime:=0").Exist(60) then
						'Report the Passed status as 'UFT extension is now enabled'
						reporterReportEvent "Passed","Microsoft Edge UFT extension verification","UFT extension is now enabled"
					ElseIf Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge|.*Microsoft​ Edge").Exist(60) Then
						'Report the Failed status as 'Unable to identify the home page. Check if UFT Extension for Edge browser is installed.'
						reporterReportEvent "Failed","Microsoft Edge Home Page","Unable to identify the home page. Check if UFT Extension for Edge browser is installed."
					'END CODE MODIFICATION
					'#############################################################################
					else
						'Report the Failed status as 'Unable to identify the home page. Check if UFT Extension for Edge browser is installed.'
						reporterReportEvent "Failed","Microsoft Edge Home Page","Unable to identify the home page. Check if UFT Extension for Edge browser is installed."
					End If	
				Else
					'Report the Failed status as 'Unable to search UFT extension on extension page'
					reporterReportEvent "Failed","Microsoft Edge extension Page","Unable to search UFT extension on extension page"
				End If
			End If	
		End If
		'END CODE MODIFICATION
		'################################################################
'		CODE MODIFICATION
		'Udayakumar Reddy 	03/18/2021 This modification is implemented to accessing firefox browser by user profile, since existing code was not support to access the firefox browser in multiple machines.
		'################################################################
		If strApp="firefox.exe" Then
			Systemutil.Run strApp,strFile,strFolderPath,"",3
			wait 5
			SystemUtil.CloseProcessByName "firefox.exe"
			wait 5
			'Call the component to create firefox browser profile with machine name and user name
			webCreateFirefoxUserProfile
			wait 5
			strPcnameUsername=ddGetItem ("FirefoxUserProfile")
			wait 2
			systemutil.Run strApp,"-p "&strPcnameUsername&" "&strFile,strFolderPath,"",3
			wait 5
			Set WshShell = CreateObject("WScript.Shell")
		
			If not Browser("name:=.*","title:=.*","creationtime:=0").Exist(10) Then
				If Window("hwnd:=.*","regexpwndtitle:=.*Mozilla Firefox","regexpwndclass:=MozillaWindowClass","is owned window:=False","is child window:=False","text:=.*Mozilla Firefox").Exist(10) Then
					Window("hwnd:=.*","regexpwndtitle:=.*Mozilla Firefox","regexpwndclass:=MozillaWindowClass","is owned window:=False","is child window:=False","text:=.*Mozilla Firefox").Highlight
					Window("hwnd:=.*","regexpwndtitle:=.*Mozilla Firefox","regexpwndclass:=MozillaWindowClass","is owned window:=False","is child window:=False","text:=.*Mozilla Firefox").Activate
					wait 5
					WshShell.SendKeys "{F6}"
					wait 5
					'Pass the firefox add-ons URL
					WshShell.SendKeys "about:addons"
					wait 5
					WshShell.SendKeys "{ENTER}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 3
					WshShell.SendKeys "{TAB}"
					wait 5
					WshShell.SendKeys "{ENTER}"
					wait 3
					WshShell.SendKeys "i"
					wait 5
					Dialog("regexpwndtitle:=Select add-on to install","text:=Select add-on to install","ispopupwindow:=True").WinEdit("attached text:=File &name:","regexpwndclass:=Edit").Highlight
					'################################################################
					'CODE MODIFICATION
					'Jayaram Reddy 	08/16/2023	Removed hardcoded UFT installation path & now grabbing it from system environment variable and then forming path for firefox extension file. 
					'################################################################
					'Get the uft path from environmental variable
					uftInstallationPath =  wshShell.ExpandEnvironmentStrings("%ST_INSTALL_PATH%")
					Dialog("regexpwndtitle:=Select add-on to install","text:=Select add-on to install","ispopupwindow:=True").WinEdit("attached text:=File &name:","regexpwndclass:=Edit").Set uftInstallationPath&"Installations\Firefox\WebExtension.xpi"
					'END CODE MODIFICATION
					'################################################################
					Dialog("regexpwndtitle:=Select add-on to install","text:=Select add-on to install","ispopupwindow:=True").WinButton("nativeclass:=Button","regexpwndtitle:=&Open","text:=&Open").Click
					wait 5
					
					Window("hwnd:=.*","regexpwndclass:=MozillaDropShadowWindowClass","is owned window:=True","is child window:=False","hascaption:=False").Highlight
					Window("hwnd:=.*","regexpwndclass:=MozillaDropShadowWindowClass","is owned window:=True","is child window:=False","hascaption:=False").Activate
					wait 1
					WshShell.SendKeys "{F6}"
					wait 2
					WshShell.SendKeys "%a"
					wait 2
					WshShell.SendKeys "{F6}"
					wait 2
					WshShell.SendKeys "%a"
					wait 2
					WshShell.SendKeys "{F6}"
					wait 2
					WshShell.SendKeys "%o"
					wait 5
					reporterReportEvent "Passed","Firefox UFT extension installation","UFT extension is installed successfully for firefox browser"
					SystemUtil.CloseProcessByName "firefox.exe"
					wait 5
					systemutil.Run strApp,"-p "&strPcnameUsername&" "&strFile,strFolderPath,"",3
					wait 5
					' webCloseAllBrowsers
					webCloseAllBrowsers
					wait 5
					'Launch firefox with Application url page
					systemutil.Run strApp,"-p "&strPcnameUsername&" "&strFile,strFolderPath,"",3
					
					Browser("creationtime:=0").Sync
					Browser("creationtime:=0").highlight
					WshShell.SendKeys "% x"
				Else
					reporterReportEvent "Failed",strReportStepLabel,"Failed to launch firefox browser with created profile"
					errNumber = Err.Number
					If errNumber<>0 Then
						reporterReportEvent "Failed",strReportStepLabel,"Failed to launch firefox browser with created profile"
					End If
				End If
			Else
				reporterReportEvent "Passed","Firefox UFT extension verification","UFT extension is already installed"			
			End If
			
		End If
		'END CODE MODIFICATION
		'################################################################
		wait 3
		
		'##############################################################################################################
		'CODE MODIFICATION
		'Jayarami  Reddy 	10/03/2022  This modification implemented to launch any application except firefox/Chrome and msedge
		'##############################################################################################################
		If not (strApp="firefox.exe") and not(strApp="msedge.exe") and not (strApp="chrome.exe") Then
			Systemutil.Run strApp,strFile,strFolderPath,"",3
		End If
		'END CODE MODIFICATION
		'##############################################################################################################
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Verify error occurrence and report the status accordingly			
		If errNumber = 0 Then
			'Report the status as Passed if there is any error while launching
			reporterReportEvent "Passed",strReportStepLabel,"The application '"&strApp&"' is launched successfully."
		Else
			'Report the status as Failed if there is any error
			reporterReportEvent "Failed",strReportStepLabel,"Failed to launch the application '"&strFile&"' and the Error is: '" &errDescription&" '"
		End If
	Else
		'Report the Failed status as'ddApplicationFilePath' value is empty
		reporterReportEvent "Failed",strReportStepLabel, "ddAppName is a mandatory parameter and cannot be empty. Please provide the valid file path in ddAppName parameter."
	End If
End Function



'##############################################################################################################################
' NAME:  microsoftaccess
' PURPOSE: The microsoftaccess class will provide to the data library methods for interacting with microsoft access databases.
'HISTORY
'	NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M  	   08/12/2013                 NEW
'Manjunath L M		   08/16/2013			Added msaGetProvider Component to the class
'##############################################################################################################################
Class microsoftaccess
	   'Declare access object
		Dim msaobjConnection
		'Class_Initialize Is fired whenever the class object is instantiates
		Private Sub Class_Initialize()
		End Sub
		'Class_Terminate when the object goes out of scope or object is set to nothing
		Private Sub Class_Terminate()
		End Sub
		' NAME:  ConnectToDataSource
		' PURPOSE:  To establish new connection to MS Access database
		' PARAMETERS:
		'       INPUT:
		'			DbName: String that contains the Db Name used to identify the db in the Dictionary.
		'       OUTPUT: None
		'HISTORY
		'NAME:											DATE:						PURPOSE
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Anil Ramshetty							17/11/2012					NEW
		'Anil Ramshetty							28/12/2012				Modified to include the error handling and changed  from'Function' to'Sub'
		'Manjunath L M  					  08/12/2013			  Modified to remove the g_Provider global variable
		'Manjunath L M						  08/22/2013			  Updated to handle the username and password protected ms access and changed the parameter ConnectionInfo to DbName
		'Charles M.							       08/28/2013
		'Manjunath L M                        09/04/2013	         Comented the variable msaobjConnection because this varaibale is a class level .To get the located path sepcified and to handle
		'																						the data source in connection s string.testCompareValues is replaced by the Instr.	Instr function is started from 1 instead of 0
		'Manjunath L M						  12/26/2013  			Updated to handle the username and passowrd only from DD and error's which will be occurs possible while creating the msaccess object connection
'Lakshman Kumar A.H.          13/03/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
		'###############################################################################################################
	Sub ConnectToDataSource(DbName)
		'***************************
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		'CODE MODIFICATION
		'08/27/2013 C.MCMILLAN  MODIFY CODE TO DECLARE ALL VARIABLES FOR THE FUNCTION
		Dim strConnectionInfo 'String that contains the Connection String retrieved from the data dictionary using the DBName Key		
		Dim strLocatedConnectionInfo 'String that contains the Connection String located 		
		Dim strMSAProvider 'String that contains provider for a specified MS Access
		'CODE MODIFICATION
		'Manjunath 12/26/2013  	Updated to handle the username and passowrd only from DD and error's which will be occurs possible while creating the msaccess object connection
				'Modified the connection string for only retriving the username and passwrd only from datadictionary
				'Connection credential should be passed from data dictionary and DbName _ConnectionInfo will consist of only the path of the database.
				'We need to put this restriction (as the DB Details will be provided by a automation designer) else we may need to create lot of lines of code only for creating the connection string.

					'##Dim bPassword 'Boolean that holds the result of the test for the "Password" string presence in Connection String
					Dim blnDictionaryUsername 'Boolean that holds the result of the test for the "Username" in data dictionary for the supplied DbName
					Dim blnDictionaryPassword 'Boolean that holds the result of the test for the "Password" in data dictionary for the supplied DbName
					Dim strConnectionCredential 'String that contains the username and password configuration for connection string as per the Keys defined in data dictionary for the DbName					
					Dim strConnectionPlusProvider 'String that contains the retrieved Connection String and correct provider from machine.
					'END CODE MODIFICATION
					'##############################################################
					'2) Initialize Error Handling
					'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
					'##On Error Resume Next
					'##'Clear Error
					'##Err.Clear
					'END PREREQUISITE CODE
					'**************************
					'BEGIN FUNCTION IMPLEMENTATION
					'###############################################################
					'CODE MODIFICATION
					'08/27/2013 C.MCMILLAN  Modify code to retrieve the ConnectionInfo and handle if it isn't in the Data Dictionary
					strConnectionInfo = Trim(ddGetItem(DbName &"_ConnectionInfo"))
					If Not strConnectionInfo = DbName &"_ConnectionInfo" Then 'ddGetItem will return the KeyName if item is not found
							'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
							'##On Error Resume Next
							'##'Clear Error
							'##Err.Clear
					'END CODE MODIFICATION		
					'CODE MODIFICATION
						'08/30/2013 Manjunath Modifiy code to start instring from first position and to get the proper file path when connection string is having the password
						'modified the variable strLocatedConnectionInfo and updated the same in the below lines of code
						'Test the Connection String for the presence of the Password
						'##bPassword = (instr(0,LCase(strConnectionInfo),"password")<>0)
						'##bPassword = (instr(1,LCase(strConnectionInfo),"password")<>0)           					
						'1) Get the proper file path
						'strConnectionInfo=Pathfinder.Locate(ddGetItem( DbName &"_ConnectionInfo"))
						'##If bPassword Then
							'##'Get the path is the conection info consist of password
							'##strLocatedConnectionInfo=Pathfinder.Locate(Trim(Left(strConnectionInfo,instr(1,strConnectionInfo,";")-1)))& Trim(Right(strConnectionInfo,instr(1,StrReverse(strConnectionInfo),";")))	'Finding path in the conection info and making the connection string
						'##Else
						strLocatedConnectionInfo=Pathfinder.Locate(strConnectionInfo)'Get the path of the file
						'##End If				
						'2) Call msaGetProvider to get the datasource provider
						'##strMSAProvider=msaGetProvider (strConnectionInfo)
						strMSAProvider=msaGetProvider (strLocatedConnectionInfo)        				
							'############################
							'CODE MODIFICATION
							'08/27/2013 C.MCMILLAN  Modify code to remove check for Username, simplify password test and add assumption that DataSource is in Connection String
							'##Check for the username and passowrd is specified in test data ([ProjectName]TestData.xls project specific will be stored in QC Resource Test Data folder)
							'##If g_dDictionary.Exists(DbName &"_Username") And g_dDictionary.Exists(DbName &"_Password") Then
							'##		'Create connection string if the username and password is specified in test data sheet
							'##		strConnection="Provider="&strMSAProvider&";Data Source="&strConnectionInfo&"; User Id="&ddGetItem( DbName &"_Username")&"; Password="&ddGetItem( DbName &"_Password")&";"
							'##		'Create connection string with the specified connection info in test data sheet
							'##		strConnection="Provider="&strMSAProvider&";"&strConnectionInfo
							'##	'Test the connection info for the complete connection string for the database connection
							'## ElseIf testCompareValues(ConnectionInfo,"password",False)  Then
							'##	'Check the password of the access database specified
							'##ElseIf g_dDictionary.Exists(DbName &"_Password") Then
							'##		'Create connection string if the password is specified in test data sheet
							'##		strConnection="Provider="&strMSAProvider&";Data Source="&strConnectionInfo&"; Jet OLEDB:Database Password="&ddGetItem( DbName &"_Password")
							'##Else
							'##		'Create connection string if the password is not specified in test data sheet
							'##		strConnection="Provider="&strMSAProvider&";Data Source="&strConnectionInfo
							'##End If			
							'##'Design Logic:
							'##'CIP = Connection Info Password
							'##'DDP = Data Dictionary Password		
							'##' 1) IF CIP  & DDP & UN ==> CIP  Use CIP, DDP doesn't matter
							'##' 2) IF CIP & !DDP ==> CIP  Use CIP, DDP doesn't matter
							'##' 3) IF !CIP & DDP ==> DDP
							'##' 4) IF !CIP & !DDP ==> NA  USE CI, P doesn't matter
							'##'1)Design Logic
							'##'Check the password of the access database specified
							'##If g_dDictionary.Exists(DbName &"_Password") and Not bPassword Then
									'##'3)Design Logic
									'##'Create connection string if the password is specified in test data sheet
									'##strConnectionPlusProvider="Provider="&strMSAProvider&"; Data Source="&strConnectionInfo&"; Jet OLEDB:Database Password="&ddGetItem( DbName &"_Password")
									'##strConnectionPlusProvider="Provider="&strMSAProvider&"; Data Source="&strLocatedConnectionInfo&"; Jet OLEDB:Database Password="&ddGetItem( DbName &"_Password")
							'##Else
									'##'1)2)4)Design Logic
									'##'CODE MODIFICATION
									'##'09/04/2013 Manjunath Modifiy code to verify Data Source in the connection info						
									'##If instr(1,lcase(strLocatedConnectionInfo),"data source")>0 Then
										'##strConnectionPlusProvider="Provider="&strMSAProvider&";"&strLocatedConnectionInfo	
									'##Else	
										'##'Create connection string if the data source is not specified in the connection info
										'##strConnectionPlusProvider="Provider="&strMSAProvider&";Data Source="&strLocatedConnectionInfo
									'##End If
									'##'END CODE MODIFICATION
							'##End If
						'END CODE MODIFICATION
						'############################
					'Test in the data dictionary for the presence of the msaccess database Username
					blnDictionaryUsername = g_dDictionary.Exists(DbName &"_Username")
					'Test in the data dictionary for the presence of the msaccess database Password
					blnDictionaryPassword = g_dDictionary.Exists(DbName &"_Password")
					'Assign connection credential as null if there is no username and/or password exist in data dictionary for the msaccess database
					strConnectionCredential=""				
					'Check the username of the access database specified
					If blnDictionaryUsername Then
						'Check the password of the access database specified
						If blnDictionaryPassword Then
							'Create connection credential as username and password
							strConnectionCredential=";User Id="&ddGetItem(DbName &"_Username")&";Password="&ddGetItem(DbName &"_Password")&";"
						Else
							'Create connection credential as username and empty password
							strConnectionCredential=";User Id="&ddGetItem(DbName &"_Username")&";Password=;"
						End If
					'Check only the password of the access database specified
					ElseIf blnDictionaryPassword Then					
						'Create connection credential as only password
						strConnectionCredential=";Jet OLEDB:Database Password="&ddGetItem(DbName &"_Password")&";"	
					End If
					'Create connection string by using provider ,data source and connection credential
					strConnectionPlusProvider="Provider="&strMSAProvider&"; Data Source="&strLocatedConnectionInfo&Trim(strConnectionCredential)
				'End Code Modification
				'############################
				'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
				On Error Resume Next
				'Clear Error
				Err.Clear
				'Create a database object instance
				Set msaobjConnection=CreateObject("ADODB.Connection")		
				'Attempt to connect to MS Accessdatabase
				msaobjConnection.Open strConnectionPlusProvider
'Store the generated run time error number and error description in variables.
				errNumber = Err.Number
				errDescription = Err.Description
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				'Verify the error occurrence	
				If errNumber =0 Then
					'Report as passed as there was no error occured  while performing specified operation on  object
					reporterReportEvent "Done","MS Access Library-->ConnectToDataSource", "Connection to MS Access data base is done successfully  for  given connection"&DbName				
				'Check for the error number -2147467259
				ElseIf errNumber ="-2147467259" Then
					'Report failed if the connection string does not contains the actual provider value
					reporterReportEvent "Failed","MS Access Library-->ConnectToDataSource", "For the supplied MS Access data base connection, not able to open data "& _
					"connection to fetch the required values as the connection string does not contains the required details ,Please contact automation team."				
				'Check for the error number -2147217843
				ElseIf errNumber ="-2147217843" Then
					'Report Failed if the connection string does not contains the required authentication
					reporterReportEvent "Failed","MS Access Library-->ConnectToDataSource", "The MS Access data base needs proper authentication details like Username and Password "&_
					"which ever is suitable  for the authentication, Please specify the correct details required and rerun the script, Please contact automation team."				
				Else
					'Report the status as Failed and  error description
					reporterReportEvent "Failed","MS Access Library--->ConnectToDataSource","Failed to connect MS Access data base for given connection "&DbName& Chr(13) &" Reason: "& errDescription &_
					"Please contact automation team."
				End If
		'End Of Code Modification
		'#######################
		Else		
			'Report the status as Failed if the sonnection info is not in a data dictionay
			 reporterReportEvent "Failed","MS Access Library--->ConnectToDataSource","Connection information is not found in the Data Dictionary.  Looking for information at KeyName: "&DbName &"_ConnectionInfo"
		End If
	End Sub
	'###########################################################################################################
	' NAME:  QueryDataSource
	' PURPOSE: Query  "MS ACCESS" database and return dataset to the user
	' PARAMETERS:
	'		INPUT      :
	'				sqlQueryStatement : String that contains query statement to be executed on MS Access database
	'	   OUTPUT :
	'				Object that contains dataset stored in data dictionary for key name as supplied in a variable sqlQueryStatement
	'HISTORY
	'NAME:						DATE:					PURPOSE
	'-----------------------------------------------------------------------------------------------------
	'Anil                          11/30/2012         NEW
	'Sunil 						13/06/2013			Modified to component as private and also to work in class
	'Manjunath 			 16/08/2013			Modifed the sub as function as QueryDataSource is returning the record set object
	'C.MCMILLAN         09/04/2013			Modified to remove Dictionary Assignment (should just pass back)
	'Lakshman Kumar A.H.     13/03/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
	'###########################################################################################################
	Function QueryDataSource(sqlQueryStatement)
	   ' "On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	   On Error Resume Next
		'Clear Error
		Err.Clear
	   'Execute specified sql statement and return the dataset to the user
	   Set QueryDataSource=msaobjConnection.Execute(sqlQueryStatement)
'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Verify the error occurrence
	   If errNumber =0 Then
			'Report as passed as there was no error occured  while performing specified operation on  object
			reporterReportEvent "Done","MS Access Library-->QueryDataSource", "sql query is executed  and return  the MS Access  dataset object successfully"       			
'########################################
'CODE MODIFICATION
'09/04/2013 C.MCMILLAN  Remove Dictionary Assignment
'Add the retrieved dataset to the dictionary
			'ddAddItem sqlQueryStatement,QueryResultDataSource
			'END CODE MODIFICATION
			'#######################################
		Else
			'Report the status as Failed and  error description
			reporterReportEvent "Failed","MS Access Library--->QueryDataSource","Failed to execute the sql query : "&sqlQueryStatement&"in  MS Access data base Reason is : "&Chr(13)& errDescription
		End If
	End Function
	'###############################################################################################################
	' NAME:  msaGetProvider
	' PURPOSE:  To get the provider value for MS Access database
	' PARAMETERS:
	'       INPUT:
	'          ConnectionInfo:String that contains MS Access file path
	'       OUTPUT:
	'           msaGetProvider:Text that contains provider for a specified MS Access
	'HISTORY
	'NAME:											DATE:					PURPOSE
	'------------------------------------------------------------------------------------------------
	'Manjunath L M                   01/10/2013                NEW
	'Manjunath L M					 13/08/2013      Modified to remove the g_Provider global variable
	'Manjunath L M					 16/08/2013		 Modified the logic of getting the provider
	'Manjunath L M					 20/08/2013		 Modified the accbd to accdb on line 106
	'Manjunath L M					09/04/2013		Modified to use instr method inplace testcomparevalue component
	'###############################################################################################################
	Private Function msaGetProvider(ConnectionInfo)
			'Get provider depends on file format
				'Check for .mdb file formate (Access 2003)
			If instr(1,LCase(ConnectionInfo),".mdb")<>0 Then
					'Assign provider information to component if the file format is Microsoft Access 2003
					msaGetProvider="Microsoft.JET.OleDb.4.0"
				'Check  for .accdb file format (Access 2007)
			ElseIf instr(1,LCase(ConnectionInfo),".accdb")<>0 Then
					'Assign provider information to component if the file format is Microsoft Access 2007
					msaGetProvider="Microsoft.ACE.OLEDB.12.0"		
			Else
				'Report as failed if ms access other the required versions
				reporterReportEvent "Failed ","MS Access Library------>msaGetProvider","Provider not available for the given version of msAccess database, Please contact automation team"
			End If
	End Function	
End Class


'#############################################################################################################################################################
' NAME: objectNotExist_ExitFromAction
' PURPOSE:  To exit from the action in which it has been called if the supplied object does not exist (displayed) in opened application
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			ddWaitSec: String or data dictionary that contains Numeric value(greater than 0) to wait for object existence.
'
'		Note: We have one existing component 'webIsElementNotExist_ExitAction' which handles the same operation for only web application.
'			  Hence this component is created to handle any object hierarchy(ex1: Browser().Window().Page()..Frame.Object())
'			
'		OUTPUT : None
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Venkateswarlu Vangara					10/26/2018				New
'#############################################################################################################################################################
Sub objectNotExist_ExitFromAction(ScreenName_ObjectName,ddWaitSec)

'PREREQUISITE CODE
'1) Declarations
'##############################################################
Dim blnObjExist 	         'Boolean that contains the object not existence status
	'Dim objWebElementNotExist  'Object that contains created hierarchy object(ex:Browser().Page().Object())
	Dim intSecToWait
strReportStepLabel = "Master Library--->objectNotExist_ExitFromAction"

str_ScreenName_ObjectName = ScreenName_ObjectName
'##'2) Initialize Error Handling
'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
'On Error Resume Next
'##'Clear Error
'##Err.Clear
'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
	'Initialize the flag 'defaultSecToWait' as 30
	defaultSecToWait = 30	
	'Get the reference value from key for the parameter 'ddWaitSec' and assign to the variable ‘intSecToWait’
	 intSecToWait=Trim(ddGetItem(ddWaitSec))	
	'Clear the Errors        		
	Err.Clear 	
	''Verify if ScreenName_ObjectName is not empty/Null
	If ScreenName_ObjectName <> "" Then				
		'Get the 'ScreenName_ObjectName' from object repository using ‘getObjectWithHierarchy’ ScreenName_ObjectName
		Set verifyObject = getObjectWithHierarchy(ScreenName_ObjectName)
					'Verify if 'intSecToWait' is Empty/Null
					If intSecToWait <> "" Then											
	            		'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
						On Error Resume Next					
						'convert 'intSecToWait' string  into integer
						intSecToWait = Cint(intSecToWait)
						'Store the generated run time error number and error description in variables.
						errNumber = Err.Number
						errDescription = Err.Description
						'Clear the error.
						Err.Clear
						'Ends the Error Handling Scope.
						On Error GoTo 0	
						'Verify the error occurance and for -ve values	
						If errNumber<>0 Then
							'Report as failed if any error occurs while converting into integer
							reporterReportEvent "Failed",strReportStepLabel,"The supplied values ddWaitSec:'"&intSecToWait&"' should be positive integer values. Please provide valid numeric values."
						End If
						'Verify If the parameter 'intSecToWait' less than one
						If intSecToWait<1 Then
							'Report as failed if intSecToWait not numeric
							reporterReportEvent "Failed",strReportStepLabel,"The supplied values ddWaitSec:'"&intSecToWait&"' should be positive integer values and not less than One. Please provide valid numeric values."
						End If
					Else
						'if 'intSecToWait' is Empty/Null then default 'defaultSecToWait' is 30 seconds
						intSecToWait = defaultSecToWait
					End If				
			'Object existence will be verified and return the status to the variable 'blnObjExist'
			blnObjExist = verifyObject.Exist(intSecToWait)	
			'Verify if the supplied object exist
			If blnObjExist Then
				'Report Done as the supplied object exist
				reporterReportEvent "Done",strReportStepLabel,"The supplied object: '"&str_ScreenName_ObjectName&"' exist, So executing the remaining steps in the action(template)"			
				'reporterReportEvent "Done",strReportStepLabel, "The maximum wait period is ddWaitSec:'"&intSecToWait&"' provided to verify object existence, if supplied object: '"&str_ScreenName_ObjectName&"' is found then remaining steps will be execute in the action(template)"
			Else		
				'Report Done as the supplied object not exist
				reporterReportEvent "Done",strReportStepLabel,"The supplied object: '"&str_ScreenName_ObjectName&"' does't exist on the application even after waiting for ddWaitSec: '"&intSecToWait&"', So not executing the remaining steps in the action(template)"				
				'Do exit action if the supplied object not exist in opened application
				ExitAction			
			End If
Else
'Report the status as Failed for passing 'ScreenName_ObjectName' value is empty
reporterReportEvent "Failed",strReportStepLabel, "ScreenName_ObjectName is a mandatory parameter and can not be empty. Please enter a valid 'ScreenName_ObjectName'."
End If			
End Sub


'#########################################################################################
' NAME:  oracledb
' PURPOSE: The Oracle class will provide the data library methods for interacting with Oracle databases.
'HISTORY
'	NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
' Venkateswarlu					08/28/2017					New
'#########################################################################################
Class oracledb
		' PREREQUISITE CODE
		' Declarations      	
		Dim OracleobjConnection ' Object that contains the Oracle object instance
		Dim errNumber ' Contains Error Number
		Dim errDescription  ' Contains Error description		
		Dim strReportStepLabel   ' String that contains the step label for the reports (StepLabel consist of LibraryName---->ComponentName)		
		Dim strOracleProvider   'string that contains the provider for Oracle database
		'Class_Initialize Is fired whenever the class object is instantiates
		Private Sub Class_Initialize()
		End Sub
		'Class_Terminate when the object goes out of scope or object is set to nothing
		Private Sub Class_Terminate()
		End Sub 		
		' NAME:  ConnectToDataSource
		' PURPOSE:  To establish new connection to Oracle database
		' PARAMETERS:
		'       INPUT:
		'			DbName: String that contains the Db Name used to identify the db in the Dictionary.
					'*****************
					'Inputs by global data		
		'					DbName "_Username"	: DD Reference that contains the Username for the Oracle login
		'					DbName "_Password	: DD Reference that contains the Password for the Oracle login
		'					DbName "_DSN	: DD Reference that contains the Oracle database DSN
					'*****************
		'       OUTPUT: None
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Venkateswarlu v					08/30/2017				New
		'Jayarami Reddy						03/30/2021 				Modified to get the oracle driver name.
		'#########################################################################################
		Sub ConnectToDataSource(DbName)		
			' PREREQUISITE CODE
			' 1) Declarations		
			Dim strConnectionString 'String that contains the Connection String [Provider, DSN, Username, Password]                      		
			strReportStepLabel="oracledb Library--->ConnectToDataSource"
			'#############################################################################
			'CODE MODIFICATION
			'Jayarami Reddy		03/30/2021 		This modification is implemented to get the oracle driver name.
						
				strDSN=Ucase(Trim(ddGetItem("Oracle_DSN")))
				If strDSN<>"" Then
					If strDSN<>Ucase("Oracle_DSN") Then
						Set objShell=CreateObject("WScript.Shell")
						'Get the OS root directory
						WinDirPath = objShell.ExpandEnvironmentStrings("%WinDir%")
						driverPath = WinDirPath & "\ODBC.INI"
						'create the file system object
						 Set FSO = CreateObject("Scripting.FileSystemObject")
						 If FSO.FileExists(driverPath) Then
						 	Set ReadDrivers = FSO.OpenTextFile(driverPath, 1)
						 	ODBCDrivers=ReadDrivers.ReadAll
							If Instr(ODBCDrivers,strDSN&"=")<>0 Then
								drivers = split(ODBCDrivers,strDSN&"=")
						 		driverName = split(drivers(1),"(32 bit)")
						 		'Assign the provider for Oracle to variable strOracleProvider
						 		strOracleProvider = trim(driverName(0))
						 	Else
						 	 	reporterReportEvent "Failed", strReportStepLabel ,"Driver not found. Please contact automation team."
						 	End  If
						 Else
							reporterReportEvent "Failed", strReportStepLabel ,"Driver may not be installed at path " & driverPath & ". Please contact automation team."
						 End If
					Else
						reporterReportEvent "Failed", strReportStepLabel ,"Oracle_DSN is a mandatory parameter and needs to have some value. So please enter a valid DSN name in config file under 'Oracle_DSN'."			
					End If	
				Else
						reporterReportEvent "Failed", strReportStepLabel ,"Oracle_DSN is a mandatory parameter and cannot be empty. So please enter a valid DSN name in config file under 'Oracle_DSN'."				
				End If	
			 'END CODE MODIFICATION
			 '#############################################################################
			' END PREREQUISITE CODE
			' **************************
			' BEGIN FUNCTION IMPLEMENTATION
			' ###############################################################
			' 2) Check for the presence Oracle connection credentials in datadictionary
			' 2.1) Test in the data dictionary for the existence  of the Oracle database Username
			blnDictionaryUsername = g_dDictionary.Exists(DbName &"_Username")
			' 2.2) Test in the data dictionary for the existence  of the Oracle database Password
			blnDictionaryPassword = g_dDictionary.Exists(DbName &"_Password")
			' 2.3) Test in the data dictionary for the existence  of the Oracle database DSN
			blnDictionaryDSN = g_dDictionary.Exists(DbName &"_DSN")  					
			' 3) Check any of the connection credentials parameter is not empty
			If blnDictionaryUsername  And blnDictionaryPassword And blnDictionaryDSN Then
			'Get the Decrypt password and store into variable'dd_OraDecryptedPassword'		
			getDecryptedvalue ddGetItem(DbName &"_Password"),"dd_OraDecryptedPassword"			
				' 4) Create Oracle Connection String			
				strConnectionString="Driver="&strOracleProvider&";DBALIAS="&ddGetItem(DbName &"_DSN")&";DBQ="&ddGetItem(DbName &"_DBQ")&";Uid="&ddGetItem(DbName &"_Username")&";Pwd="&ddGetItem("dd_OraDecryptedPassword")&";"
				' Initialize Error Handling
				On Error Resume Next
				' Clear Error
				Err.Clear	
				' 5) Create a database object instance
				Set OracleobjConnection=CreateObject("ADODB.Connection")		
				' 6) Attempt to connect to Oracle database
				OracleobjConnection.Open strConnectionString       	
				' 7) Verify the error occurrence, and if any suppress the errors
				errNumber=Err.Number
				errDescription=Err.Description
				On Error GoTo 0
				' 7.1) If no errors while opening the Oracle connection report done
				If errNumber=0 Then     				
					reporterReportEvent "Done", strReportStepLabel , "Connection to Oracle data base is done successfully for given connection "&DbName
				' 7.2) if error number is -2147467259, report failed stating that provider is not valid
				ElseIf errNumber="-2147467259" And Instr(1,errDescription,"Data source name")<>0 Then
					reporterReportEvent "Failed", strReportStepLabel , "Failed to make Oracle connection due to invalid data provider supplied. Please contact automation team"
				' 7.3) if error number is -2147217805, report failed stating that connection string is not valid
				ElseIf errNumber="-2147217805" Then
					reporterReportEvent "Failed", strReportStepLabel , "The created ConnectionString(Provider_DSN_UN_PWD) to make Oracle database connection does not follow the "&_
					"OLE DB specification. Please contact automation team"					
				' 7.4) if error number is -2147467259, report failed stating that authentication is not proper
				ElseIf errNumber="-2147217843" Then
					'Report Failed if the connection string does not contains the required authentication
					reporterReportEvent "Failed", strReportStepLabel  , "The Oracle data base needs proper authentication details like DSN, Username, Password and Servername "&_
					", Please specify the correct details required and re-run the script."
				' 7.5) Report fail for any other errors
				Else
					'Report the status as Failed and error description
					reporterReportEvent "Failed", strReportStepLabel ,"Failed to connect Oracle data base for given connection "&DbName& Chr(13) &" Reason: "& errDescription &_
					"Please contact automation team."
				End If      		
			Else		
				'3) Report the status as Failed if any of the connection credentials is empty
				reporterReportEvent "Failed", strReportStepLabel ,"Connection information[DbName_DSN, DbName_Username and/or DbName_Password] is not found in the Data Dictionary for the DbName: "&DbName&_
				". Please provide the required info and re-run the script."
			End If
		End Sub
		'#########################################################################################
		' NAME:  QueryDataSource
		' PURPOSE: Query "Oracle" database and return dataset to the user
		' PARAMETERS:
		'		INPUT      :
		'				sqlQueryStatement : String that contains query statement to be executed on Oracle database
		'	   OUTPUT :
		'				QueryDataSource : Object that contains the recordset
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Venkateswarlu v						08/30/2017		New
		'#########################################################################################
		Function QueryDataSource(sqlQueryStatement)
			' PREREQUISITE CODE
			' 1) Declarations
			' ##############################################################			
			strReportStepLabel="oracledb Library--->QueryDataSource"
			' END PREREQUISITE CODE
			' **************************
			' BEGIN FUNCTION IMPLEMENTATION
			' ###############################################################			
			' 2) Initialize Error Handling
			On Error Resume Next
			' Clear Error
			Err.Clear
			' 3) Execute specified sql statement and return the dataset
			Set QueryDataSource=OracleobjConnection.Execute(sqlQueryStatement)			
			' 4) Verify the error occurrence, and if any suppress the errors
			errNumber=Err.Number
			errDescription=Err.Description
			On Error GoTo 0
			 '4.1) If no errors while executing query in Oracle connection report done
			If errNumber=0 Then
				'Report as Done as there was no error occured  while performing query execution
				reporterReportEvent "Done" , strReportStepLabel , "The supplied query: "&sqlQueryStatement&" is executed and returned the Oracle dataset object successfully"                                       	
			Else
				' 4.2) Report the status as Failed and  error description
				reporterReportEvent "Failed", strReportStepLabel ,"Failed to execute the query: "&sqlQueryStatement&" in Oracle data base due to Reason : "&Chr(13)&errDescription
			End If
		End Function
End Class



'############################################################################################
' NAME:  qcDownloadResourceByName
' PURPOSE:  Downloads to the client machine a File from the QC Resources Module by the Unique Name given it and adds the
'			the file path to the data dictionary
' PARAMETERS:
'		INPUT:
'				Resource_Name: String that contains the Name of the Resource to be downloaded.
'						Note: Care will need to be taken to make sure it is unique.
'				Save_Path: String Foler Path to Save Download To
'	   OUTPUT :
'				String Path to the Downloaded File
'HISTORY
'NAME:								DATE:							PURPOSE
'-----------------------------------------------------------------------------------------------------
'C.McMillan        	 			07/02/2013		               	 NEW
'Manjunath L M	         		08/13/2013					Modified to get local system default location and replaced qcDownloadResourceFile with qcDownloadResourceByName in all reports
'Narasinha						10/01/2013					Changed the Failure message to Warning message in case QC connection is not found.																			
'Lakshman Kumar A.H.     		13/03/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Jayarami Reddy				03/10/2023					Modified to download the resource depending on flag set in USEONEDRIVE user environment variable. Also added code to release resources. 
'############################################################################################
Sub qcDownloadResourceByName(Resource_Name, Save_Path)'As String
	Dim qcResourceFactory, qcFilter, qcResourceLocation,objSysInfo, objUser, onedriveFlg
	On Error Resume Next
	'#############################################################################
	'CODE MODIFICATION
	'Jayarami Reddy                03/10/2023
	'This modification is implemented based on whether Save_Path is blank or not and if its blank then read value from key USEONEDRIVE in data dictionary set path for downloading the resource
	'Assign save path if supplied                        
	If Trim(Save_Path) <> "" Then 
		qcResourceLocation = Trim(Save_Path)
		'Report the status as Pass with description
		reporterReportEvent "Passed","QC Library-->qcDownloadResourceByName", qcResourceLocation & " path will be used to download qc resource"
	Else
		'Get the one drive value from environment variable
		getUserEnvVarVal "USEONEDRIVE" 
		
		'Create ADSystemInfo object 
		Set objSysInfo = CreateObject("ADSystemInfo")                 
		Set objUser = GetObject("LDAP://" & objSysInfo.UserName)
		
		'Create object
		Set wshShell = CreateObject( "WScript.Shell" )
		Set fso = CreateObject("Scripting.FileSystemObject")
		
		'get the 'UseOneDrive' value
		onedriveFlg = ucase(ddGetItem("UseOneDrive"))
		
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Check errNumber is equal to zero
		If errNumber=0 Then
			'Check the onedriveflg status
			Select Case onedriveFlg
				Case "YES"
						'Get the onedrive resource location
						onedrivepath = wshShell.ExpandEnvironmentStrings( "%OneDrive%" )
						resourceLoc = onedrivepath
						qcResourceLocation = resourceLoc&"\"
						'Report the status as Pass with description
						reporterReportEvent "Passed","QC Library-->qcDownloadResourceByName", "UseOneDrive environment variable is set as : " & onedriveFlg
				Case "NO"
						'Get the QC resource location
						qcResourceLocation = objUser.homeDrive&"\"
						'Report the status as Pass with description
						reporterReportEvent "Passed","QC Library-->qcDownloadResourceByName", "UseOneDrive environment variable is set as : " & onedriveFlg
				Case "USEONEDRIVE"
						'Get the QC resource location
						qcResourceLocation = objUser.homeDrive&"\"
						'Report the status as Pass with description
						reporterReportEvent "Passed","QC Library-->qcDownloadResourceByName", "UseOneDrive user environment variable not found. Hence " & onedriveFlg & " will be used to download qc resource."
				Case Else
						'Report the status as fail with description
						reporterReportEvent "Failed","QC Library-->qcDownloadResourceByName", "UseOneDrive environment variable should be set as either YES or NO"
			End Select
		Else
			'Report the status as fail with description
			reporterReportEvent "Failed","QC Library-->qcDownloadResourceByName", "Could not read UseOneDrive key. Please recheck if UseOneDrive variable and key is present and correct value is set for it."
		End If	
	End  If
	'END CODE MODIFICATION
	'#############################################################################

	'Verify  QC connection is established properly
	If QCUtil.IsConnected Then
		'Set the Filter to find the file
		Err.Clear
		Set qcResourceFactory = QCUtil.QCConnection.QCResourceFactory
		Set qcFilter = qcResourceFactory.Filter
		qcFilter.Filter("RSC_NAME") = "'"& Resource_Name &"'"
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		If errNumber = 0 Then ' make sure an incorrect fitler isn't used (doesn't like spaces)
			'Find the Resource File
			Set qcResourceList = qcResourceFactory.NewList(qcFilter.Text)
			Select Case qcResourceList.Count
			Case 0
				reporterReportEvent "Failed","QC Library-->qcDownloadResourceByName", _
				"Specified Resource Not Found.  Please Check the Name, make sure a File is Attached and Try again."
			Case 1
				'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
				On Error Resume Next
				Set qcResourceFile = qcResourceList.Item(1)
				qcResourceFileName = qcResourceFile.FileName
				If qcResourceFileName = "" Then
					reporterReportEvent "Failed","QC Library-->qcDownloadResourceByName", _
					"QC Resource Found But NO Resource File Attached.  Please Check the Name, make sure a File is Attached and Try again."
				End If
				qcResourceFile.FileName = qcResourceFileName

				Set fso = CreateObject("Scripting.FileSystemObject")
				Set fsoFile = fso.GetFile(qcResourceLocation & qcResourceFileName)
				ddAddItem (Resource_Name &"_Path"), (qcResourceLocation & qcResourceFileName)
				If (Err.number =0) Then 'File Found in Location
					'If file is found it has been more than 1 day since the file was last accessed,
					'delete the file and download a new copy.
					If ((DateValue(Now) - DateValue(fsoFile.DateLastAccessed)) <> 0) Then
						fsoFile.DeleteFile (qcResourceLocation & qcResourceFileName)
					Else
						'Report the status as Pass with description
						reporterReportEvent "Passed","QC Library-->qcDownloadResourceByName", _
					"Existing Resource File Found at Save Location. Download Aborted. "& _
						"Delete File at Save Location IF you wish to use the one from QC."
						Exit Sub
					End if
				End If
				'File not found or is older than one day; download a copy.
				'Download Resource file to specified location
				Err.Clear
				qcResourceFile.DownloadResource qcResourceLocation, True
				'Store the generated run time error number and error description in variables.
				errNumber = Err.Number
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				If errNumber <> 0 Then
					'Report the status as failed with description
					reporterReportEvent "Failed","QC Library-->qcDownloadResourceByName", _
					"Error Occurred when attempting to save to the following location:"& qcResourceLocation &".  "& _
					"Please check that Save path is correct."
				Else
					'Report the status as Passed with description
					reporterReportEvent "Passed","QC Library-->qcDownloadResourceByName", _
					"QC Resource Successfully Saved to Specified Save Location."
				End if
			Case Else
				'Report the status as failed with description
				reporterReportEvent "Failed","QC Library-->qcDownloadResourceByName", _
				"More than One File Found When Attempting to Find the Resource File.  Please Check the Name and Try again."
			End Select
		Else
			'Report the status as failed with description
			reporterReportEvent "Failed","QC Library-->qcDownloadResourceByName", _
			"Error Occurred When Attempting to Find the Resource File.  Please Check the Name and Try again."
		End If
	Else
		'Report the status as Warning with description
		reporterReportEvent "Warning","QC Library-->qcDownloadResourceByName", "QC Connection not found. Ensure the test being executed is connected to a Quality Center instance."
	End If
	
	'#############################################################################
	'CODE MODIFICATION
	'Jayarami Reddy                03/10/2023
	'This modification is implemented to release the resources which were allocated as part of USEONEDRIVE feature alongwith those allocated as part of old code that is still being used. 
	'Release the resources
	Set fso = Nothing
	Set objSysInfo = Nothing
	Set objUser = Nothing
	Set wshShell = Nothing
	'END CODE MODIFICATION
	'#############################################################################
End Sub




'######################################################################
' NAME:  qcGetCurrentTSFolder
' PURPOSE:  Get the current Test Set folder object from QC
' PARAMETERS:
'		INPUT       :	None       		
'	   OUTPUT :
'			qcGetCurrentTSFolder  :  Object that contains  the test set  folder of current test
'HISTORY
'NAME:										DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Ravi Mishra           08/29/2012              NEW
'Manjunath L M			07/10/2014     Modified to Remove QC connection verification as it is done in parent level component
'																										And error handling if the script is not running form QC Test Set
'#######################################################################
Private Function qcGetCurrentTSFolder()
		'##############################################################
		'CODE MODIFICATION
			'07/10/2014  Manjunath Modified to Remove QC connection verification as it is done in parent level component
													'And error handling if the script is not running form QC Test Set
			'PREREQUISITE CODE
			'1) Declarations
			'##############################################################		
					Dim objCurrentTestSet		' (Object) The Test Set of the current test			
					Dim strReportStepLabel		' (String) The step label for the reports(StepLabel consist of LibraryName---->ComponentName)
					strReportStepLabel = "QC Library --> qcGetCurrentTSFolder"			
			'END PREREQUISITE CODE
			'**************************
			'BEGIN FUNCTION IMPLEMENTATION
			'###############################################################
			'Removed QC connection verification as it is done in parent level component
			''#Check for QC connection using 'qcIsCurrentRun' component
			'#If qcIsCurrentRun Then
			'Initialize Error Handling
			On Error Resume Next
			'Clear Error
			Err.Clear	
			'Set the test set object of the current test using 'qcGetCurrentTSTest' component
			Set objCurrentTestSet = qcGetCurrentTSTest.TestSet
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Verify error occurence
			If errNumber =0 Then
					'Return the Test set folder object of the current Test Set  during runtime
					Set qcGetCurrentTSFolder=objCurrentTestSet.TestSetFolder
			Else
					'Report failure - As the script is not running from TestSet.
					reporterReportEvent "Failed", strReportStepLabel,"The script is not running from TestSet. If you intended to run the script without TestSet, Please define"&_
																																												" 'URL' key in your TestData.xls file and re-run."
			End If
		'END CODE MODIFICATION
		'##############################################################							
End Function


'########################################################################
'NAME:  qcGetCurrentTSTest
'PURPOSE:  Get the TestSet object for the current test being run
'PARAMETERS:
'		INPUT      :		
'				None	
'	  OUTPUT :
'          qcGetCurrentTSTest : Object  that contains the Test set of current test
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Ravi Mishra        29/08/2012                 NEW
'Manjunath L M			07/10/2014     Modified to Remove QC connection verification as it is done in parent level component
'#######################################################################
Private Function qcGetCurrentTSTest()
		'Removed QC connection verification as it is done in parent level component
		'##'Check for QC connection using 'qcIsCurrentRun' component
		'##If qcIsCurrentRun Then
		'set the test set object for the current test being executed
		Set qcGetCurrentTSTest = QCUtil.CurrentTestSetTest
		'##End If
End Function


'#########################################################################################################
' NAME:  qcGetTestDataValuesFromParentTSFolder
' PURPOSE:  Retrieves the Configuration/Test data from the XML file attached to the current TestSet Folder or a TestSet Parent Folder
'		    and replaces the data if the respective data dictionary key already exists, else
'			stores the data to the data dictionary with the respective new key name specified in the 'name' attribute in Xml file
' PARAMETERS:
'		INPUT      :		
'				None	
'	  OUTPUT :   Data Dictionary keys contain the data of  the XML file attached to the current TestSet Folder or a TestSet Parent Folder.
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
' Vani S and Venkateswarlu        29/03/2019                 NEW
'########################################################################################################
Private Sub qcGetTestDataValuesFromParentTSFolder
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################		
			Dim objCurrentTSFolder			  ' (Object) TSFolder currently in focus				
			Dim objAttachmentFactory		 ' (Object) TSFolder Attachment Factory					
			Dim objAttachmentList				' (Object) List of Attachments in the TSFolder	
			Dim blnXmlFileAttachmentFound 		  '	(Boolean) Status of the xml file existance
			Dim intAttachment						'(Integer) Loop iteration value
			Dim intNumOfXmlAttachmentFound		  '(Integer)Number of xml file found
			Dim intAttachmentNumber			  '(Integer)Attachment number contains Xml file
			Dim strReportStepLabel  	 		' (String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "QC Library --> qcGetTestDataValuesFromParentTSFolder"
				intNumOfXmlAttachmentFound = 0
				intAttachmentNumber = 0
	 ' END PREREQUISITE CODE
	 ' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	 ' ###############################################################
		On Error Resume Next
		' Check the connection between QTP and ALM/QC
		If qcIsCurrentRun then
			'Start with Current TSFolder			
			Set objCurrentTSFolder = qcGetCurrentTSFolder
			'Assign the 'blnXmlFileAttachmentFound variable as false
			blnXmlFileAttachmentFound = False			
			 '##Loop Until blnXmlFileAttachmentFound = True or CurrentTSFolder.Name = "Root"			
			 Do Until blnXmlFileAttachmentFound OR objCurrentTSFolder.Name = "Root"
				'Get Attachment Factory of Current TSFolder in Focus
				Set objAttachmentFactory = objCurrentTSFolder.Attachments
				'Get the Attachment List
				Set objAttachmentList = objAttachmentFactory.NewList("")
				'Check the number of attachment list not equal to 0	
				If objAttachmentList.Count <> 0 then
					'For loop to check the attachments extension
					'Iterate through each index of objAttachmentList.Count
					For intAttachment = 1 to objAttachmentList.Count					
							'Verify that the obtained file is xml
							If Lcase(Right(objAttachmentList.Item(intAttachment).Name,4))=".xml" Then
								'Increment the variable 'intNumOfXmlAttachmentFound' by 1
								intNumOfXmlAttachmentFound = intNumOfXmlAttachmentFound + 1
								'Check the value intNumOfXmlAttachmentFound is greater than 1,report fail
								If intNumOfXmlAttachmentFound > 1 Then
									'Clear the error								
									err.Clear
									'End the Error Handling Scope.
									On Error Goto 0
									'Report the Failed message if more than one xml attachment file found attached to the folder
									reporterReportEvent "Failed", strReportStepLabel, "More than one xml file found attached to the folder: '"& objCurrentTSFolder.Name&"' .Please remove "&_
																										"Unnecessary files from the Test Set Folder's Attachments tab and execute the script again."
								End If
								'Assign the current 'intAttachment' value to a variable 'intAttachmentNumber'
								intAttachmentNumber = intAttachment
								'Assign the file location to 'qcXmlFileAttachmentPath'								
								qcXmlFileAttachmentPath = objAttachmentList.Item(intAttachment).FileName
								'Download the XML attachment
								objAttachmentList.Item(intAttachment).Load True,""	
								'Create an instance of Xml DOM object	
								Set objXMLDoc = CreateObject("Microsoft.XMLDOM")
								'Set the async property to False
							    objXMLDoc.async = False
							    'Load the xml document
							    objXMLDoc.load(qcXmlFileAttachmentPath)
								'Get the collection of nodes selected
							    Set NodeList = objXMLDoc.documentElement.SelectNodes("//Env")
							    'Check for the number of nodes is >0
								If NodeList.Length > 0 Then															
									'Loop through the nodes 							
								    For nodindex = 0 To NodeList.Length-1
								    	'Assigning empty/null to variables
								    	attributeName= ""
								    	attributeVal= ""
								    	'Assign the name in the node to 'attributeName'
								        attributeName = Trim(NodeList(nodindex).GetAttribute("name"))
								        'Assign the value in the node to 'attributeVal'
								        attributeVal = Trim(NodeList(nodindex).GetAttribute("value"))
										'Check for the attributeName Data Dictionary key							
								        If g_dDictionary.Exists(attributeName) Then
								        	'Store the existing DD value in ExistingConfigVal
								        	ExistingConfigVal = g_dDictionary(attributeName)
								        	'Replace the value in the Data dictionary key value with the value in the Xml node value
								            g_dDictionary(attributeName) = attributeVal
	'							            Report the Done status for Successful replacement of the data dictionary key value
											reporterReportEvent "Done", strReportStepLabel, "Successfully replaced the data dictionary key '"&attributeName&"' value from '"&ExistingConfigVal&"' to: '"&attributeVal&"'"
										'Check for the attributeName and the attribute value are not equal to null
								        ElseIf attributeName <> "" and attributeVal <> "" Then
								        	'Add the attributeVal to the data dictionary key 'attributeName'
								            ddAddItem attributeName,attributeVal
	'										'Report the status as done for the successful addition of data dictionary key										
											reporterReportEvent "Done", strReportStepLabel, "Successfully added the new data dictionary key '"&attributeName&"' with the value '"&attributeVal&"'"
										Else
											'Report the warning message if name/value has empty/null values
											reporterReportEvent "Warning", strReportStepLabel, "The node has empty/null value in either name or value attribute."
								        End If
								    Next
							    Else
							    	'Clear the error
							    	err.Clear
							    	'End the Error Handling Scope.
									On Error Goto 0
									'Report the Failed message if there is no node '//Env' in Xml file
							    	reporterReportEvent "Failed", strReportStepLabel, "There is no node '//Env' in Xml file, Please check the attached .XML file in TestSet Folder '"& objCurrentTSFolder.Name&"'."
							    End If							
								
							End If
					Next
					'Store the generated run time error number and error description in variables				
					errNumber = Err.Number
					errDescription = Err.Description						
					'End the Error Handling Scope.
					On Error GoTo 0	
					'Release the Xml DOM object
					Set objXMLDoc = Nothing	
					'Check the value of intNumOfXmlAttachmentFound is 1
					If intNumOfXmlAttachmentFound = 1 Then						
						'Make the blnXmlFileAttachmentFound as True
						blnXmlFileAttachmentFound = True
						'Report done if the xml file is attached to the
						reporterReportEvent "Done", strReportStepLabel, "Xml File with name: '"& objAttachmentList.Item(intAttachmentNumber).Name&"' Found attached to the folder: '"&objCurrentTSFolder.Name&"'."
					End If					
				End If			
					'Set the parent folder as Current folder
					Set objCurrentTSFolder = objCurrentTSFolder.Father				
			Loop
			'Check the value of blnXmlFileAttachmentFound variable
			If Not blnXmlFileAttachmentFound Then				
				'Report the Warning message if the XML file is not attached to test set folder.
				reporterReportEvent "Warning", strReportStepLabel,"XML file Attachment is not found in TestSet Folder (QC Test Lab Module). The script executes as per the values in the configuration test data sheet."
			End If
			'Verify an error occurence
			If errNumber <> 0 Then
				'Report the Failed message if an error occurs and Failed to get the values from XML file Attachment in TestSet Folder
				reporterReportEvent "Failed", strReportStepLabel,"Failed to get the values from XML file Attachment in TestSet Folder due to the error: '"&errDescription&"'"				
			End If
		End if
		'END CODE MODIFICATION
		'#####################################################################################
End Sub


'#########################################################################################################
' NAME:  qcGetURLFromParentTSFolder
' PURPOSE:  Retrieves the contents of a URL file attached to the current TestSet Folder or a TestSet Parent Folder
'					  and stores the contents to the data dictionary with a key name 'URL'
' PARAMETERS:
'		INPUT      :		
'				None	
'	  OUTPUT :
'          URL : Data Dictionary key contains the contents of  the URL file attached to the current TestSet Folder or a TestSet Parent Folder.
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
' Ravi Mishra        29/08/2012                 NEW
' Varun V				06/09/2014					Modified the code to add the URL to the data dictionary.
'########################################################################################################
'CODE MODIFICATION
	'06/09/2014 Varun V		Modified the code to add the URL to the data dictionary.
'##Private Function qc_GetURLFromParentTSFolder
'Modified the function call from Function to Sub
Private Sub qcGetURLFromParentTSFolder
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################		
			Dim objCurrentTSFolder			  ' (Object) TSFolder currently in focus				
			Dim objAttachmentFactory		 ' (Object) TSFolder Attachment Factory					
			Dim objAttachmentList				' (Object) List of Attachments in the TSFolder	
			Dim blnTypeUrlFileFound 		  '	(Boolean) Status of the URL file existance
			Dim intAttachment						'(Integer) Loop iteration value
			Dim intNumberOfURLFound		  '(Integer)Number of url file found
			Dim intAttachmentNumber			  '(Integer)Attachment number contains url file
			Dim strReportStepLabel  	 		' (String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "QC Library --> qcGetURLFromParentTSFolder"
				intNumberOfURLFound = 0
	 ' END PREREQUISITE CODE
	 ' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	 ' ###############################################################
		'Component doen't returns any value,so no need to set the component as nothing
		'##Set qcu_GetURLFromParentTSFolder = Nothing
		'##if qcu_IsCurrentRun then
		'Changed the function name from qcu_IsCurrentRun to qcIsCurrentRun
		If qcIsCurrentRun then
			'Start with Current TSFolder
			'##Set CurrentTSFolder = qcu_GetCurrentTSFolder
			'Changed the function name from qcu_GetCurrentTSFolder to qcGetCurrentTSFolder
			Set objCurrentTSFolder = qcGetCurrentTSFolder
			'Assign the blnTypeUrlFileFound variable as false
			blnTypeUrlFileFound = False
			 'If using QCUtil you can pass in the qcu_GetCurrentTSFolder out
			 '##Do Until blnTypeUrlFileFound = True
			 'Added one more Boolean condition to exit from loop if CurrentTSFolder.Name = "Root"
			 Do Until blnTypeUrlFileFound OR objCurrentTSFolder.Name = "Root"
				'Get Attachment Factory of Current TSFolder in Focus
				Set objAttachmentFactory = objCurrentTSFolder.Attachments
				'Filter Attachment List by URL file types
				Set objAttachmentList = objAttachmentFactory.NewList("")
				'Check the number of attachment not equal to 0
				If objAttachmentList.Count <> 0 then
					'Below are the Modification
						'1) Added one for loop to check the attachment type
						'2) Changed the inbuilt reporter function with the component reporterReportEvent and the message description.
						'3) Instead of return to the components, URL file description will be stored in the dd with a key "URL"
						'##if AttachmentList.Count = 1 then
						'##qc_GetURLFromParentTSFolder =AttachmentList.Item(1).Description
						'##Reporter.ReportEvent micDone,"QC Library-->qc_GetURLFromParentTSFolder", _
						'"URL File ("& Item.Description &") Found."
					'##Else
						'##Reporter.ReportEvent micFail,"QC Library-->qc_GetURLFromParentTSFolder", _
						'"More than one URL file was found.  Please remove unneeded URL files from the ", _
						'"Test Set Folder's Attachments tab and execute the script again."
						'##ExitTest
					'##End if
				'##Else
					'If Not Found Navigate to the Parent Folder.  Stop once the Root folder is searched.
					'##If TypeURLFileFound = False And Not CurrentTSFolder.Name = "Root" Then
					'##Set CurrentTSFolder = CurrentTSFolder.Father
				'##End if			
					'For loop to cheek the attachments extension
					For intAttachment = 1 to objAttachmentList.Count					
							'Verify that the obtained file is URL
							If Lcase(Right(objAttachmentList.Item(intAttachment).Name,4))=".url" Then
								'Increment the variable intNumberOfURLFound by 1
								intNumberOfURLFound = intNumberOfURLFound + 1
								'Assign the current intAttachment value to a variable intAttachmentNumber
								intAttachmentNumber = intAttachment
								'Check the value intNumberOfURLFound is greater than 1,report fail
								If intNumberOfURLFound > 1 Then reporterReportEvent "Failed", strReportStepLabel, "More than one URL file was found attached to the folder: '"& objCurrentTSFolder.Name&"' .Please remove "&_
																										"Unnecessary URL files from the Test Set Folder's Attachments tab and execute the script again."
							End If
					Next
					'Check the value of intNumberOfURLFound is 1
					If intNumberOfURLFound = 1 Then
						'Add the obtained description of the URL attachment to the DD with a key name "URL"
						ddAddItem "URL",objAttachmentList.Item(intAttachmentNumber).Description
						'Make the TypeUrlFileFound as True
						blnTypeUrlFileFound = True
						'Report done if the url file description added to the dd with a key URL
						reporterReportEvent "Done", strReportStepLabel, "URL File having description: '"& ddGetItem("URL")&"' Found attached to the folder: '"&objCurrentTSFolder.Name&"'."
					End If					
				End If
					'Set the parent folder as Current folder
					Set objCurrentTSFolder = objCurrentTSFolder.Father	
			Loop
			'Check the value of blnTypeUrlFileFound variable
			If Not blnTypeUrlFileFound Then
				'##Reporter.ReportEvent micFail,"QC Library-->qcGetURLFromParentTSFolder", _
				'"URL File NOT Found in TestSetTest Path (QC Test Lab Module).  Please add a URL to the Test Set Folder's Attachments tab ", _
				'"(typically the envrionment folder) and execute the script again. " ,_
				'"Please reference the Automation User Guide for more information on URL Files."
				'##ExitTest
				'Changed the inbuilt reporter function with the component reporterReportEvent and the message description also
				reporterReportEvent "Failed", strReportStepLabel,"URL File NOT Found in TestSet Test Path (QC Test Lab Module).  Please add a URL File to the Test Set "&_
																							"Folder's Attachments tab and execute the script again."
			End If
		End if
		'END CODE MODIFICATION
		'#####################################################################################
End Sub


'############################################################################################
' NAME:  qcIsCurrentRun
' PURPOSE:  Verify the connection between QTP and QC using QCUtil
' PARAMETERS:
'		INPUT		:
'					None	
'	   OUTPUT :
'				qcIsCurrentRun : Returns the  boolen value
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Ravi Mishra         29/08/2012                NEW
'############################################################################################
Private Function qcIsCurrentRun()
	'Initialize the function to boolean value 'False'
	qcIsCurrentRun= False
	'Verify  QC connection is established properly
	If QCUtil.IsConnected Then
		'Report the status as Pass with description
		reporterReportEvent "Passed","QC Library-->qcIsCurrentRun","QTP and QC Connection found"
		'If QC connections is established then set the Function to boolean value 'True'
		qcIsCurrentRun= True
	Else
		'Report the status as failed with description
		reporterReportEvent "Failed","QC Library-->qcIsCurrentRun", "QTP and QC Connection not found. Ensure the test being executed is connected to a Quality Center instance."
	End If
End Function


'###################################################################################################################################
'NAME :  qtpActionImport
' PURPOSE: To copy(import) the data from the  scripts action (template) sheet("Example:Action1") to all the called external action (template) sheets .
'PARAMETERS:
'		INPUT: None			
'		OUTPUT:None			
'HISTORY
'NAME:					    	DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Manjunath L M     08/02/2013					NEW
' Manjunath L M		 02/26/2014				Modified to get the sheet index inplace of sheet name and include xlCloseAllExcelFile
'Lakshman Kumar A.H.     14/03/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'###################################################################################################################################
Private Sub qtpActionImport
'  ##############################################################
	' CODE MODIFICATION
	' 02/26/2014  Manjunath Modified to get the sheet index inplace of sheet name
	    ' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		Dim strLocatedFilePath 'String that contains the located file path for the default file
		Dim intDefaultSheetIndex  'Integer that contain the sheet index which will be imported to all the sheets in datatable
		Dim intActionCount   'Integer that contString that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
Dim strReportStepLabel   'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		strReportStepLabel="QTP Library--->qtpActionImport"
		'Call xlGetWorkbookName to get the work book name from which the data will be copied to all the called external templates(actions) .
		FilePath=xlGetWorkbookName( "" )
		'Locate the file path
		strLocatedFilePath=PathFinder.Locate(FilePath)
		'Check that we are having some file path
		If strLocatedFilePath <> "" Then
			'Call xlGetWorksheetName to get the work sheet name from which the data will be copied to all the called external templates(actions) .
			'##SheetName=xlGetWorksheetName( "",FilePath,"" )	
			intDefaultSheetIndex = Cint(xlGetWorksheetName( "",strLocatedFilePath,"" ))
			'Call below component to close Excel files if opened previously
			xlCloseAllExcelFile
			' "On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			'Clear Error
			Err.Clear
			'Get the Quick Test Object	
			Set objQTP=GetObject("","QuickTest.Application")
			'Get the count of the actions (template)
			intActionCount=objQTP.Test.Actions.Count
			'Iterate through all the action except the local internal action
			For intActionIndex=1 to intActionCount
					'Get the action name for which the internal action (template) to be copied
					strActionName=objQTP.Test.Actions.Item(intActionIndex).Name
					''##Check the action name is not internal script action
					'##If  Instr(1,strActionName,SheetName)=0 Then
						'Copy the internal action (template) to external action (template) sheet
'##DataTable.ImportSheet FilePath,SheetName,strActionName
						DataTable.ImportSheet strLocatedFilePath,intDefaultSheetIndex,strActionName
					'##End If					
			Next
		'END CODE MODIFICATION
		'######################################
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Verify error occurance
			If errNumber =0 Then
				'Report as done as there was no error occured  while performing  copy(import) on the external action(template) sheets
				reporterReportEvent "Done", strReportStepLabel , "Copy(import) the data from the  scripts action (template) sheet to all the called external action (template) sheets completed successfully"
			Else
				'##Err.Clear
				'##On Error Goto 0
				'Report as failed as there was error occured  while performing  copy(import) on the external action(template) sheets
				reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform copy(import) on the external action(template) sheets "&Chr(13) &"Reason: "& errDescription
			End If
		Else
			'Report as failed as there is no file path obtained
			reporterReportEvent "Failed", strReportStepLabel ,"Please re-check the default sheet path of the script and re-run"
		End If
End Sub


'############################################################################
' NAME: qtpExitTest
' PURPOSE: Exits the entire QuickTest test , Regardless of the run-time iteration settings.
'PARAMETERS:
'		INPUT 		:
'					None
'		OUTPUT :
'					 None
'HISTORY
'NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
' Sunil G					10/01/2013					NEW
'Manjunath L M     				19/07/2013				Modified to handle the TestStop status sholud not be displayed in TestResults
' Varun V					09/04/2013				Changed the Stop to Close method to get the quality center script status updated.
'Lakshman Kumar A.H.     21/02/2014					Used QTP Utility object 'ExitTest' to close the Test instead the QTP object. Called the component 'webCloseAllBrowsers' to
'																					close all the opened browsers before stopping the Test Execution.
'############################################################################
Private Sub qtpExitTest()
'##############################################################
		'CODE MODIFICATION
				'##Set the Test Results not to display anything(This is done to handle Window's run time error)
				'##Reporter.Filter=rfDisableAll 'No events are displayed in the Test Results.
				'##Disable error handling if you have previously enabled.
				'##On Error Goto 0
				'##Get the Quick Test Object
				'##Set objQTP=GetObject("","QuickTest.Application")
				'##############################################################
				'##CODE MODIFICATION
				'##09/04/2013 Varun V  Changed the Stop to Close method to get the quality center script status updated.
				'##Stop the current test execution
				'##objQTP.Test.Stop
				'## objQTP.Test.Close
				'##END CODE MODIFICATION
				'##############################################################
			webCloseAllBrowsers
			ExitTest
		'END CODE MODIFICATION
	'##############################################################

End Sub


'###########################################################
' NAME: qtpGetCurrentActionIteration
' PURPOSE: Return the current test Action iteration
'PARAMETERS:
'		INPUT 		:
'					None
'		OUTPUT :
'					 Integer value containing the current iteration of the test action.
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Manjunath L M	07/26/2013				NEW
'###########################################################
Private Function qtpGetCurrentActionIteration() ' As integer
'To get the current test action iteration
	qtpGetCurrentActionIteration = Environment("ActionIteration")
End Function


'###########################################################
' NAME: qtpGetCurrentIteration
' PURPOSE: Return the current test iteration
'PARAMETERS:
'		INPUT 		:
'					None
'		OUTPUT :
'					 Integer value containing the current iteration of the test.
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  C.MCMILLAN		22/08/2012				NEW
'###########################################################
Private Function qtpGetCurrentIteration() ' As integer
'To get the current test iteration
	qtpGetCurrentIteration = Environment("TestIteration")
End Function


'############################################################################
' NAME: qtpMinimize
' PURPOSE: Minimizes the QuickTest Professional window .
'PARAMETERS:
'		INPUT 		: None
'		OUTPUT   : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
' Manjunath L M	  07/05/2013			NEW
'############################################################################
Private Sub qtpMinimize()
	'Get the Quick Test Object
	Set objQTP=GetObject("","QuickTest.Application")
	'Minimize the QuickTest window
	objQTP.WindowState = "Minimized"
End Sub


'##########################################################################################################
'NAME: reporterReportEvent
'PURPOSE: Reports the step label with detailed description to the Test Reporter, if QTP object is present
'PARAMETERS:
'		INPUT:
'				TestStatus - String that contains the status of the running test.  The user has
'										the ability to manually set the test to pass/fail.  Default is micDone.
'				StepLabel - String that contains short name of the step being reported
'				StepDescription - String that contains the long name of the step being reported.
											'**Note if the Test status is failed then execution of the Test is stopped at that step hence exittest is used
'		OUTPUT: None
'HISTORY
'NAME:						DATE:					PURPOSE
'--------------------------------------------------------------------------------------------------------------
'C.MCMILLAN          08/20/2012					NEW
'Manjunath 	     	   07/05/2013			Modified to report the screen capture of application for a failed step
'Manjunath             07/19/2013			Modified to remove the web browser maximize component
'Narasinha			  09/30/2013		Modified to skip the reporting code execution in case QTP object is not present and for verifing g_CurrentBrowser object.
'Varun V				03/28/2014			Replaced IsObject logic	with Is Nothing logic
'##########################################################################################################
Sub reporterReportEvent(TestStatus, StepLabel, StepDescription )
'#################################################################
'CODE MODIFICATION
	'‘09/30/2013  Narasinha  MODIFIED TO  SKIP REPORTING  CODE EXECUTION IN CASE QTP OBJECT IS NOT PRESENT.
	'‘Get the QTP Object
	Set qtpApp = GetObject("","QuickTest.Application")
	If qtpApp.Launched =True Then
		Select Case Ucase(Trim(TestStatus))
		Case "PASS", "PASSED", "MICPASS"
			'MICPASS meaning : The status of this step to be passed and sends the specified message to the Test Results window
			Reporter.ReportEvent micPass, StepLabel, StepDescription 		
		Case "FAIL", "FAILED", "MICFAIL"
			'Call below component to minimizes the running QuickTest Professional window .
			qtpMinimize
			'#################################################################
			'CODE MODIFICATION
			'‘09/30/2013  Narasinha Added condition to verify the existence of g_CurrentBrowser object .	
			'03/28/2014		Varun V		Replaced IsObject logic	with Is Nothing
			'##If IsObject(g_CurrentBrowser)  Then			
			If Not g_CurrentBrowser Is Nothing Then			
				'Saves a screen capture of the script running Browser as a ReportScreenImageFailed.png
				g_CurrentBrowser.CaptureBitmap "ReportScreenImageFailed.png",True
			Else
				'Saves a screen capture of the script running desktop as a ReportScreenImageFailed.png
				Desktop.CaptureBitmap "ReportScreenImageFailed.png",True
			End If
			'END  CODE MODIFICATION
			'#####################
			'MICFAIL meaning : The status of this step to be failed and sends the specified message to the Test Results window. When this step runs, the test fails.
			Reporter.ReportEvent micFail, StepLabel, StepDescription ,"ReportScreenImageFailed.png"
			'if the Test status is failed then execution of the test is stopped
			qtpExitTest
		Case "WARNING","MICWARNING"
			'MICWARNING meaning : Sends a warning message to the Test Results window, but does not cause the test to stop running, and does not affect the pass/fail status of the test.
			Reporter.ReportEvent micWarning, StepLabel, StepDescription 	
		Case "INFO","MICINFO"
			'MICINFO meaning : sends the user defined message into test result.
			Reporter.ReportEvent micInfo, StepLabel, StepDescription 	
		Case Else
			'MICDONE meaning : Sends a message to the Test Results window without affecting the pass/fail status of the test.
			Reporter.ReportEvent micDone, StepLabel, StepDescription
		End Select
End If
Set qtpApp = Nothing
'END  CODE MODIFICATION
'#####################
End Sub


'###################################################################################################################################
' NAME:  SendKeyStrokesIntoScreen
' PURPOSE:  To perform the SendKey operation on the screen.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			ddKey : Key value to perform operation on the screen.
'
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Vani S						06/27/2018				   	   NEW
'###################################################################################################################################
Function SendKeyStrokesIntoScreen(ScreenName_ObjectName,ddKey)
	'PREREQUISITE CODE
'Declarations
'##############################################################
Dim strKey 'String that contains the keystroke or string of keystrokes
	strReportStepLabel = "Mainframe Library--->SendKeyStrokesIntoScreen"
	'END PREREQUISITE CODE
'**************************	
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
	'Get the input parameter ddKey from the data dictionary
	strKey=trim(ddGetItem(ddKey))
	If ScreenName_ObjectName <> "" and strKey <> "" Then		
		'call getObjectWithHierarchy to get the properties for the object supplied in ScreenName_ObjectName
		Set objScreen = getObjectWithHierarchy(ScreenName_ObjectName)
		If objScreen.Exist Then
			'## Initialize Error Handling	
			'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error			
			On Error Resume Next
			'Clear the error.
			Err.Clear
			'perform sendKey operation on the screen
			objScreen.SendKey strKey			
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Verify for the error occurance and report the status accordingly			
			If errNumber = 0 Then
				'Report as passed as there was no error occured  while performing specified operation on  object
				reporterReportEvent "Passed", strReportStepLabel , "The required keystroke/keystrokes '"&strKey&"' are sent into the screen successfully : " &ScreenName_ObjectName
				
			Else
				'Report the status as Failed and error description
				reporterReportEvent "Failed", strReportStepLabel ,"Failed to send the keystroke/keystrokes '"&strKey&"' into the screen "&ScreenName_ObjectName&Chr(13) &" with reason: " & errDescription & ". If problem persists then contact automation team."
			End If
		Else
			'Report the status Failed as object does not exist
	reporterReportEvent "Failed",strReportStepLabel, "The given object "&ScreenName_ObjectName &" does not exists.Please specify the valid properties and values in the object repository."         	
		End If		
	Else
		'Report the Failed status as 'ScreenName_ObjectName' value is empty
reporterReportEvent "Failed",strReportStepLabel, "ScreenName_ObjectName and ddKey are mandatory parameters and cannot be empty. Please provide the valid values in ScreenName_ObjectName and ddKey parameters."
		
	End If	
	'END FUNCTION IMPLEMENTATION
'###############################################################
End Function


'###################################################################################################################################
'NAME :  setBrowserType
' PURPOSE: To set the Browser type on which the application should run.
'PARAMETERS:
'		INPUT: None			
'		OUTPUT:None			
'HISTORY
'NAME:					    	DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
' Vani S    					02/01/2019				NEW
' Udayakumar Reddy			09/07/2020				Modified the code to support MS Edge Chromium browser
' Jayarami Reddy				06/20/2022				IE11 retirement - Phase1, removed feature of UFT Framework defaulting to browser type as ie
'Jayarami Reddy				09/01/2022				IE11 retirement - Phase2, removed feature of UFT Framework browser type as 'ie' and set default browser as 'msedge'
'Sushmashree					12/01/2022				As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'###################################################################################################################################	
Private Sub setBrowserType()
	'PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	'Assign component name with Library name to strReportStepLabel
	strReportStepLabel = "Master Library --->setBrowserType"
	'END PREREQUISITE CODE
	'**************************
	
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	'#############################################################################
	'CODE MODIFICATION
	'Jayarami Reddy 	06/20/2022			Commented below code because as apart of Phase 1, if Browser_Type dictionary key does not exist we are setting null value
	'Jayarami Reddy	09/01/2022			As a part of Phase 2, add browser type as msedge if browser type dictionary not exist
	'If the Browser_Type dictionary key does not exist
	If Not(g_dDictionary.Exists("Browser_Type")) Then
		'Add msedge as the value to the Browser_Type dictionary key.
		ddAddItem "Browser_Type","msedge"
	End If
	'END  CODE MODIFICATION
	'#############################################################################
	
	'Verify for the non empty value in Browser_Type
	If Trim(g_dDictionary("Browser_Type")) <> "" Then
		'Get the Browser Type	
		g_BrowserType = lcase(ddGetItem("Browser_Type"))
	Else
	'#############################################################################
	'CODE MODIFICATION
	'Jayarami Reddy 	06/20/2022		As a part of Phase 1, if Browser_Type dictionary key has no value, we are going set null value for Browser_Type
	'Jayarami Reddy 	09/01/2022		As a part of Phase 2, set default browser as msedge
		'Set msedge as the default Browser Type
		g_BrowserType = "msedge"
	End If
	'END  CODE MODIFICATION
	'#############################################################################	
	
	'#############################################################################
	'CODE MODIFICATION
	'Udayakumar 09/07/2020			This modification is implemented to support MS Edge Chromium browser	

	'#############################################################################
	'CODE MODIFICATION
	'Jayarami Reddy 	06/20/2022		If Browser_Type dictionary key has no value or  Browser_Type does not contain value 
	'ie/Chrome/firefox/msedge, fail the script execution with explanation in error message related to IE11 retirement.
	
	'#############################################################################
	'CODE MODIFICATION
	'Jayarami Reddy 	09/01/2022		If Browser_Type value as 'ie', fail the script execution in error message related to IE11 retirement
	
	'Verify if 'g_BrowserType' value is Chrome/firefox/msedge
	If  g_BrowserType = "firefox" or g_BrowserType = "chrome" or g_BrowserType = "msedge" Then
		'Report the status as Passed if 'g_BrowserType' is valid
		reporterReportEvent "Passed",strReportStepLabel,"The browser '"&g_BrowserType&"' is set successfully."
	'Verify if 'g_BrowserType' value is ie
	ElseIf g_BrowserType = "ie" Then
		'Report the status as fail if 'g_BrowserType' value is ie
		reporterReportEvent "Failed",strReportStepLabel,"Invalid Browser Type '" & g_BrowserType & "' is provided."
	
	'END  CODE MODIFICATION
	'#############################################################################
	Else
		'Report the status as Failed if 'g_BrowserType' is other than Chrome/firefox/msedge
		reporterReportEvent "Failed",strReportStepLabel,"Invalid Browser Type '" & g_BrowserType & "' is provided. Please provide the valid Browser Type."
	End If		
	'END  CODE MODIFICATION
	'#############################################################################
	
	'END  CODE MODIFICATION
	'#############################################################################
End Sub


'###################################################################################################################################
'NAME :  setObjectRepositoryTableName
' PURPOSE: To set the required Object Repository Table name.
'PARAMETERS:
'		INPUT: None			
'		OUTPUT:None			
'HISTORY
'NAME:					    	DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
' Vani S    					02/01/2019				NEW
'Udayakumar 				09/07/2020				Modified the code to support MS Edge Chromium browser
'Jayarami Reddy			10/03/2022       	 		As part of IE Retirement_Phase3A, Commented out the "ie" related code
														'and Earlier IE has set to default browser, but as part of IE Retirement_Phase3A, 
														'now we are setting the table name without preceding "MSEdge_"
'Sushmashree				12/01/2022				As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'###################################################################################################################################

Private Sub setObjectRepositoryTableName()
	'PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	'Assign component name with Library name to strReportStepLabel
	strReportStepLabel = "Data Library --->setObjectRepositoryTableName"
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	'Verify for the non existence of dictionary key IsDifferent_ObjectRepository
	If Not(g_dDictionary.Exists("IsDifferent_ObjectRepository")) Then
		'Add the value 'no' to the dictionary key IsDifferent_ObjectRepository	
		ddAddItem "IsDifferent_ObjectRepository","no"
	End If
	'check if different object repositories are maintained
	If lcase(ddGetItem("IsDifferent_ObjectRepository")) = "yes" Then
		'Check if the browser type is 'Chrome'	
		If g_BrowserType = "chrome" Then
			'Set the table name for chrome browser type
			g_strObjRepositoryTableName = "Chrome_"&ddGetItem("Object_Repository_dbTableName")
		'Check if the browser type is 'Firefox'				
		ElseIf g_BrowserType = "firefox" Then
			'Set the table name for Firefox browser type
			g_strObjRepositoryTableName = "Firefox_"&ddGetItem("Object_Repository_dbTableName")
		'#############################################################################
		'CODE MODIFICATION
		'Udayakumar 	09/07/2020			This modification is implemented to support MS Edge Chromium browser
		'Check if the browser type is 'msedge'	
		ElseIf g_BrowserType = "msedge" Then
			'#############################################################################
			'CODE MODIFICATION
			'Jayarami Reddy            10/03/2022 		As part of IE Retirement_Phase3A, Commented out the "ie" related code
														'and Earlier IE has set to default browser, but as part of IE Retirement_Phase3A, 
														'now we are setting the table name without preceding "MSEdge_"
			'Set the table name for Msedge browser type
			g_strObjRepositoryTableName = ddGetItem("Object_Repository_dbTableName")
			'END  CODE MODIFICATION
			'#############################################################################
		'END  CODE MODIFICATION
		'################################################################################
		End If	
	Else
		'Set the table name If IsDifferent_ObjectRepository is anything other than 'Yes'
		g_strObjRepositoryTableName = ddGetItem("Object_Repository_dbTableName")
	End If	
	'Report the status as Passed if 'g_strObjRepositoryTableName' is valid
	reporterReportEvent "Done",strReportStepLabel,"The Object Repository with the table name '"&g_strObjRepositoryTableName&"' is set successfully and the Browser Type is '"&g_BrowserType&"'"
End Sub


'###################################################################################################################################
' NAME:  setSecureTextInField
' PURPOSE:  To set encrypted text in to the EditBox (Textbox).
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			InputValue : Text that contains encrypted value to enter in the edit field
'           Note* : To convert the value into encrypted value there are 2 ways to convert
'                 1) Using Password Encoder utility (Start > All Programs > HP Software > Unified Functional Testing > Tools > Password Encoder). Provide the value and generate the encrypted value.
'                 2) Parameterize the argument using a Data Table pararmeter and use the Data Table encryption option (right-click each unencrypted value in the password column and choose Data > Encrypt).
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Shambhavi Pawar						04/06/2018				   	   NEW
'###################################################################################################################################
Sub setSecureTextInField(ScreenName_ObjectName,InputText)

'PREREQUISITE CODE
'1) Declarations
'##############################################################
Dim InputValue  'String that  contains input value  of the object
strReportStepLabel = "Master Library--->setSecureTextInField"
'##'2) Initialize Error Handling
'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'## On Error Resume Next
'##'Clear Error
'##Err.Clear
'END PREREQUISITE CODE
'**************************	
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
	 'Get 'InputText' from data dictionary and assign to the variable ‘inputValue’
inputValue=ddGetItem(InputText)
'Verify if ScreenName_ObjectName is not empty
If Trim(ScreenName_ObjectName)<>"" Then
	            'Get the 'ScreenName_ObjectName' from object repository
	            set textField=getObjectWithHierarchy(ScreenName_ObjectName)
	               	
				'Verify if object exists
	             If textField.Exist Then	
					'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
					 On Error Resume Next
					'Clear Error
					 Err.Clear	
		            'SetSecure the encrypted input value in Edit field
		            textField.SetSecure Trim(inputValue)                            		             			
		           'Store the generated run time error number and error description in variables.
		            errNumber = Err.Number
		            errDescription = Err.Description
		            'Clear the error.
		            Err.Clear
		            'Ends the Error Handling Scope.
		            On Error GoTo 0    		
		            'Verify if encrypted input value is not set in Edit field
		            If errNumber <>0 Then            	
	                	'Report the status Failed as unable to set the encrypted input value in edit field
	                	 reporterReportEvent "Failed",strReportStepLabel,"Failed to enter the encrypted value" & chr(34) & inputValue & chr(34) & " in the text field."		
		            Else
	'            	     Report as passed as the encrypted input value entered successfully in the edit field.
	                    reporterReportEvent "Passed",strReportStepLabel,"The given InputText" & chr(34) & inputValue & chr(34) & "encypted value is entered successfully in the text field."                                        		
		             End If	
			  Else 							
		'Report the status Failed as object does not exist
		reporterReportEvent "Failed",strReportStepLabel, "The given object "&ScreenName_ObjectName &" does not exists in the available page.Please specify valid property and value in the object repository."         	
			  End If			
	     Else
'Report the status Failed as'ScreenName_ObjectName' value is empty
reporterReportEvent "Failed",strReportStepLabel, "ScreenName_ObjectName is a mandatory parameter and cannot be empty .So please enter a valid ScreenName_ObjectName."
End If
End Sub


'#########################################################################################################################################
' NAME:  setTextInField
' PURPOSE:  To enter the text in to an EditBox (Textbox).
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			InputValue : Text to be entered in the edit field.
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Shambhavi Pawar						06/13/2018				   	   NEW
'#######################################################################################################################################

Sub setTextInField(ScreenName_ObjectName,InputText)
'PREREQUISITE CODE
'1) Declarations
'##############################################################
Dim InputValue  'String that  contains input value  of the object
strReportStepLabel = "Master Library--->setTextInField"
'##'2) Initialize Error Handling
'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
'    On Error Resume Next
'##'Clear Error
'##Err.Clear
'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################

'Get 'InputText' from data dictionary
InputValue=ddGetItem(InputText)
'Verify if ScreenName_ObjectName is not empty
If Trim(ScreenName_ObjectName)<>"" Then
'Get the 'ScreenName_ObjectName' from object repository using ‘getObjectWithHierarchy’
set textField=getObjectWithHierarchy(ScreenName_ObjectName)
			'Verify if object exists
If textField.Exist Then
					'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
					 On Error Resume Next
					'Clear Error
					 Err.Clear
		            'Set the input value in Edit field
		            textField.Set Trim(InputValue) 		
		           'Store the generated run time error number and error description in variables.
		            errNumber = Err.Number
		            errDescription = Err.Description
		            'Clear the error.
		            Err.Clear
		            'Ends the Error Handling Scope.
		            On Error GoTo 0 		
		            'Verify if input value is not set in Edit field
		            If errNumber <>0 Then            		
		                	'Report the status Failed for unable to set the input value in edit field
		                	 reporterReportEvent "Failed",strReportStepLabel,"Failed to enter the " & chr(34) & InputValue & chr(34) & " in the text field."
		            Else
		            		'Report as passed as the given input value is successfully entered in edit field
		                    reporterReportEvent "Passed",strReportStepLabel,"The given InputText" & chr(34) & InputValue & chr(34) & " is entered successfully in the text field."	
		             End If
Else
		'Report the status Failed as object does not exist
		reporterReportEvent "Failed",strReportStepLabel, "The given object "& ScreenName_ObjectName& " does not exists in the available page.Please specify valid properties and values in the object repository"
			 End If 			
Else
'Report the status as Failed for passing 'ScreenName_ObjectName' value is empty
reporterReportEvent "Failed",strReportStepLabel, "ScreenName_ObjectName is a mandatory parameter and cannot be empty .So please enter a valid ScreenName_ObjectName ."
End If
End Sub


'#########################################################################################
' NAME:  sqlserverdb
' PURPOSE: The sqlserverdb class will provide the data library methods for interacting with SQL Server databases.
'HISTORY
'    NAME:                            DATE:                    PURPOSE
'-----------------------------------------------------------------------------------------------------
'Venkateswarlu v                     08/16/2017        NEW
'#########################################################################################
'''Calss updated
Class sqlserverdb
' PREREQUISITE CODE
' Declarations
Dim SqlobjConnection ' Object that contains the SQL Server object instance
Dim errNumber ' Contains Error Number
Dim errDescription  ' Contains Error description
Dim strReportStepLabel   ' String that contains the step label for the reports (StepLabel consist of LibraryName---->ComponentName)
Dim strSqlProvider   'string that contains the provider for SQL Server database
'Class_Initialize Is fired whenever the class object is instantiates
Private Sub Class_Initialize()
End Sub
'Class_Terminate when the object goes out of scope or object is set to nothing
Private Sub Class_Terminate()
End Sub
' NAME:  ConnectToDataSource
' PURPOSE:  To establish new connection to SQL Server database
' PARAMETERS:
'       INPUT:
'            DbName: String that contains the Db Name used to identify the db in the Dictionary.
'*****************
'Inputs by global data

'                    DbName "_DSN    : DD Reference that contains the SQL Server database DSN
'							 DbName "_Schema    : DD Reference that contains the SQL Server database
'*****************
'       OUTPUT: None
'HISTORY
'NAME:                                    DATE:                PURPOSE
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
'venkateswarlu v                         08/18/2017                      NEW
'#########################################################################################
Sub ConnectToDataSource(DbName)
' PREREQUISITE CODE
' 1) Declarations
Dim strConnectionString 'String that contains the Connection String [Provider, DSN, Username, Password]
strReportStepLabel="sqlserverdb Library--->ConnectToDataSource"
' END PREREQUISITE CODE
' **************************
' BEGIN FUNCTION IMPLEMENTATION
' ###############################################################
' 2) Check for the presence SQl Server connection credentials in datadictionary
' 2.1) Test in the data dictionary for the existance of the SQL Server database DSNrname
'            blnDictionaryUsername = g_dDictionary.Exists(DbName &"_Username")
blnDictionaryDSNname = g_dDictionary.Exists(DbName &"_DSN")
' 2.2) Test in the data dictionary for the existance of the SQL Server database Scemaname
'            blnDictionaryPassword = g_dDictionary.Exists(DbName &"_Password")
blnDictionarySchemaname = g_dDictionary.Exists(DbName &"_Schema")
' 3) Check any of the connection credentials parameter is not empty
If blnDictionaryDSNname  And blnDictionarySchemaname Then
' 4) Create Sql Server Connection String
strConnectionString="DSN="&ddGetItem(DbName &"_DSN")&";Schema="&ddGetItem(DbName &"_Schema")&""
'Initialize Error Handling
On Error Resume Next
' Clear Error
Err.Clear
' 5) Create a database object instance
Set SqlobjConnection=CreateObject("ADODB.Connection")
' 6) Attempt to connect to SQL Server database
SqlobjConnection.Open strConnectionString
' 7) Verify the error occurrence, and if any suppress the errors
errNumber=Err.Number
errDescription=Err.Description
On Error GoTo 0
' 7.1) If no errors while opening the Sql Server connection report done
If errNumber=0 Then
reporterReportEvent "Done", strReportStepLabel , "Connection to SQL Server data base is done successfully for given connection "&DbName
' 7.2) if error number is -2147467259, report failed stating that DSN is not valid
ElseIf errNumber="-2147467259" And Instr(1,errDescription,"Data source name")<>0 Then
reporterReportEvent "Failed", strReportStepLabel , "Failed to make SQL Server connection due to invalid 'DSN Name' supplied. Please contact automation team. Please contact automation team"
' 7.3) if error number is -2147467259, report failed stating that contain architecture mismatch.
ElseIf errNumber="-2147467259" And Instr(1,errDescription,"architecture mismatch")Then
'Report Failed if the connection string does not contains the required architecture
reporterReportEvent "Failed", strReportStepLabel, "Failed to connect SQL Server data base due to the specified DSN contains an architecture mismatch between the Driver and Application. Please contact automation team"
Else
'Report the status as Failed and error description
reporterReportEvent "Failed", strReportStepLabel ,"Failed to connect SQL Server data base for given connection "&DbName& Chr(13) &" Reason: "& errDescription &_
"Please contact automation team."
End If
Else
'3) Report the status as Failed if any of the connection credentials is empty
reporterReportEvent "Failed", strReportStepLabel ,"Connection information[DbName_DSN and DbName_Scemaname ] is not found in the Data Dictionary for the DbName: "&DbName&". Please provide the required info and re-run the script."
End If
End Sub
'#########################################################################################
' NAME:  QueryDataSource
' PURPOSE: Query "sqlserver" database and return dataset to the user
' PARAMETERS:
'        INPUT      :
'                sqlQueryStatement : String that contains query statement to be executed on SQL Server database
'       OUTPUT :
'                QueryDataSource : Object that contains the recordset
'HISTORY
'NAME:                                    DATE:                PURPOSE
'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
'venkateswarlu v                        08/18/2017                          NEW
'#########################################################################################
Function QueryDataSource(sqlQueryStatement)
' PREREQUISITE CODE
' 1) Declarations
' ##############################################################
strReportStepLabel="sqlserverdb Library--->QueryDataSource"
' END PREREQUISITE CODE
' **************************
' BEGIN FUNCTION IMPLEMENTATION
' ###############################################################
' 2) Initialize Error Handling
On Error Resume Next
' Clear Error
Err.Clear
' 3) Execute specified sql statement and return the dataset
Set QueryDataSource=SqlobjConnection.Execute(sqlQueryStatement)
' 4) Verify the error occurrence, and if any suppress the errors
errNumber=Err.Number
errDescription=Err.Description
On Error GoTo 0
'4.1) If no errors while executing query in SQL Server connection report done
If errNumber=0 Then
'Report as Done as there was no error occured  while performing query execution
reporterReportEvent "Done" , strReportStepLabel , "The supplied query: "&sqlQueryStatement&" is executed and returned the SQL Server dataset object successfully"
Else
' 4.2) Report the status as Failed and  error description
reporterReportEvent "Failed", strReportStepLabel ,"Failed to execute the query: "&sqlQueryStatement&" in  SQL Server data base due to Reason : "&Chr(13)&errDescription
End If
End Function
End Class


'################################################################################################################################################
'Name :  testCompareValues
' PURPOSE: To compare two values completely or partially.
'PARAMETERS:
'		INPUT :
'			ActualValue:		  Text that contains value to be compared (String,Integer,boolean)
'			Expectedvalue:  	Text that contains value to be compared with Actual value(String,Integer,boolean)
'			IsCompleteMatch:  Boolean value (True or False),
'												*Note: If  the value of the 'IsCompleteMatch' parameter is 'True' then actual and expected value should match completely
'												and if 'IsCompleteMatch' parameter is 'False'  then  it will check partial existance of the value in actual value.
'		OUTPUT : Boolean value
'HISTORY
'		NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'    C.MCMILLAN				12/15/2011				NEW
'    ANIL 						    11/19/2012			     Modified to optimise the code and renamed the appropriate component name
'   Manjunath L M		  03/07/2013               Modified as privatte component
'   Manjunath                 03/11/2013               Modified sub to function by returning a boolean value to component
'################################################################################################################################################
Private Function testCompareValues(ActualValue,Expectedvalue,IsCompleteMatch)
	'Initialize the component to false
	testCompareValues=False
	'The below code compares the expected and actual value completely
	If IsCompleteMatch Then
		If UCase(Trim(ActualValue))=UCase(Trim(Expectedvalue)) Then           			
			'If acutal and expected values equal then reassign component to true
			testCompareValues=True	
		End If
	Else
		'The below code compares the expected and actual value partially
If InStr(1,UCase(Trim(ActualValue)),Ucase(Trim(Expectedvalue)))<>0 Then
			'If acutal and expected values partial match then reassign component to true
			testCompareValues=True
		End If
	End If
End Function


'###################################################################################################################################################
' NAME:  utilCompareValues
' PURPOSE:  To compare two values (Actual and Expected Values) and returns either Passed or Failed.
' PARAMETERS:
'		INPUT
'			ddActualValue->String or Dictionary object( Key) that contains value to be compared
'			ddExpectedvalue->String or Dictionary object( Key) that contains value to be compared with Actual value
'			ddIsCompleteMatch->Boolean value (True or False)
'												*Note: If  the value of the 'ddIsCompleteMatch' parameter is 'True' then actual and expected value should match completely
'												and if 'ddIsCompleteMatch' parameter is 'False'  then  it will check partial existence of the value in actual value.
'           ddVerifyKeyword->String or Dictionary object( Key) that contains value to verify the existence of the values('VerifyExists' or 'VerifyNotExists' or null )
'                                               *Note: If  the value of the 'ddVerifyKeyword' parameter is 'VerifyExists' or null then  actual and expected value match then it reports pass else if values does not match then reports fail
'                                               and if 'ddVerifyKeyword' parameter is 'VerifyNotExists' then actual and expected value match then it reports fail else if value does not match then reports pass
'                                               *Note: 'ddVerifyKeyword' parameter is case insensitive
'		OUTPUT :
'			N/A
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Surendra						30/1/2017					NEW
'###################################################################################################################################################

Function utilCompareValues(ddActualValue,ddExpectedvalue,ddIsCompleteMatch,ddVerifyKeyword)
		'Get the reference value from data dictionary for the parameter ddActualValue
		strActualValue=ddGetItem(ddActualValue)
		'Get the reference value from data dictionary for the parameter ddExpectedvalue
		strExpectedValue=ddGetItem(ddExpectedvalue)
		'Get the reference value from data dictionary for the parameter ddIsCompleteMatch
		blnIsCompleteMatch=ddGetItem(ddIsCompleteMatch)
		'verify if the blnIsCompleteMatch is boolean value or not
		If VarType(blnIsCompleteMatch)<>11 Then
		reporterReportEvent "Failed","Utility Library ---> utilCompareValues","Please provide valid boolean value(True/False) in ddIsCompleteMatch[value:"""&blnIsCompleteMatch&"""]"
		Exit Function
		End If

		'Get the reference value from data dictionary for the parameter ddVerifyKeyword
		strVerifyKeyword=ddGetItem(ddVerifyKeyword)		
		'Call below component to compare the actual value and expected value are equal and assign return value to variable
		blnCompareResult=testCompareValues(strActualValue,strExpectedValue,blnIsCompleteMatch)
		'verify if the strVerifyKeyword value is "VerifyExists" or null 	
		If trim(lcase(strVerifyKeyword))="verifyexists" or len(trim(strVerifyKeyword))=0  Then
			
				'Verify the boolean value is true/false
				If blnCompareResult Then
					'Report the status as pass if Expected and Actual value are equal(when ddVerifyKeyword=â€VerifyExistsâ€) then
					reporterReportEvent "Passed","Utility Library ---> utilCompareValues","Expected and Actual values are equal, ddExpectedvalue value is: "&strExpectedvalue &Chr(13) &" ddActualValue value is: "&strActualValue
				Else
					'Report the status as fail if Expected and Actual value are not equal(when ddVerifyKeyword=â€VerifyExistsâ€) then
					reporterReportEvent "Failed","Utility Library ---> utilCompareValues","Expected and Actual value are not equal, ddExpectedvalue value is: "&strExpectedValue &Chr(13) &" ddActualValue value is: "&strActualValue
				End If
		ElseIf trim(lcase(strVerifyKeyword))="verifynotexists" Then
				'Verify the boolean value is true/false
				If blnCompareResult Then
					'Report the status as fail if Expected and Actual value are equal (when ddVerifyKeyword=â€ VerifyNotExistsâ€)then
					reporterReportEvent "Failed","Utility Library ---> utilCompareValues","Expected and Actual values are equal, ddExpectedvalue value is: "&strExpectedvalue &Chr(13) &" ddActualValue value is: "&strActualValue
				Else
					'Report the status as pass if Expected and Actual value are not equal (when ddVerifyKeyword=â€ VerifyNotExistsâ€)then
					reporterReportEvent "Passed","Utility Library ---> utilCompareValues","Expected and Actual value are not equal, ddExpectedvalue value is: "&strExpectedValue &Chr(13) &" ddActualValue value is: "&strActualValue
				End If
		Else
		'Report the status as fail if strVerifyKeyword value is not valid
		reporterReportEvent "Failed","Utility Library ---> utilCompareValues","Please provide valid value(VerifyExists/VerifyNotExists) in ddVerifyKeyword[value:"""&strVerifyKeyword&"""]"
		End If
End Function



'##########################################################################################################################################################
'Name:	utilConcatenate
'PURPOSE: To concatenate two or more values(strings, numbers and special charecters) as required by the user and store the Concatenated value in data dictionary for the supplied key name
'PARAMETERS: 	
'	INPUT:
'		Inputs1	: valid value that need be concatenated
'		Inputs2 : valid value that need be concatenated
'			*Note: If more than 1 value need to be concatenated then user have to send the values with semicolon separator's.
'			If the parameters are passed from the data dictionary, then pass Inputs1 as "InputValue;InputValue[x];InputValue[y];InputValue[z]" and Inputs2 as "InputValue[k] or vice versa where, InputValue is a key.
'				** x,y,z and k are the keyElment subScript numbers.
'			If the parameters are not passed from the data dictionary then pass Inputs1 as "a;b;-;4;c;d" and Inputs2 as "e" or vice versa.
'				***While passing the inputs make sure it contains the required number of spaces, special characters....etc.
'		DDReferenceForConcat :	String that contains key reference for the data dictionary (key name of the output) to which the Concatenated value will be stored
'	    OUTPUT:
'		 DDReferenceForConcat : Key reference that contains the Concatenated value in the data dictionary
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Rashmi.c      	         08/13/2014			NEW

'##########################################################################################################################################################
Sub utilConcatenate(Inputs1,Inputs2,DDReferenceForConcat)	
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim strConcatval	         				   '(string)Variable that contains the final result
		  Dim strReportStepLabel         		  'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Utility Library --> utilConcatenate"
		 ' END PREREQUISITE CODE
		 ' **************************
		 ' BEGIN FUNCTION IMPLEMENTATION
		 ' ###############################################################
		 '2)Verification  fo inputs
	     'Verify the Inputs1 and Inputs2 specified value is Empty  or null to do Concatenation
		 If (Inputs1<>"" or Inputs2 <>"") and (DDReferenceForConcat<>"") Then
			 'Assign null value to the variable strConcatval which will be used for Concatenation
				strConcatval=""
				'Make string that contains all input parameters  supplied
					strConcat =Inputs1&";"&Inputs2
					'Get the all values to be Concatenated in an array by using split method
					arrConcatValues=Split(strConcat,";")
					'Iterate through each concat value in a arrConcatValues array and Concat the same to variable 'strConcatval'
					For Each Concatval In arrConcatValues
						'Do the Concatenation operation on the supplied inputs and assign it to variable strConcatval
						strConcatval = strConcatval&ddGetItem(Concatval)	
					Next
					'Add the Concatenated string to data dictionary with key as supplied by the user in parameter DDReferenceForConcat
					ddAddItem DDReferenceForConcat,strConcatval
					'report the status of the Concatenation
					reporterReportEvent "Done",strReportStepLabel,"The Concatenation result for the InputValues: '"&Inputs1&"' and '"&Inputs2&"' is :'"&strConcatval&"' and stored in the data dictionary for the key ' "&DDReferenceForConcat&" '"
			Else
				'2.1)Report the status as Failed as the parameters supplied are  Empty  or null  to do Concatenation on them
				reporterReportEvent "Failed",strReportStepLabel,"The supplied values Inputs1or Inputs2 or DDReferenceForConcat is null or empty to do Concatenation , "&Chr(13)&" Please Enter valid input to do concatenation"				
			End If		
End Sub


'###################################################################################################################################################
' NAME:  utilDeviceReplayPressKey
' PURPOSE:  To press key for the provided key code.
' PARAMETERS:
'		INPUT
'			ddKeyCode->String or Dictionary object( Key) that contains the key code for the presskey
'			ddIterationCount->String or Dictionary object( Key) that contains the value for the iterations to be done
'												*Note: If 'ddIterationCount' value is provided as null then only 1 iteration press key will work
'			ddWaitTimeForEachIteration->Integer or Dictionary object( Key) that contains the value for the wait time between each iterations
'												*Note: If 'ddWaitTimeForEachIteration' value is provided as null then there will be no wait seconds for each iterations
'												
'		OUTPUT :
'			N/A

								'Note: Please find the below URL for more details on Keycodes
								'URL: https://www.joecolantonio.com/2011/07/19/qtp-secret-code-chart-revealed-for-devicereplay-presskey-keydown-keyup-and-pressnkeys/

'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Surendra					11/4/2017					NEW
'##################################################################################################################################################
Sub utilDeviceReplayPressKey(ddKeyCode,ddIterationCount,ddWaitTimeForEachIteration)

'creating object for mercury devicereplay
Set objMDR=CreateObject("Mercury.DeviceReplay")
'verify the existence of input parameter in data dictionary
StrKeycode=trim(ddGetItem(ddKeyCode))
StrIterationCount=trim(ddGetItem(ddIterationCount))
StrWaitTimeForEachIteration=trim(ddGetItem(ddWaitTimeForEachIteration))

'setting flag as null
flag=""
'Initialize the error handling
On Error Resume Next

'verify if the 'ddKeyCode' parameter is not null
If StrKeycode<>"" Then
	'verify if the 'ddIterationCount' parameter is not null
	If len(StrIterationCount)=0 Then
		'if 'ddIterationCount' parameter is null then assign '1' as the value
		StrIterationCount=1
		'verify if 'ddIterationCount' parameter is numeric or not
		ElseIf not(IsNumeric(StrIterationCount)) Then
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0		
		'report failed when 'ddIterationCount' parameter is not numeric value
		reporterReportEvent "Failed","Utility Library-->utilDeviceReplayPressKey","ddIterationCount value:'" &StrIterationCount& "' should be numeric value"
		'verify if 'ddIterationCount' parameter is numeric and  is a positive value
		ElseIf IsNumeric(StrIterationCount) and (StrIterationCount)<=1 Then
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0			
		'report failed when 'ddKeyCode' parameter is not numeric and a positive value
		reporterReportEvent "Failed","Utility Library-->utilDeviceReplayPressKey","ddIterationCount value:'" &StrIterationCount& "' should be positive value"
	End If
	
	'verify if the 'ddWaitTimeForEachIteration' parameter is not null
	If len(StrWaitTimeForEachIteration)=0 Then
		'if 'ddWaitTimeForEachIteration' parameter is null then assign '0' as the value
		StrWaitTimeForEachIteration=0	
		'verify if 'ddWaitTimeForEachIteration' parameter is numeric or not		
		ElseIf not(IsNumeric(StrWaitTimeForEachIteration)) Then
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0			
		'report failed when 'ddWaitTimeForEachIteration' parameter is not numeric value
		reporterReportEvent "Failed","Utility Library-->utilDeviceReplayPressKey","ddWaitTimeForEachIteration value:'" &StrWaitTimeForEachIteration& "' should be numeric value"
		'verify if 'ddWaitTimeForEachIteration' parameter is numeric and a positive value	
		ElseIf IsNumeric(StrWaitTimeForEachIteration) and (StrWaitTimeForEachIteration)<0 Then
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0			
		'report failed when 'ddWaitTimeForEachIteration' parameter is not positive value
		reporterReportEvent "Failed","Utility Library-->utilDeviceReplayPressKey","ddWaitTimeForEachIteration value:'" &StrWaitTimeForEachIteration& "' should be positive value"
	End If



'verify if the 'ddIterationCount' parameter is not equals to 1
	If (StrIterationCount<>"1") Then
'	Iterate for the 'ddIterationCount' provided
		For i = 1 To StrIterationCount
			'verify if 'ddWaitTimeForEachIteration' parameter is not equals to 0
			If StrWaitTimeForEachIteration<>"0" Then
			'presskey for the keycode provided
				objMDR.PressKey StrKeycode
				
				'Store the generated run time error number and error description in variables.
				errNumber = Err.Number
				errDescription = Err.Description
				'wait for the 'ddWaitTimeForEachIteration' seconds provided
				wait(StrWaitTimeForEachIteration)
				'flag is set to 1
				flag=1
			Else
			 'presskey for the keycode provided
			    objMDR.PressKey StrKeycode
			    'Store the generated run time error number and error description in variables.
				errNumber = Err.Number
				errDescription = Err.Description
			    'flag is set to 1
			    flag=1
			End If
			
		Next
	else
	'presskey for the keycode provided
	objMDR.PressKey StrKeycode
	'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
	'flag is set to 0
	flag=0
	End If
	
else
'Clear the error.
Err.Clear
'Ends the Error Handling Scope.
On Error GoTo 0
'report failed when 'ddKeyCode' parameter is empty
reporterReportEvent "Failed","Utility Library-->utilDeviceReplayPressKey","ddKeyCode value:'" &StrKeycode& "' provided is null. Please provide valid value for ddKeyCode"
End If

	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0
	
	'Report failed if error occurs while pressing the key
	If errNumber<>0 Then
	'report failed when error occurs
	reporterReportEvent "Failed","Utility Library-->utilDeviceReplayPressKey","Error occurred while pressing the key with the ddKeyCode '" &StrKeycode& "' .The Error Message is: '"& errDescription &"' .Recheck the ddKeyCode provided."
	ElseIf flag=0 Then
'report done when press key pressed successfully
	reporterReportEvent "Done","Utility Library-->utilDeviceReplayPressKey","Press key with ddKeyCode '" &StrKeycode& "' is pressed successfully."
	ElseIf flag=1 Then
	'report done when press key pressed successfully for multiple times
	reporterReportEvent "Done","Utility Library-->utilDeviceReplayPressKey","Press key with ddKeyCode '" &StrKeycode& "' has been pressed for '" &StrIterationCount& "' iterations successfully[Number of seconds waited for each iteration:"&StrWaitTimeForEachIteration&"]."
	End If
	
	'setting the Mercury devicereplay object to nothing
	Set objMDR=Nothing

End Sub


'##################################################################################################################
' NAME:  	utilDeviceReplaySetText
' PURPOSE:  To set the input text through the keyboard keys
' PARAMETERS:
'        INPUT :
'                ddinput : String or Dictionary object that contains input text to be set from the keyboard keys.
'        OUTPUT : None
'HISTORY
'NAME:                                                DATE:                                PURPOSE
'------------------------------------------------------------------------------------------------------------------
'Shambhavi Pawar                                   09/06/2018                          NEW
'###################################################################################################################
Sub utilDeviceReplaySetText(ddInput)
'PREREQUISITE CODE
'1) Declarations
'##############################################################
Dim objMDR
Dim strInput
strReportStepLabel = "Utility Library--->utilDeviceReplaySetText"
'##'2) Initialize Error Handling
'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
'    On Error Resume Next
'##'Clear Error
'##Err.Clear
'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
'Get the reference value from data dictionary for the parameter 'ddInput'
strInput=trim(ddGetItem(ddInput))
'Initialize the error handling
On Error Resume Next
		'verify if the input parameter 'ddInput' is not empty
		If strInput<>"" Then
				'creating object for mercury devicereplay
				Set objMDR=CreateObject("Mercury.DeviceReplay")
				'Set the input value using SendString method
				objMDR.SendString strInput				
				'Store the generated run time error number and error description in variables				
				errNumber = Err.Number
				errDescription = Err.Description						
				'Ends the Error Handling Scope.
				On Error GoTo 0	
				Set objMDR= Nothing				
				'Verify if any error occurred while setting the value then
				If errNumber<>0 Then
					'Report failed if error occurs while setting the input value
					reporterReportEvent "Failed",strReportStepLabel,"Error occurred while setting the input text '" &strInput& "'.The Error Message is: '"& errDescription &"'."
				Else					
					'Report as passed if successfully set the value then
					reporterReportEvent "Passed",strReportStepLabel,"Successfully entered the input text '" &strInput& "'."					
				End If	
		Else
				'Report failed if input value 'ddinput' is empty then
				reporterReportEvent "Failed",strReportStepLabel,"The input text 'ddInput' cannot be empty.Please enter a valid input."				
		End If

End Sub


'#############################################################################################################
'Name:	utilGetRandomValue
'PURPOSE:	Generates a Random value , based on the given length and type specified
'PARAMETERS: 	
'	INPUT:
'		NumberOfCharacters: Text(String/Integer) that containes the length of the random value required.
'							**note : pass the parameter value as int  to get the randon value in Numbers(Ex:= 6)
'							**note : pass the parameter value as string to get the randon string value(Ex:= "6")
'	OUTPUT:
'		 utilGetRandomValue :Text(String/Integer) that contains random value based on the given input parameter.
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil Kumar         11/13/2012			NEW
'Manjunath      	11/20/2012			Modified to get random value as string/integer depends on given length and type specified
'#############################################################################################################
Function utilGetRandomValue(NumberOfCharacters)
'Create regular expression object
	Set objRegExp=New RegExp
	'Set the global property of the regular expression to true
objRegExp.Global = True
	'Check the input parameter and set the regular expression pattern property
	If Typename(NumberOfCharacters)="Integer" Then
		'Set the pattern property for non-digits
		objRegExp.Pattern="\D"
	 Else
	    'Set the pattern property for digits
		objRegExp.Pattern="\d"
	End If
	'Loop until length of the random value is greater than input parameter : NumberOfCharacters
	Do Until Len(RandomValue)>Cint(NumberOfCharacters)
			'Create scriptlet object to get the unique string
			Set objScriptlet=CreateObject("Scriptlet.TypeLib")
			'Get alpha numeric values from unique string
			intstrTempValue=Replace(Mid(objScriptlet.Guid,2,36),"-","")
			'Get the value based on supplied input parameter type
			RandomValue=RandomValue&Trim(objRegExp.Replace(intstrTempValue,vbNullString))
	Loop
	'Return the unique value to the user
	utilGetRandomValue=Left(RandomValue,Cint(NumberOfCharacters))
	'report the status of the component
reporterReportEvent "Done","Utility Library --> utilGetRandomValue","Random value for : "&NumberOfCharacters&"  is: "&Left(RandomValue,Cint(NumberOfCharacters))
End Function


'##########################################################################################################################################################
'Name:	utilMathAdd
'PURPOSE: To do addition of two double precision floating point addends and store the double precision floating point sum in data dictionary for the supplied key name
'PARAMETERS: 	
'	INPUT:
'		Addends1	: Double precision floating point that contains 1st addends
'		Addends2 : Double precision floating point that contains 2nd addends
'							*Note: If more than 1 value to be added then user have to send the values with semicolon separator's
'							If the values are from data dictionary then pass Addends1 as "InputValue;InputValue[1];InputValue[2];InputValue[4]" and Addends2 as InputValue[5] or vice versa. InputValue is a key.
'							If the values are not from data dictionary then pass Addends1 as  "1;2;3;4;5;6" and Addends2 as "7" or vice versa.
'		DDReferenceForSum :	String that contains key reference for the data dictionary (key name of the output) to which the double precision floating point sum will be stored
'		optNumDigitsAfterDecimal : [optional].Integer that contains how many places to the right of the decimal are displayed. Default value is "", which returns the default calculated value
'	    OUTPUT:
'		 DDReferenceForSum : Key reference that contains the double precision floating point sum in the data dictionary
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath      	07/02/2013				NEW
'Manjunath          07/03/2013            Modified to handle list values and decimal prcision
'##########################################################################################################################################################
Sub utilMathAdd(Addends1,Addends2,DDReferenceForSum,optNumDigitsAfterDecimal)	
'Assign zero to the variable dblSumValue which will be used for addition
dblSumValue=0
'Make string that contains all input parameters addends supplied
strAddends=Addends1&";"&Addends2
	'Get the all values to be added in an array by using split mathod
	arrAddendValues=Split(strAddends,";")
	'Iterate through each Addend value in a arrAddendValues array and add the same to variable 'dblSumValue'
	For Each Addend In arrAddendValues
		'Get the addends from data dictionary	
		AddendValue=ddGetItem(Addend)
		'Verify the addends specified is numeric to do addition operation
		If IsNumeric(AddendValue) Then
			'Do the Addition operation on the supplied addends and assign it to variable dblSumValue
			dblSumValue = dblSumValue + Cdbl(AddendValue)
		Else
			'Report the status as Failed as the addend supplied are not of integer formate to do integer addition on them
			reporterReportEvent "Failed","Utility Library--->utilMathAdd","The supplied value '"&AddendValue&"' is not a numeric value to do addition , "&Chr(13)&" Please specify only numeric values for addition"				
		End If		
	Next	
	'Call Truncate component to limiting the number of digits right of the decimal point, by discarding the least significant ones and store value in variable dblSum
	dblSum=utilMathTruncate(dblSumValue,optNumDigitsAfterDecimal)
	 'Add the sum to data dictionary with key as supplied by the user in parameter DDReferenceForSum
	ddAddItem DDReferenceForSum,dblSum
	'report the status of the addition
	reporterReportEvent "Done","Utility Library --> utilMathAdd","The addition result for the InputValues: '"&Addends1&"' and '"&Addends2&"' is :"&dblSum&" having the ' "&optNumDigitsAfterDecimal&" ' decimal digits and stored in the data dictionary for the key ' "&DDReferenceForSum&" '"	
End Sub


'##########################################################################################################################################################
'Name:	utilMathCurrentDate
'PURPOSE: To get the current date in mm/dd/yyyy format
'PARAMETERS: 	
'	INPUT: None
'	OUTPUT: CurrentDate - Gives the current date.
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					02/27/2014					New
'Varun V					03/25/2014					Modified the code to handle mm/dd/yyyy format
'##########################################################################################################################################################
Private Sub utilMathCurrentDate()
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim dtmCurrentDate 	         						 ' Date Variable that  contains current Date
		  Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Utility Library --> utilMathCurrentDate"
' END PREREQUISITE CODE
	' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	  '####################################################################################################
		'	'CODE MODIFICATION
		'Varun V	03/25/2014					Modified the code to handle mm/dd/yyyy format
		 '##dtmCurrentDate = FormatDateTime(Date,2)
		   'Retrive the system date to a variable CurrentDate
		   dtmCurrentDate = utilMathFormatedDate(Date())
			'END CODE MODIFICATION
		'###############################################################################################
		   'Check if CurrentDateValue key exists in data dictionary
		   If ddGetItem("CurrentDate") = "CurrentDate" Then
				'Store the current date to data dictionary with a key name CurrentDate
				ddAddItem "CurrentDate", dtmCurrentDate
		   Else
				'Replace the CurrentDate key value with the current date if key already exists in data dictionnary
				ddReplaceItem "CurrentDate",dtmCurrentDate
		   End If
			'Report the status Done once the Current date found.
		   reporterReportEvent "Done",strReportStepLabel," Current Date is " & dtmCurrentDate & " which is,stored in data dictionary with a key name CurrentDate"
End Sub


'##########################################################################################################################################################
'Name:	utilMathDateAdd
'PURPOSE: To do addition on date(CurrentDate or the Date provided by the user) and store the results in data dictionary for the specified key name
'PARAMETERS: 	
'	INPUT:
'		DateTobeModified	: 			Date value for which days should be added.Should be in mm/dd/yyyy format
'		DaysToAdd :  						Numbers days to be added
'		DDReferenceForDateAdd : Key reference that contains final added date.
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					02/27/2014					New
'Varun V					03/25/2014					Modified the code to handle mm/dd/yyyy format
'##########################################################################################################################################################
Sub utilMathDateAdd(DateTobeModified,DaysToAdd,DDReferenceForDateAdd)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim dtmInputDate 	         						 'Date Variable that  contains date value from which days should be added
		  Dim intDaysToAdd						   			   'Date Variable that contains number of days to be added.
		  Dim dtmFutureDate									'Date Variable that contains added date
		  Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Utility Library --> utilMathDateAdd"
		' END PREREQUISITE CODE
		' **************************
		' BEGIN FUNCTION IMPLEMENTATION
		' ###############################################################
	    'Verify the existance of DateTobeModified parameter in data dictonary
		 dtmInputDate= ddGetItem(DateTobeModified)
		 'Verify the existance of DaysToAdd parameter in data dictonary
		 intDaysToAdd = ddGetItem(DaysToAdd)
		 'Verify InputDate value is in date format
		 If Isdate(dtmInputDate)  Then
		 	'Verify AddValue parameter value is numeric
			If Isnumeric(intDaysToAdd)  Then
				 '####################################################################################################
				'	'CODE MODIFICATION
				'Varun V	03/25/2014					Modified the code to handle mm/dd/yyyy format
				'##dtmFutureDate = FormatDateTime(DateAdd("d",intDaysToAdd,dtmInputDate),2)
				'Do additon operation date by using function DateAdd and convert the format to mm/dd/yyyy format by using utilFormatedDate
				dtmFutureDate = utilMathFormatedDate(DateAdd("d",intDaysToAdd,dtmInputDate))
				'END CODE MODIFICATION
				'###############################################################################################
					'Add the past date to data dictonary.
					ddAddItem DDReferenceForDateAdd, dtmFutureDate
					'Report the status of Date Addition
					reporterReportEvent "Done",strReportStepLabel,dtmInputDate& " date has been added by " &intDaysToAdd & " days and the final date "&dtmFutureDate&" is stored in data dictionary with a key name " &DDReferenceForDateAdd
			Else
				'Report fail if a non numeric value passed for the parameter DateAdd
				reporterReportEvent "Failed",strReportStepLabel,"DaysToAdd parameter value " &intDaysToAdd & " is a not  numeric.Please pass numeric value"
			End If
		Else
			'Report fail if incorrect date value passsed for parameter InputDate
			reporterReportEvent "Failed",strReportStepLabel,"DateTobeModified parameter value "&dtmInputDate&" is invalid. Please pass the exact date for DateTobeModified parameter in mm/dd/yyyy format"
		End If
End Sub


'##########################################################################################################################################################
'Name:	utilMathDateSubtract
'PURPOSE: To do subtraction on date(CurrentDate or the Date provided by the user) and store the results in data dictionary for the specified key name
'PARAMETERS: 	
'	INPUT:
'		DateTobeModified	: 			Date value from which days should be subtracted.Should be in mm/dd/yyyy format
'		DaysToSubtract :  Numbers days to be subtracted
'		DDReferenceForDateSubtract : Key reference that contains subtracted date.
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					02/27/2014					New
'Varun V					03/25/2014					Modified the code to handle mm/dd/yyyy format
'##########################################################################################################################################################
Sub utilMathDateSubtract(DateTobeModified,DaysToSubtract,DDReferenceForDateSubtract)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim dtmInputDate 	         						 ' Date Variable that  contains date value from which days should be subtract
		  Dim intDaysToSubtract						   			   'Date Variable that contains number of days to be subtracted.
		  Dim dtmPastDate									'Date Variable that contains subtracted date
		  Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Utility Library --> utilMathDateSubtract"
		 ' END PREREQUISITE CODE
		 ' **************************
		 ' BEGIN FUNCTION IMPLEMENTATION
		 ' ###############################################################
			'Verify the existance of DateTobeModified parameter in data dictonary
			dtmInputDate= ddGetItem(DateTobeModified)
			'Verify the existance of DaysToSubtract parameter in data dictonary
			intDaysToSubtract = ddGetItem(DaysToSubtract)
			'Verify InputDate value is in date format
			If Isdate(dtmInputDate)  Then
				'Verify DaysToSubtract parameter value is numeric
				If Isnumeric(intDaysToSubtract)  Then
					 '####################################################################################################
					'	'CODE MODIFICATION
						'Varun V	03/25/2014					Modified the code to handle mm/dd/yyyy format
						'##dtmPastDate = FormatDateTime(DateAdd("d","-"&intDaysToSubtract,dtmInputDate),2)
						'Do additon operation date by using function DateAdd and convert the format to mm/dd/yyyy format by using utilFormatedDate
						dtmPastDate = utilMathFormatedDate(DateAdd("d","-"&intDaysToSubtract,dtmInputDate))
						'END CODE MODIFICATION
						'###############################################################################################
						'Add the past date to data dictonary.
						ddAddItem DDReferenceForDateSubtract, dtmPastDate
						'Report the status of Date Subtraction
						reporterReportEvent "Done",strReportStepLabel,dtmInputDate & " date has been subtracted by " &intDaysToSubtract & " days and final date  "&dtmPastDate&" is stored in data dictionary with a key name " &DDReferenceForDateSubtract
				Else
					'Report fail if a non numeric value passed for the parameter DatsToSubtract
					reporterReportEvent "Failed",strReportStepLabel,"DatsToSubtract parameter value " &intDaysToSubtract &" is a not  numeric.Please pass numeric value"
				End If
			Else
				'Report fail if incorrect date value passsed for parameter DateTobeModified
				reporterReportEvent "Failed",strReportStepLabel,"DateTobeModified parameter value "&dtmInputDate&" is invalid. Please pass the exact date for DateTobeModified parameter in mm/dd/yyyy format"
			End If
End Sub


'################################################################################################################################################################
'Name:	utilMathDivide
'PURPOSE:  To take in a single double precision floating-point dividend, a single double precision floating-point divisor of double precision,
'						 and store the double precision floating-point  division result in data dictionary for the supplied key name
'PARAMETERS: 	
'	INPUT:
'		Dividend :	Double precision floating-point Dividend(Numerator)
'		Divisor	:	Double precision floating-point Divisor(Denominator)
'       DDReferenceForDivide :	String that contains key reference for the data dictionary (name of the output) to which the double precision floating-point division result will be stored
'		optRoundOrTruncate:[optional] Integer that can set the division result as truncated or rounded value.
'							Note -If optRoundOrTruncate is "" or 0, returns the default calculated value
'									If optRoundOrTruncate is 1,returns truncated calculated value
'									If optRoundOrTruncate is 2,returns rounded calculated value
'		optNumDigitsAfterDecimal:[optional] Integer that contains how many places to the right of the decimal are displayed. Default value is "", which returns the default calculated value
'	OUTPUT:
'		 DDReferenceForDivide : Key reference that contains the double precision floating-point division result in the data dictionary
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V      	04/08/2014				NEW
'################################################################################################################################################################
Sub utilMathDivide(Dividend,Divisor,DDReferenceForDivide,optRoundOrTruncate,optNumDigitsAfterDecimal)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim intDividendValue 	         						 ' Variable contains the dividend value
		  Dim intDivisorValue						   			   'Variable that contains divisor value
		  Dim dblDivideValue									'Variable cotains division result
		  Dim dblFinalValue									'Variable that contains the final result
		  Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Utility Library --> utilMathDivide"
		 ' END PREREQUISITE CODE
		 ' **************************
		 ' BEGIN FUNCTION IMPLEMENTATION
		 ' ###############################################################
		   'Retrive the value for Dividend from DD
				intDividendValue = ddGetItem(Dividend)
			'Retrive the value for Divisor from DD
				intDivisorValue = ddGetItem(Divisor)
			'Check the value of Dividend and Divisor is numeric and not empty
				If IsNumeric(intDividendValue) and IsNumeric(intDivisorValue) and Not IsEmpty(intDividendValue) and Not IsEmpty(intDivisorValue)Then
					'Check the value of Divisor is Zero or not
					If intDivisorValue = "0" Then
						'If Divisor is Zeo,report fail
						reporterReportEvent "Failed",strReportStepLabel,"The supplied Divisor is Zero.Please pass numeric value other than Zero"
					Else
						'Do a division on Dividend by Divisor
						dblDivideValue = Cdbl(intDividendValue)/Cdbl(intDivisorValue)
						'Check the Reminder parameter value is "" or Zero
						If optRoundOrTruncate = "" or optRoundOrTruncate = "0" Then
							'Assign dblDivideValue value to a variable dblFinalValue
							dblFinalValue = dblDivideValue
						'Check the Reminder parameter value is 1
						Elseif optRoundOrTruncate = "1"	Then
							'Call utilMathTruncate and assign the truncated value to a variable dblFinalValue
							dblFinalValue = utilMathTruncate(dblDivideValue,optNumDigitsAfterDecimal)
						'Check the Reminder parameter value is 2
						Elseif optRoundOrTruncate = "2"	Then
							'Call utilMathRound the division result and assign to a avriable dblFinalValue
							dblFinalValue = utilMathRound(dblDivideValue,optNumDigitsAfterDecimal)
						Else
							'Report fail if the user passes a invalid value for optRoundOrTruncate parameter
							reporterReportEvent "Failed",strReportStepLabel,"The supplied optRoundOrTruncate value '"& optRoundOrTruncate&"' is invalid. Please pass Valid Value. Enter 0,1 or 2"				
						End If
							'Add the division result to data dictionary with a key name DDReferenceForDivide
							ddAddItem DDReferenceForDivide,dblFinalValue
							'Report Done once the division completed
							reporterReportEvent "Done",strReportStepLabel,"The division result for the InputValues: '"&intDividendValue&"' and '"&intDivisorValue&"' is :"&dblFinalValue&" and the result is stored in the data dictionary for the key ' "&DDReferenceForDivide&" '"	
						End If
				Else
					'Report fail if user passes a invalid value for divisor or dividend parameter.
					reporterReportEvent "Failed",strReportStepLabel,"The supplied Divident value '"&intDividendValue&"' or Divisor value '"&intDivisorValue&"' is not valid to do division ,Please specify only numeric values for division"				
				End If
End Sub


'##########################################################################################################################################################
'Name:	utilMathFormatedDate
'PURPOSE: Change the format of date to mm/dd/yyyy
'PARAMETERS: 	
'	INPUT: DateTobeFormated - Date Value that needs to be formated.
'	OUTPUT: utilMathFormatedDate - Gives formated date
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					02/27/2014					New
'##########################################################################################################################################################
Private Function utilMathFormatedDate(DateTobeFormated)
	' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
Dim dtmMonth								'Date Variable that contains month of passed date
		  Dim dtmDay									'Date Variable that contains day of passed date
		  Dim dtmYear  								    'Date Variable that contains year of passed date
' END PREREQUISITE CODE
	  ' **************************
	  ' BEGIN FUNCTION IMPLEMENTATION
	   ' ###############################################################
		   If Len(Month(DateTobeFormated)) = 1  Then
				'If the lenght of month is 1 the appened it with 0 and assign to a variable dtmMonth	
			   dtmMonth = 0 & Month(DateTobeFormated)
		   Else
				'If the lenght of month is 2directly assign month value to a variable dtmMonth
			   dtmMonth = Month(DateTobeFormated)
		   End If
		   'Check the length of day
		   If Len(Day(DateTobeFormated)) = 1 Then
			   'If the lenght of day is 1 the appened it with 0 and assign to a variable dtmDay
			   dtmDay = 0 & Day(DateTobeFormated)
		   Else
				' if the lenght of day is 2 directly assign month value to a variable dtmDay
				dtmDay = Day(DateTobeFormated)
		   End If
		   'Assign year to a variable dtmYear
		   dtmYear = Year(DateTobeFormated)
		   'Concatenate month,day,year with "/"
		   utilMathFormatedDate = dtmMonth & "/" & dtmDay & "/" & dtmYear
End Function


'################################################################################################################################################################
'Name:	utilMathMultiply
'PURPOSE:  To take in a single double precision floating-point multiplicand, a single double precision floating-point multiplier of double precision,
'						 and store the resulting double precision floating-point  product in data dictionary for the supplied key name
'PARAMETERS: 	
'	INPUT:
'		Multiplicands :	Double precision floating-point multiplicand
'		Multipliers	:	Double precision floating-point multiplier
'				*Note: If more than 1 value to be multiplied  then user have to send the values with semicolon separator's
'							If the values are from data dictionary then pass Multiplicands as "InputValue;InputValue[1];InputValue[2];InputValue[4]" and Multipliers as InputValue[5] or vice versa. InputValue is a key.
'							If the values are not from data dictionary then pass Multiplicands as  "1;2;3;4;5;6" and Multipliers as "7" or vice versa.
'		DDReferenceForProduct :	String that contains key reference for the data dictionary (name of the output) to which the double precision floating-point product  will be stored
'		optNumDigitsAfterDecimal:[optional].Integer that contains how many places to the right of the decimal are displayed. Default value is "", which returns the default calculated value
'	OUTPUT:
'		 DDReferenceForProduct : Key reference that contains the double precision floating-point product in the data dictionary
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath      	07/02/2013				NEW
'################################################################################################################################################################
Sub utilMathMultiply(Multiplicands,Multipliers,DDReferenceForProduct,optNumDigitsAfterDecimal)
'Assign one to the variable dblProductValue which will be used for multiplication
dblProductValue=1
'Make string that contains all input parameters Multiplicands and  Multipliers supplied
strMultiplication=Multiplicands&";"&Multipliers
'Get the all values to be multiplied in an array by using split mathod
	arrMultiplicationValues=Split(strMultiplication,";")
	'Iterate through each Multiplicands in a arrMultiplicationValues array and multiply the same to variable 'dblProductValue'
	For Each Multiplicand In arrMultiplicationValues
		'Get the MultiplicandValue  from data dictionary	
		MultiplicandValue=ddGetItem(Multiplicand)
		'Verify the MultiplicandValue  specified is numeric to do multiplication operation
		If IsNumeric(MultiplicandValue) Then
			'Do the multiplication operation on the supplied MultiplicandValue and assign it to variable dblProductValue
			dblProductValue = dblProductValue * Cdbl(MultiplicandValue)
		Else
			'Report the status as Failed as the MultiplicandValue supplied are not of integer formate to do integer multiplication on them
			reporterReportEvent "Failed","Utility Library--->utilMathMultiply","The supplied value '"&MultiplicandValue&"' is not a numeric value to do multiplication, "&Chr(13)&" Please specify only numeric values for multiplication"				
		End If		
	Next
	'Call Truncate component to limiting the number of digits right of the decimal point, by discarding the least significant ones	and store value in variable dblSum
	dblProduct=utilMathTruncate(dblProductValue,optNumDigitsAfterDecimal)
	'Add the product to data dictionary with key as supplied by the user in parameter DDReferenceForProduct 	
	ddAddItem DDReferenceForProduct,dblProduct
	'report the status of the multiplication
	reporterReportEvent "Done","Utility Library --> utilMathMultiply","The multiplication product for the InputValues: '"&Multiplicands&"' and '"&Multipliers&"' is :"&dblProduct&" having the ' "&optNumDigitsAfterDecimal&" ' decimal digits and stored in the data dictionary for the key ' "&DDReferenceForProduct&" '"	
End Sub


'##########################################################################################################################################################
'Name:	utilMathRound
'PURPOSE: To round off (limiting the number of digits right of the decimal point, by rounding the least significant ones) a double precision floating point based on the
'																					supplied parameter optNumDigitsAfterDecimal
'PARAMETERS: 	
'	INPUT:
'		NumToRound	: Double precision floating point that contains number to be rounded
'		optNumDigitsAfterDecimal : Integer that contains number of digits to be drounded in the decimal points
'	    OUTPUT:
'		 utilMathRound : Double precision floating point that contains the rounded value
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V      	04/09/2014				NEW
'##########################################################################################################################################################
Private Function utilMathRound(NumToRound,optNumDigitsAfterDecimal)
'Check the optNumDigitsAfterDecimal is null or 0
	If optNumDigitsAfterDecimal = "" Then
		'Assign the NumToRound value directly to the variable utilMathRound
		utilMathRound = NumToRound
	'Check the optNumDigitsAfterDecimal value is numeric or not
	ElseIf IsNumeric(optNumDigitsAfterDecimal) Then
		'Round the value and assign to a variable utilMathRound
		utilMathRound = Round(NumToRound,optNumDigitsAfterDecimal)
	Else
		'Report fail if the optNumDigitsAfterDecimal parameter is not valid
		reporterReportEvent "Failed","Utility Library --> utilMathRound","The supplied optNumDigitsAfterDecimal value '"& optNumDigitsAfterDecimal&"' is not valid ,Please specify only numeric values"				
	End If
End Function


'##########################################################################################################################################################
'Name:	utilMathSubtract
'PURPOSE: To do subtraction of two numbers and store the double precision floating point subtraction result  in data dictionary for the supplied key name
'PARAMETERS: 	
'	INPUT:
'		Minuend	:   The first number in subtraction,i.e.The number from which the other number will be subtracted.
'		Subtrahend : The Second number in subtraction.							
'		DDReferenceForSubtract :String that contains key reference for the data dictionary (key name of the output) to which the  subtraction result will be stored.
'		optDigitsAfterDecimal : [optional]Integer that contains how many places to the right of the decimal are displayed. Default value is "", which returns the default calculated value
'	    OUTPUT:
'		 DDReferenceForSubtract : Key reference that contains the double precision floating point subtract result  in the data dictionary
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Narasinha      	09/05/2013				NEW
'#########################################################################################################################################################
Sub utilMathSubtract(Minuend,Subtrahend,DDReferenceForSubtract,optDigitsAfterDecimal)	
		   'Assign null to the variable dblSubtractValue which will be used for subtraction
		   dblSubtractValue=0
		   'Retrieving the Minuend and Subtrahend value from dictionary
		   MinuendValue=ddGetItem(Minuend)
		   SubtrahendValue=ddGetItem(Subtrahend)
			'Verify the Minuend and Subtrahend specified value is numeric to do subtraction operation
			If IsNumeric(MinuendValue) And IsNumeric(SubtrahendValue) Then
				'Do the subtraction operation on the supplied inputs and assign it to variable dblSubtractValue
				dblSubtractValue = MinuendValue - Cdbl(SubtrahendValue)
			Else
				'Report the status as Failed as the parameters supplied are not of numeric format to do subtraction on them
				reporterReportEvent "Failed","Utility Library--->utilMathSubtract","The supplied value '"&MinuendValue&"' or '"&SubtrahendValue&"' is not a numeric value to do subtraction , "&Chr(13)&" Please specify only numeric values for Subtraction"				
			End If	
			'Call Truncate component to limit the number of digits right of the decimal point, by discarding the least significant ones and store value in variable dblSubtract
			dblSubtract=utilMathTruncate(dblSubtractValue,optDigitsAfterDecimal)
			 'Add the subtraction result  to data dictionary with key as supplied by the user in parameter DDReferenceForSubtract
			ddAddItem DDReferenceForSubtract,dblSubtract
			'report the status of the Subtract
			reporterReportEvent "Done","Utility Library --> utilMathSubtract","The subtraction  result for the InputValues: '"&MinuendValue&"' and '"&SubtrahendValue&"' is :"&dblSubtract&" having the ' "&optDigitsAfterDecimal&" ' decimal digits and stored in the data dictionary for the key ' "&DDReferenceForSubtract&" '"	
End Sub



'##########################################################################################################################################################
'Name:	utilMathTruncate
'PURPOSE: To  truncate (limiting the number of digits right of the decimal point, by discarding the least significant ones) a double precision floating point based on the
'																					supplied parameter optNumDigitsAfterDecimal
'PARAMETERS: 	
'	INPUT:
'		NumToTruncate	: Double precision floating point that contains number to be truncated
'		optNumDigitsAfterDecimal : Integer that contains number of digits to be discarded/appended in the decimal points
'	    OUTPUT:
'		 utilMathTruncate : Double precision floating point that contains the truncated value
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath      	07/15/2013				NEW
'##########################################################################################################################################################
Private Function utilMathTruncate(NumToTruncate,optNumDigitsAfterDecimal)
'Verify the optNumDigitsAfterDecimal is numeric or empty
	If IsNumeric(optNumDigitsAfterDecimal) Or Trim(optNumDigitsAfterDecimal)="" Then
			'Verify the parameter optNumDigitsAfterDecimal is not null and NumToTruncate contains some decimal values
			If  Trim(optNumDigitsAfterDecimal)<>"" And Instr(1,NumToTruncate,".")<>0 Then
					 'Truncate the decimal points in the supplied NumToTruncate
					varTruncatedDecimal=Mid(Split(NumToTruncate,".")(1),1,Cint(optNumDigitsAfterDecimal))
					'Verfiy the length of the truncated decimal is less then the integer supplied in optNumDigitsAfterDecimal
					If  Len(varTruncatedDecimal) < optNumDigitsAfterDecimal Then
						'Append the remaining zeros if truncated decimal is less then the integer supplied in optNumDigitsAfterDecimal
						varTruncatedDecimalValue=varTruncatedDecimal&String(Cint(optNumDigitsAfterDecimal-Len(varTruncatedDecimal)) ,"0")
						Else
						'Return truncated decimal value
						varTruncatedDecimalValue=varTruncatedDecimal
					End If
					'Return the truncated Double precision floating point to the component				
					utilMathTruncate=FormatNumber(Split(NumToTruncate,".")(0)&"."&varTruncatedDecimalValue,optNumDigitsAfterDecimal,-1,TristateUseDefault,False)
				 Else
				 ' Verify the parameter optNumDigitsAfterDecimal is null
					If Trim(optNumDigitsAfterDecimal) ="" Then
						utilMathTruncate=NumToTruncate'Return the supplied NumToTruncate(original) value to the component
						 Else
						 'Append the decimal values (zeros) as mentioned in parameter optNumDigitsAfterDecimal
						utilMathTruncate=FormatNumber(NumToTruncate,Cint(optNumDigitsAfterDecimal),-1,TristateUseDefault,False)
					End If				
			End If
		Else	
			'Report fail if the optNumDigitsAfterDecimal parameter is not valid
			reporterReportEvent "Failed","Utility Library --> utilMathTruncate","The supplied optNumDigitsAfterDecimal value '"& optNumDigitsAfterDecimal&"' is not valid ,Please specify only numeric values"
	End If
End Function


'##########################################################################################################################################################
'Name:	utilSplit
'PURPOSE: To split the given string and to store the required substring in to the Data Dictionary Object.
'PARAMETERS: 	
'	INPUT:
'		ddSplitStr: String or Data Dictionary that contains key reference to actual string for spliting.
'		ddDelimeter:String or Data Dictionary that contains key reference to elimeter to split the given string.
'		ddSubStringIndex: String or Data Dictionary that contains key reference to substring index to get required substring from the given string after split.
		
'		
'	    OUTPUT:
'		 ddReferenceVariableName:  : Data Dictionary Key reference that contains the Substring value in the Data dictionary object.
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Shambhavi Pawar      	         10/04/2017			NEW

'##########################################################################################################################################################
	Function utilSplit(ddSplitStr,ddDelimeter,ddSubStringIndex,ddReferenceVariableName)

'Get the reference value from data dictionary for the parameter DDSplitStr
	SplitStr=ddGetItem(ddSplitStr)
'Get the reference value from data dictionary for the parameter DDDelimeter
	StrDelimeter=ddGetItem(ddDelimeter)
'Get the reference value from data dictionary for the parameter DDSubStringIndex
			StrIndex=ddGetItem(ddSubStringIndex)
				

'Verify the DDSplitStr,DDDelimeter,DDSubStringIndex,DDReferenceVariableName specified value is Empty  or null for splitting
If (SplitStr<>"" and StrDelimeter<>"" and StrIndex<>"" and ddReferenceVariableName<>"" ) Then

		'Verify the DDSubStringIndex is numeric
					If IsNumeric(StrIndex) Then
				    'Covert the numeric to Integer
					StrIndex=CINT(StrIndex)
					Else
					'Report the status as failed if the values are not set in the xml file as attributes are not present
					reporterReportEvent "Failed","utilSplit","The supplied values DDSubStringIndex '"&StrIndex&"' should be numeric. "&Chr(13)&" Please provide valid numeric value"
					End If			

		 'Spliting the given string into substrings and storing as array, by using split method
arrSplitStr=Split(SplitStr,StrDelimeter)
'Verify the DDSubStringIndex is not out of range
	             	If ((StrIndex>=0) and (StrIndex<=ubound(arrSplitStr))) Then
	             	        'Fetch the required SubString
						    StrSubString =Trim(arrSplitStr(StrIndex))
	                        ' Add the expected substring to the data dictionary
	                        ddAddItem ddReferenceVariableName,StrSubString
	                Else
	                         reporterReportEvent "Failed","utilSplit","The supplied value DDSubStringIndex '"&StrIndex&"' is out of range. "&Chr(13)&" Please provide valid ddSubStringIndex for splitting[Index starts from 0]"
	                End If
'report the status of the Split
reporterReportEvent "Passed","utilSplit","The Split result is '"&StrSubString&"' for the ddSplitStr '"&SplitStr&"' , ddDelimeter '"&StrDelimeter&"' and ddSubStringIndex '"&StrIndex&"'"
Else
reporterReportEvent "Failed","utilSplit","The supplied values ddSplitStr '"&SplitStr&"' or ddDelimeter '"&StrDelimeter&"' or ddSubStringIndex '"&StrIndex&"' or ddReferenceVariableName '"&ddReferenceVariableName&"' is null or empty for splitting ."&Chr(13)&" Please provide valid parameter values"
End If
End Function


'###################################################################################################################################
' NAME:  verifyForObject
' PURPOSE:  To verify the provided ScreenName_ObjectName exists/not-exists in the Screen/window.
' PARAMETERS:
'		INPUT :
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'           ddVerifyKeyword : String or Dictionary object(Key) that contains value to verify the existence/non existence of the object('VerifyExists' or 'VerifyNotExists')
'                             *Note1 : If  the value of the 'ddVerifyKeyword' parameter is 'VerifyExists',then the component verifies for the existence of the object and reports accordingly.
'                                    and if 'ddVerifyKeyword' parameter is 'VerifyNotExists' then the component verifies for the non existence of the object and reports accordingly.
'                             *Note2 : 'ddVerifyKeyword' parameter is case insensitive
'		OUTPUT :
'			N/A
'HISTORY
'-----------------------------------------------------------------------------------------------------
'NAME:	Vinitha								DATE: 07/10/2018						NEW							   	
'###################################################################################################################################

Function verifyForObject(ScreenName_ObjectName,ddVerifyKeyword)
	'PREREQUISITE CODE
'Declarations
'##############################################################	
Dim objName
	strReportStepLabel = "Master Library ---> verifyForObject"
	objName = ScreenName_ObjectName
	'END PREREQUISITE CODE
'**************************	
'BEGIN FUNCTION IMPLEMENTATION
'###############################################################
	'Get the reference value from data dictionary for the parameter ddVerifyKeyword
	strVerifyKeyword=ddGetItem(ddVerifyKeyword)
		'verify if 'ScreenName_ObjectName' and 'strVerifyKeyword' are not Empty/Null	
		If ScreenName_ObjectName <> "" AND strVerifyKeyword <> "" Then
			'call getObjectWithHierarchy to get the properties for the object supplied in ScreenName_ObjectName
			Set objToVerify = getObjectWithHierarchy(ScreenName_ObjectName)
				'verify if the strVerifyKeyword value is "verifyexists"
				If trim(lcase(strVerifyKeyword))="verifyexists" Then
						'Verify if the object exists
						If objToVerify.Exist Then
							'Report the status as pass if Object exist
							reporterReportEvent "Passed",strReportStepLabel,"The object: '"&objName&"' exists on the Screen/Window."
						Else
							'Report the status as fail if Object doesnot exist
							reporterReportEvent "Failed",strReportStepLabel,"The object: '"&objName&"' does not exists on the Screen/Window."
						End If
				'verify if the strVerifyKeyword value is "verifynotexists"
				ElseIf trim(lcase(strVerifyKeyword))="verifynotexists" Then
						'Verify if Object exist
						If objToVerify.Exist Then
							'Report the status as fail if Object exist
							reporterReportEvent "Failed",strReportStepLabel,"The object: '"&objName&"' exists on the Screen/Window."
						Else
							'Report the status as pass if Object does not exist
							reporterReportEvent "Passed",strReportStepLabel,"The object: '"&objName&"' does not exists on the Screen/Window."
						End If
				Else
				'Report the status as fail if strVerifyKeyword value is not valid
				reporterReportEvent "Failed",strReportStepLabel,"The ddVerifyKeyword '"&strVerifyKeyword&"' is not a valid keyword.Please provide the valid keyword as VerifyExists/VerifyNotExists"
				End If
		Else
		'Report the status as fail if ScreenName_ObjectName/ddVerifyKeyword is Null/Empty
		reporterReportEvent "Failed",strReportStepLabel,"ScreenName_ObjectName and ddVerifyKeyword are mandatory parameters. Please provide ScreenName_ObjectName and valid keyword(VerifyExists/VerifyNotExists) for ddVerifyKeyword."
		End If
End Function


'##########################################################################################################################################################
'Name:	verifyTextInMSOutlook
'PURPOSE: To verify and get the text from MS outlook mail.
'PARAMETERS: 	
'	INPUT:
'		ddMSOutlookFolderId : Integer or Data Dictionary that contains key reference to MS Outlook Folder Id.
'		ddSearchCriteria  : String or Data Dictionary that contains key reference to Search Criteria for identifying the required mail to verify the input text.
'		ddValueToVerify  : String or Data Dictionary that contains key reference to verify text with in mail
'		
	
'	    OUTPUT:
'		 verifyTextInMSOutlook:  Data Dictionary Key reference that contains the mail content(available text in mail) after search creteria matches.
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Surendra dev			03/02/2018 				New
'Jayarami Reddy         10/19/2020				Added new line to Sort the items collection by received time
'##########################################################################################################################################################
Function verifyTextInMSOutlook(ddMSOutlookFolderId,ddSearchCriteria,ddValueToVerify)

	'PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	Dim intMSOutlookFolderId 	         'String that  contains default inbox folder id of the MS Outlook.
	strReportStepLabel = "MSOutlook Library ---> verifyTextInMSOutlook"
	'##'2) Initialize Error Handling
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
	'##'Clear Error
	'##Err.Clear
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################

	On error resume next
	'Get the reference value from data dictionary for the parameter ddMSOutlookFolderId.
	intMSOutlookFolderId=ddGetItem(Trim(ddMSOutlookFolderId))
	'Get the reference value from data dictionary for the parameter ddSearchCriteria.
	strSearchCriteria=ddGetItem(Trim(ddSearchCriteria))
	'Get the reference value from data dictionary for the parameter ddValueToVerify.
	strValueToVerify=ddGetItem(Trim(ddValueToVerify))
	
	'Verify if any of the intMSOutlookFolderId,strSearchCriteria and strValueToVerify values are Empty or null to check whether all the inout data is provided or not
	If intMSOutlookFolderId <> "" AND strSearchCriteria <> "" AND strValueToVerify <> "" Then
		'Verify intMSOutlookFolderId for Numeric Value input
		If IsNumeric(intMSOutlookFolderId) Then
			'Convert the numeric of intMSOutlookFolderId to Integer
			intMSOutlookFolderId = Cint(intMSOutlookFolderId)	
			If intMSOutlookFolderId <=0 Then
'Report the Failed message and instruct the user to enter non zero positive numeric  values in the Result Report
reporterReportEvent "Failed",strReportStepLabel,"The supplied values for ddMSOutlookFolderId '"&intMSOutlookFolderId&"' should be non zero Positive Numeric Value."&Chr(13)&" Please provide valid Positive numeric values"
End If

			'Creating Outlook Object
		 	Set objOutlook = CreateObject("Outlook.Application")
			'Assign the path of ExceptionHandling .vbs file which is in the ALM under Test Resources
			ExceptionFilePath="[ALM\Resources] Resources\Automation\ExceptionHandling\ExceptionHandling"
			'ExceptionFilePath="S:\Data Processing\Enterprise Solutions\Enterprise Solutions QA\Automation\Commercial-Enterprise\CQA-Automation\Automation FW\Code Base\In Development\Request_Related\verifyTextInMSOutlook\Components\ExceptionHandlingNew.vbs"
			'Get the path of .vbs file
			ExceptionFilePath=Pathfinder.Locate(ExceptionFilePath)
			'Split the File path with delimitter "\"
			ArrExceptionFilePath=split(ExceptionFilePath,"\")
			'Get the File Name
			FileName=ArrExceptionFilePath(ubound(ArrExceptionFilePath))
			'Get the File path by splitting entire path with File Name as delimitter
			FilePath=split(ExceptionFilePath,FileName)(0)
			'Run the Exception Handling script to handle the Microsoft Outlook popup
			systemUtil.Run "wscript.exe",FileName,FilePath
			
			'systemUtil.Run "wscript.exe","ExceptionHandling.vbs",ExceptionFilePath
			   	'create an instance of a NameSpace object variable, to access existing Outlook items
			    Set OutlookNameSpace = objOutlook.GetNameSpace("MAPI")
				'Assign the object variable OutlookFolder to the required default folder:ID = 6			
			    Set OutlookFolder = OutlookNameSpace.GetDefaultFolder(intMSOutlookFolderId) 'Inbox = 6
			    'Create an instance of OutlookFolderItems to get the Items of the default folder
			    Set OutlookFolderItems = OutlookFolder.Items
				'####################### CODE MODIFICATION #####################################
				'Jayarami Reddy		10/19/2020				Added new line to Sort the items collection by received time
				'Sort the items collection by received time
			    OutlookFolderItems.Sort "[ReceivedTime]", true
				'####################### CODE MODIFICATION #####################################
			    'Create an instance of first item in the Items collection
			    Set myItem = OutlookFolderItems.GetFirst	
			
				'strMatchCount=0
				'Initialize blnFound to False
				blnFound=False
				'Search for the required email item in the default folder
				For intMailCount = 1 to OutlookFolder.Items.Count - 1
					'Intialize strMatchCount with 0
					strMatchCount=0	
					'Split the different search criterias with delimitter "|||"	
					'Spliting the given string into substrings and storing as array					
					ArrstrSearchCriteria=split(strSearchCriteria,"|||")	
						'Get each search criteria
						For sci = 0 To ubound(ArrstrSearchCriteria)
'							On Error Resume Next
							'Verify search criteria for "||"
							If Instr(ArrstrSearchCriteria(sci),"||") > 0 Then
								'Get the Search Key(Subject,Unread,To,CC,SendrName...etc.)
								searchKeyName=split(ArrstrSearchCriteria(sci),"||")(0)
								'Get the Search Value on which the email search
								searchKeyValue=split(ArrstrSearchCriteria(sci),"||")(1)
								'Get the Actual Value from the email Item
								strActualsearchKeyValue=eval("myItem."&searchKeyName)
								'Verify for the Expected Value
								If lcase(searchKeyName) = lcase("creationtime") Then
'								On Error Resume Next
									searchKeyValue=cdate(searchKeyValue)
									If strActualsearchKeyValue >= searchKeyValue Then
										'Increase the strMatchCount by 1 if Actual Value matches with Expected Value
										strMatchCount=strMatchCount+1	
									End If
								ElseIf len(strActualsearchKeyValue)>0 and InStr(1,strActualsearchKeyValue,searchKeyValue,VbTextCompare) Then
										'Increase the strMatchCount by 1 if Actual Value matches with Expected Value
										strMatchCount=strMatchCount+1				
									
								End If
								
							Else
								'Clear the error.
								Err.Clear
								'Ends the Error Handling Scope.
								On Error GoTo 0
								'Report the status as Failed if the search criteria does not contain "||" and instruct the user to provide the valid Search Criteria
								reporterReportEvent "Failed",strReportStepLabel,"The Search Criteria: "&strSearchCriteria&" is not Valid. "&vbnewline&"Please provide the Valid Search Criteria"
							End If
							
							
						Next''for ArrstrSearchCriteria count
						'Check if all the Search criterias match or not
						If strMatchCount=ubound(ArrstrSearchCriteria)+1 Then
							'If all the search criterias match then assign blnFound to true
							blnFound=True
							'Exit from the loop
							Exit For	
						End If
					'Get the next email Item from the outlook folder
					Set myItem = OutlookFolderItems.GetNext
				Next 'for Mail count
			
				'Verify for the required email
				If blnFound=True Then
					'Get the content of the email and store in strMsgBody
					strMsgBody= Cstr(myItem.body)				
					'Verify for the presence of expected required content in the email content
					If Instr(strMsgBody,strValueToVerify)>0 Then
						'Report the status as pass if "strValueToVerify" is available in the email content
						reporterReportEvent "Passed",strReportStepLabel,"The expected value: '"&strValueToVerify&"' is available in MS Outlook Mail. "&vbnewline&"Expected value is: '"&strValueToVerify&"' and "&vbnewline&"Actual value is: "&strMsgBody
						'Add the email content to the DD with the key name "verifyTextInMSOutlook"
				         ddAddItem "verifyTextInMSOutlook",strMsgBody		
						Else
						'Store the generated run time error number and error description in variables.
						errNumber = Err.Number
						errDescription = Err.Description
						'Clear the error.
						Err.Clear
						'Ends the Error Handling Scope.
						On Error GoTo 0		
						'Report the status as Failed if "strValueToVerify" is not available in the email content
						reporterReportEvent "Failed",strReportStepLabel,"The expected value: '"&strValueToVerify&"' is not available in MS Outlook Mail. "&vbnewline&"Expected value is: '"&strValueToVerify&"' and "&vbnewline&"Actual value is: "&strMsgBody		
					End If
				
				Else				
					'Store the generated run time error number and error description in variables.
					errNumber = Err.Number
					errDescription = Err.Description
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0
					'Report the status as Failed if there is no email with the provided Search Criteria
					reporterReportEvent "Failed",strReportStepLabel,"No mails are available with provided input Criteria:"&ddSearchCriteria
				End If		
				Systemutil.CloseProcessByName "wscript.exe"	
				'Store the generated run time error number and error description in variables.			
				errNumber = Err.Number
				errDescription = Err.Description
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				If errNumber <> 0 Then
					''Report the status as Failed if there is any runtime error while executing the component
					reporterReportEvent "Failed",strReportStepLabel,"Error while executing component"& vbnewline &"Error Message: "& errDescription
				
				End if
			Else
				'Report the Failed message and instruct the user to enter numeric value for ddMSOutlookFolderId
				reporterReportEvent "Failed",strReportStepLabel,"The supplied value of ddMSOutlookFolderId '"&intMSOutlookFolderId&"' should be numeric. "&Chr(13)&" Please provide valid numeric value"
			End If
		Else
			'Report as Failed if the  Input parameters are not valid.
			reporterReportEvent "Failed",strReportStepLabel,"The supplied values ddMSOutlookFolderId '"&intMSOutlookFolderId&"' or ddSearchCriteria '"&strSearchCriteria&"' or ddValueToVerify '"&strValueToVerify&"' is null or empty for get the Substring ."&Chr(13)&" Please provide valid parameter values"
	End If

End Function


'###################################################################################################################################################
' NAME:  verifyTextInPDF
' PURPOSE: To verify the presence of required content in a PDF browser.
' PARAMETERS:
'		INPUT:
'           ScreenName_ObjectName : String that contains the object name that refers to the object properties from object repository.
'			ddInputTextToVerify: String or data dictionary that contains key reference of the value to be verified in PDF browser.
'			ddWaitSec: String or data dictionary that contains Numeric value(greater than 0) to wait for copying PDF browser text to the clipboard(temporary data buffer).
'		OUTPUT :
'			verifyTextInPDF(Component name): Data dictionary key that contains PDF browser text from the clipboard(temporary data buffer).

'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Vinitha								08/11/2017 				NEW
'Udayakumar Reddy				12/11/2020				Modified the code to support Chrome browser
'Udayakumar Reddy				02/08/2021				Modified the code to support Ms Edge Chromium browser
'Sushmashree						10/03/2022				As part of IE Retirement_Phase3A, Commented out the "ie" related code
'Sushmashree						12/01/2022				As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'####################################################################################################################################

Function verifyTextInPDF(ScreenName_ObjectName,ddInputTextToVerify,ddWaitSec)

		'Declaration
		Dim textAvailability_status	 'status to check if PDF text available in clipboard
	     	Dim wait_period                 'increment in wait counts(seconds) to verify if PDF text available in clipboard
			
		'Initialization
	    	 textAvailability_status=0
		 wait_period=0
		 strReportStepLabel = "Web Library --->verifyTextInPDF"
		
		 'get the value of ddInputTextToVerify and ddWaitSec parameter in data dictionary
		 strInputTextToVerify = Trim(ddGetItem(ddInputTextToVerify))
		 secToWait=Trim(ddGetItem(ddWaitSec))
		
		 'to validate 'secToWait' is Null or Empty
			If LEN(secToWait)>0 Then
			   'to validtae 'secToWait' is Numeric or not
				If IsNumeric(secToWait) Then
				   'to validate 'secToWait' is greater than 0 or not
					If secToWait>0 Then
						'Report the status as Done if 'secToWait' value is greater than 0
						reporterReportEvent "Done", strReportStepLabel ,"The ddWaitSec parameter value "&secToWait&" is the maximum wait period provided to copy the text from PDF browser to the clipboard."
					 Else
						'Clear the error.
						Err.Clear
						'Ends the Error Handling Scope.
						On Error GoTo 0					
						 'Report the status as failed if 'secToWait' value is not greater than 0
						 reporterReportEvent "Failed", strReportStepLabel ,"The ddWaitSec parameter value "&secToWait&" is invalid value. Please provide valid numeric value (greater than 0)"
					 End If
				Else
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0				
					'Report the status as failed if 'secToWait' value is not a Numeric value
					reporterReportEvent "Failed", strReportStepLabel ,"The ddWaitSec parameter value "&secToWait&" is not a numeric value. Please provide valid numeric value (greater than 0)"
				End If
			Else
				'if 'secToWait' is Empty/Null, default 'secToWait' is 100 seconds
				secToWait=100
			End If

		 'verify ScreenName_ObjectName is empty or null
		  If ScreenName_ObjectName <> "" Then 			
				'Get the Custom Hierarchy object based on input parameter for ScreenName_ObjectName
				Set objwebPDFpage=getCustomObjectHierarchy(ScreenName_ObjectName)
			       'Start Error Handling
			        On Error Resume Next
			       'Object existence is checked for 100 seconds in the web page	
			        If objwebPDFpage.Exist(100) Then
			            'verify "strInputTextToVerify" is empty or null
			            If strInputTextToVerify <> "" Then
						   'clear the error
						    Err.Clear
							'create a Mercury Clipboard object
							Set clipboardObj = CreateObject("Mercury.Clipboard")
							'initially clear data in the clipboard
					  		clipboardObj.Clear()
			      	  		   'verify to loop whether copied text from PDF is available in the clipboard
				   				Do
								'#############################################################################
								'CODE MODIFICATION
								'Udayakumar Reddy 	12/11/2020 Modified the code to support Chrome browser
								'PDF verification will support MS Edge Chromium and Chrome browsers currently, will extend this support to Firefox browsers in near feature.
								'verify browser type and then go to respective case
								Browser_Type = Trim(Lcase(ddGetItem ("Browser_Type")))
								Select Case Browser_Type
	    	 	
						    	 	Case "chrome"
						    	 		objwebPDFpage.Click
									    Set shell = CreateObject("WScript.Shell")
									    'select all the text from PDF browser page
									    shell.SendKeys "^a"
									    'copy all the selected text from PDF browser page
									    shell.SendKeys "^c"
									    set shell = Nothing
									    Wait(2)
									    'store the copied text in "strActualClipboardMsg"
										strActualClipboardMsg = clipboardObj.GetText
				   				'#############################################################################
								'CODE MODIFICATION
								'Udayakumar Reddy 	02/08/2021 Modified the code to support MS Edge Chromium browser
				   				Case "msedge"
					    	 		objwebPDFpage.Click
								    Set shell = CreateObject("WScript.Shell")
										 wait 2
								    'select all the text from PDF browser page
								    shell.SendKeys "^a"
								    wait 2
								    'copy all the selected text from PDF browser page
								    shell.SendKeys "^c"
								    set shell = Nothing
								    Wait(2)
								    'store the copied text in "strActualClipboardMsg"
									strActualClipboardMsg = clipboardObj.GetText
								'END CODE MODIFICATION
								'#############################################################################
								 End Select
								
				   					'verify "strActualClipboardMsg" is Empty
				   					If LEN(TRIM(strActualClipboardMsg))>0 Then
			   					  		'changes "textAvailability_status=1" when "strActualClipboardMsg" is not null
				   						textAvailability_status=1
				   						reporterReportEvent "Done", strReportStepLabel ,"Time period of '"&wait_period&"' seconds is taken for copying PDF browser text to the clipboard."
										'wait period of 1 sec
										wait(1)
											
									'verify "strActualClipboardMsg" is Empty												
						            ElseIf LEN(TRIM(strActualClipboardMsg)) = 0  Then
										 'wait period of 1 sec
									      wait(1)
									      'increment wrt. wait period of 1sec in each loop
										  wait_period = wait_period+1
										    'verify if 'wait_period' and 'secToWait' values are equal
										    If wait_period = CInt(secToWait) Then
										    	'verify if 'secToWait' is equal to 100 seconds
											  If secToWait=100 Then
											    'Report the status as Done if 'secToWait' is equal to 100 seconds
											     reporterReportEvent "Done", strReportStepLabel ,"The default wait period of 100 seconds has been expired. Thus the text in PDF browser "&ScreenName_ObjectName&" is not copied to the clipboard."
											     'Exit while loop
											     Exit Do
											   Else
											    'Report the status as Done if 'wait_period' and 'secToWait' values are equal
												reporterReportEvent "Done", strReportStepLabel ,"Time period of "&secToWait&" seconds has been expired. Thus the text in PDF browser "&ScreenName_ObjectName&" is not copied to the clipboard."
											     'Exit while loop
											     Exit DO
											   End If
										    End If								        		 											  		 										
										End If
						   				
						   			'Loop until copied text is available in the clipboard
					   				Loop Until textAvailability_status = 1
			
					   			'Store the generated run time error number and error description in variables.
								errNumber = Err.Number
								errDescription = Err.Description
								'clear the error
					   		    Err.clear
					   		    'Ends the Error Handling Scope
					   		    On Error goto 0	

					   		'Verify error occurence
						   	If errNumber = 0 Then
						   	    'verify "strActualClipboardMsg" contains text
						   		If textAvailability_status = 1 Then
						   		   'Report the status as Done if text in PDF browser is successfully copied to the clipboard
									reporterReportEvent "Done", strReportStepLabel ,"The text in PDF browser "&ScreenName_ObjectName&" is successfully copied to the clipboard"
									'Add the obtained text of the PDF to the DD with a key name "verifyTextInPDF"
							         ddAddItem "verifyTextInPDF",strActualClipboardMsg
							    Else
								'Clear the error.
								Err.Clear
								'Ends the Error Handling Scope.
								On Error GoTo 0							
							        'Report the status as failed if text in PDF browser is not successfully copied to the clipboard
								    reporterReportEvent "Failed", strReportStepLabel ,"The text in PDF browser "&ScreenName_ObjectName&" is not copied to the clipboard."
								End If
							Else
								'Clear the error.
								Err.Clear
								'Ends the Error Handling Scope.
								On Error GoTo 0								
								'Report the status as failed if text in PDF browser is not successfully copied to the clipboard with run-time Error description message
								reporterReportEvent "Failed",strReportStepLabel,"Error occured while coping PDF browser text to the clipboard. Error Message: "& errDescription	
							End If
						
						   'Call below component to compare the expected value is available in actual value
					        compareResult=testCompareValues(strActualClipboardMsg,strInputTextToVerify,False)
							
								'Verify the boolean value is true/false
								If compareResult Then
									'Report the status as pass if "strInputTextToVerify" is available in PDF browser
									reporterReportEvent "Passed",strReportStepLabel,"The expected value: "&strInputTextToVerify&" is available in the PDF browser. "&vbnewline&"Expected value is: "&strInputTextToVerify&" and "&vbnewline&"Actual value is: "&strActualClipboardMsg
								Else
									'Clear the error.
									Err.Clear
									'Ends the Error Handling Scope.
									On Error GoTo 0									
									'Report the status as fail if "strInputTextToVerify" is not available in PDF browser
									reporterReportEvent "Failed",strReportStepLabel,"The expected value: "&strInputTextToVerify&" is not available in the PDF browser."&vbnewline&"Expected value is: "&strInputTextToVerify&" and "&vbnewline&" Actual value is: "&strActualClipboardMsg
								End If
								  'clear all the data in the clipboard
								  clipboardObj.Clear()
					   Else
						'Clear the error.
						Err.Clear
						'Ends the Error Handling Scope.
						On Error GoTo 0						
					     'Report the status as fail if "ddInputTextToVerify" is empty
					      reporterReportEvent "Failed", strReportStepLabel ,"The 'ddInputTextToVerify' is a mandatory parameter. Please provide the vale in 'ddInputTextToVerifyenter' and execute the script again."
					   End If		
			      Else
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0				
					'Report the status as fail if "ScreenName_ObjectName" is not available in PDF browser
					reporterReportEvent "Failed", strReportStepLabel ,"The object "&ScreenName_ObjectName&" is not found in the PDF browser or Please re-check the properties in Object Repository."				
				  End If
				  Else
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0					
				  'Report the status as fail if "ScreenName_ObjectName" is empty
				  reporterReportEvent "Failed", strReportStepLabel ,"ScreenName_ObjectName is mandatory parameter.Please enter the object name for the ScreenNameObjectName as per object repository and execute the script again."
				End If
			
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0	
End Function

'###################################################################################################################################################################
' NAME:  webClickElement
' PURPOSE: Performs click operation on any clickable objects in web application.
' PARAMETERS:
'		INPUT      :
'		    ScreenName_ObjectName :  String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'																	*Note: To click the object that doesn't exist in the object repository user need to pass the "ScreenName_ObjectName" paramter as given in the example (Ex:= "Submit")
'			ObjectIndex: Integer that contains the index value of the object. This is to click on the specified clickable object  based on the index value.
'	   OUTPUT :  None
'HISTORY
'NAME:						DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Anil                              13/11/2012                   NEW
'Anil                              19/11/2012                   Designed as per the architecture diagram
'Sunil 				   17/01/2013			Modified to include more descriptive error handling
'Manjunath                	   11/27/2013    		Modified to handle the assistive property
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Lakshman Kumar A.H.     24/03/2014					Modified as per the changes done w.r.t the component "webGetObjectCollection"
'Varun V							09/22/2014					Modified to include FireEvent trigger before doing the actual operation.
'#################################################################################################################################################################################
Sub webClickElement(ScreenName_ObjectName,ObjectIndex)
		''PREREQUISITE CODE
		'1) Declarations
		'##############################################################
			Dim arrClassNames  		  'array that contains the object class names which will be used for dynamic object click
			Dim arrPropertyNames	'array that contains the object properties names which will be used for dynamic object click
			Dim objWebCollection	'object that contains the collectionobject
			Dim strReportStepLabel	'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Web Library ---> webClickElement"
			'##'2) Initialize Error Handling
			'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
			'##On Error Resume Next
			'##'Clear Error
			'##Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'Get the collection of object for the specified object "ScreenName_ObjectName" parameter
		Set objWebCollection=webGetObjectCollection(ScreenName_ObjectName,"","","","","")
		'Verify whether input parameter exists in the data dictionary (This is to double check if the Screenname_ObjectName paramter doesn't exist in the repository)
		'##If IsEmpty(objWebCollection) Then
		If objWebCollection Is Nothing Then
			'The below array that contains the object class names
			arrClassNames=Array("WebButton","Link","Image","WebElement")
			'The below array that contains the object properties
			arrPropertyNames=Array("name","innertext","file name","innertext")
			'Iterate through each item in the array
			For intIndexValue=0 to UBound (arrClassNames)
				'Set the object/objectcollection using the component "webGetObjectCollection" bsed on the object class and object properties
				'In the below called function parameter "ScreenName_ObjectName" can be a Link name or Image file name of the object to perform dynamic click operation.
				Set objWebCollection = webGetObjectCollection(ScreenName_ObjectName,arrClassNames(intIndexValue),arrPropertyNames(intIndexValue),ddGetItem(ScreenName_ObjectName),"","")
				'Exit the for loop if the object exists
				'##If Not IsEmpty(objWebCollection) Then	
				If Not objWebCollection Is Nothing Then
					Exit For
				End If
			Next
		End If
		'##'Clear Error History
		'##Err.Clear
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		Err.Clear
		'Note: If any object property name in the repository has "Index" then the reusable component  "webGetObjectCollection" directly returns an clickable object
		'or else it returns the collection (Array) of objects. To avoid the run time error we are double checking the code with the below logic
		'##If IsEmpty(objWebCollection) Then
		If objWebCollection Is Nothing Then
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Report the status as failed when element not found to click
			reporterReportEvent "Failed",strReportStepLabel,"The supplied element: '"&ScreenName_ObjectName&"' is not available in the page. Please specify the valid properties-values and re-run script"
			'Click the element with reference to the index value
			'##ElseIf (Lcase(g_strPropertyName1)="index" or Lcase(g_strPropertyName2)="index") Then
		ElseIf Lcase(g_strPropertyIndex)="index" Then
			'Set the single object obtained from collection to objWebElementToClick
			Set objWebElementToClick=objWebCollection
			'Clicking on dynamic element
			'##ElseIf Not IsEmpty(objWebCollection) And ObjectIndex<>"" And (g_strPropertyName1)=""  Then
			'##ElseIf Not IsEmpty(objWebCollection) And ObjectIndex<>"" And Not IsArray(g_arrPropertyNames) Then
		ElseIf Not objWebCollection Is Nothing And ObjectIndex<>"" And Not IsArray(g_arrPropertyNames) Then
			'Verify that given object index parameter is less than the obect collection count.
			If Cint(ObjectIndex)  < objWebCollection.Count Then
				'Set the single dynamic object obtained from collection to objWebElementToClick
			Set objWebElementToClick=objWebCollection(Cint(ObjectIndex))
			Else
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				'Report the status as failed when objects count is less than input parameter "ObjectIndex"
				reporterReportEvent "Failed",strReportStepLabel, "The supplied ObjectIndex not valid for the element '"&ScreenName_ObjectName&_
														". Please supply ObjectIndex less then: "&objWebCollection.Count&" Or supply some other unique properties-values and re-run script"
			End If
		Else
			'Set the first object obtained from collection to objWebElementToClick
			Set objWebElementToClick=objWebCollection(0)
		End If
		If g_FireEvent_EventName<>"" Then
			'Use the fire event method "onmouseover" to the obtained object
			objWebElementToClick.FireEvent g_FireEvent_EventName
			'Change the global variable g_FireEvent_EventName to ""
			g_FireEvent_EventName = ""
		End If		
		'Click on theobtained object
		objWebElementToClick.Click
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Verify error occurance while clicking on the object and report the status accordingly
		'Check for the error occurance
		If errNumber =0 Then
			'Report as passed as there was no error occured  while performing specified operation on  object
			reporterReportEvent "Passed", strReportStepLabel , "Click operation performed successfully on object  : " &ScreenName_ObjectName
			'Call webSetPage to set the page hierarchy (After each click the page will be refreshed and interanally we are handling the page refresh by calling webSetPage)
			'Manjunath L M Modified :After clicking on some objects in ccas browser name is changing. If we use webSetPage it will try to refresh the old page but in reality it's not exist.
			'Because of this scripts will fail.
			'##webSetPage
		Else
			'Report the status as Failed and error description
			reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform click operation on object "&ScreenName_ObjectName&Chr(13) &" with reason: " & errDescription & ". Please verify the object properties in repository. If problem persists then contact automation team."
		End If
End Sub


'###################################################################################################################################################################
' NAME:  webClickElementIfExists
' PURPOSE: Performs click operation on any clickable objects in web application if the object exists.
'NOTE: If the object does not exist in web application there is no failure it continues with the other statements
' PARAMETERS:
'		INPUT      :
'		    ScreenName_ObjectName :  String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			ObjectIndex: Integer that contains the index value of the object. This is to click on the specified clickable object  based on the index value(Not yet implemented).
'			ObjectWait: Integer that verifies Object existence for ObjectWait seconds

'	   OUTPUT :  None
'HISTORY
'NAME:						DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Surendra                              06/01/2017                   NEW
'#################################################################################################################################################################################

Sub webClickElementIfExists(ScreenName_ObjectName,ObjectIndex,ObjectWait)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################		
		Dim objWebElement  'Object that contains created hierarchy object(ex:Browser ().Page().Object())
		Dim strReportStepLabel	'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Web Library ---> webClickElementIfExists"		
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
	    '2) Call webGetObjectHierarchy component to get the object hierarchy for the supplied object
		Set objWebElement= webGetObjectHierarchy(ScreenName_ObjectName) 		
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		Err.Clear
		'3) Verify the object exist
			'Object existence will be verified for ObjectWait sec , if Object exists then only click on Object
			If objWebElement.Exist(ObjectWait) Then
				objWebElement.click
				'Report as passed as there was no error occurred  while performing specified operation on  object
				reporterReportEvent "Passed", strReportStepLabel , "Click operation performed successfully on object  : " &ScreenName_ObjectName				
				
			Else
				'Report as Done with the error description
				reporterReportEvent "Done", strReportStepLabel, "The supplied object: "&ScreenName_ObjectName&Chr(13) &"does not exists in page."			
			
			End If
		'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			
End Sub


'################################################################################################################################################
' NAME:  webClickElementWithLabel
' PURPOSE:  To Perform click operation on any clickable element within a label based on Input values provided
' PARAMETERS:
'		INPUT
'				Label_ScreenName_ObjectName :  [String] Contains object name that refers to the value in the object properties of Label displayed besides the “Clickable Element” on the webpage from object repository.
'				LabelItem_ScreenName_ObjectName : [String]Contains object name that refers to the value in the object properties of label  "Clickable Element” on the webpage from object repository.
'		OUTPUT : None
'HISTORY
'NAME:				DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'MLM			 														NEW
'################################################################################################################################################
Sub webClickElementWithLabel (Label_ScreenName_ObjectName, LabelItem_ScreenName_ObjectName)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		Dim objClickableElementWithLabel		'[Object] Contains the label child clickable element				
		Dim strReportStepLabel		'[String] Contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)    			
		strReportStepLabel = "WebElement Library-->webClickElementWithLabel"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################        		
		'2)	Get the label clickable elementbased on input parameter Label_ScreenName_ObjectName and LabelItem_ScreenName_ObjectName
		Set objClickableElementWithLabel=webGetObjectWithLabel(Label_ScreenName_ObjectName, LabelItem_ScreenName_ObjectName)
		'3)	On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'3.1)	Clear Error
		Err.Clear
		'4)	Do the click operation on the clickable element obtained within the label
		objClickableElementWithLabel.Click
		'3.2)	Get the error number and description, If any while doing click operation
		errNumber = Err.Number
		errDescription = Err.Description
		'3.3)	Clear the error.
		Err.Clear
		'3.4)	Ends the Error Handling Scope.
		On Error GoTo 0
		'5)	Do any error handling if the label clickable element not clicked
		If errNumber <>0 Then
			''#############################################################################
			''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
				'5.1)	Verify the label child clickable element is enabled
				'If objClickableElementWithLabel.Object.isDisabled Then
			''#############################################################################	
			''#############################################################################
			''CODE MODIFICATION
			'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
			''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
			''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.			
				'5.1)	Verify the label child clickable element is enabled
				If objClickableElementWithLabel.Object.Disabled Then
			'END CODE MODIFICATION
			'#############################################################################	
						'5.1.A) Report Failed, As label child clickable element is disabled
						reporterReportEvent "Failed", strReportStepLabel, "The supplied Clickable Element : '"&LabelItem_ScreenName_ObjectName&"' inside the label: '"&Label_ScreenName_ObjectName&_
						"' is disabled . Operation cannot be done. Please recheck the steps in the script and re-run."
				Else				
						'5.1.B)	Report Failed, As while doing the click operation here was a unexpectd error ocuured
						reporterReportEvent "Failed", strReportStepLabel, "Failed to perform operation on Clickable Element : '"&LabelItem_ScreenName_ObjectName&"' inside the label: '"&Label_ScreenName_ObjectName&_
						"'. Due to Reason: '"& errDescription&"'."
				End if
		Else
				'5.1)	Report passed, As there was no error occured  while doing a click on the label clickable element
				reporterReportEvent "Passed", strReportStepLabel, "The click operation performed on Clickable Element: '"&LabelItem_ScreenName_ObjectName&"' inside the label: '"&Label_ScreenName_ObjectName&"' successfully."
		End If		
End Sub


'################################################################################################################################
' NAME:  webCloseAllBrowsers
' PURPOSE:  To closes all the open browser's
'					 **Note : This sub is used in the logout function to close all  browsers except Quality Center.							
' PARAMETERS:
'		 INPUT    : None			
' 		OUTPUT : None
'HISTORY
'NAME:				          DATE:				PURPOSE
'-----------------------------------------------------------------------------------------------------
'Anil                          		11/14/2012     		NEW
'Narasinha             		11/20/2012     		Modified to closing of all opened excel files code is removed.
'Neeraj Gaur			10/17/2013		Added On Error Resume Next Statement for runtime error handling and code for Err object.
'Narasinha				10/22/2013		Added code to close the dialos present on the browsers.
'Neeraj Gaur			11/07/2013	       Added code for error handling with detailed messages.
'Lakshman Kumar A.H.  24/02/2014		Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Varun V				03/19/2014		Updated the code to clear the "Hwnd" key from the data dictionary
'MLM					06/12/2014		Modified to close all the browsers opened in tab or seperatly
'Venkateswarlu v		02/12/2019		This modification is implemented to close the opened Chrome and Firefox browser,
'												as well to support cross browser testing
'Jayarami Reddy Poolu	08/03/2022	  	This modification is implemented to close the opened Browsers except quality center on MS Edge browser
'Jayarami Reddy		10/03/2022       	As part of IE Retirement_Phase3A, Commented out the "ie" related code	
'Sushmashree			12/01/2022		As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'#################################################################################################################################
Sub webCloseAllBrowsers()   		
		'***************************
		'PREREQUISITE CODE
		'###########################################
		'CODE MODIFICATION
		'10/17/2013 Neeraj Gaur Added On Error Resume Next Statement for runtime error handling.
		strReportStepLabel = "Web Library--->webCloseAllBrowsers"
		'Initialize Error Handling
	    'On Error Resume Next' causes execution to continue with the statement immediately following the statement that caused the run-time error
		 On Error Resume Next
		 'Clear error
		 Err.Clear
		'END CODE MODIFICATION
		'###########################################
		'END PREREQUISITE CODE
		'**************************
		'##############################################################################################################################
		'CODE MODIFICATION
		'10/22/2013 Narasinha Code added to close the dialog present on the browser.
				'Creating Description object for dialogs
				 Set dialogDescription=Description.Create				
				 dialogDescription("Class Name").Value="Dialog"
				'Attempt to get the collection of child objects based on the created description.
				set objDialogCollection= Desktop.ChildObjects(dialogDescription)				
				'verify the existence of dialog object
				If objDialogCollection.Count>0 Then
					'Iterate through all existing dialog object
					For dilogIndex=0 to objDialogCollection.Count-1
						'Close all dialogs
						objDialogCollection(dilogIndex).Close
					Next
				End If
		'END CODE MODIFICATION		
		'#############################################################################################################################
	
	'Create description object for browser
	Set objDescription=Description.Create
	objDescription("micClass").Value="Browser"
	
	''#############################################################################################
	''CODE MODIFICATION
	''Venkateswarlu V 02/19/2019 'This modification is implemented to close the opened Chrome and Firefox browser as well to support cross browser testing
	' Settings should be done for Firefox browser to close all tabs at once manually.
	''#############################################################################################
	'CODE MODIFICATION
	'Jayarami Reddy Poolu	08/03/2022	'This modification is implemented to close the opened Browsers except quality center on MS Edge browser
	On Error Resume Next
	Err.Clear
	wait 2
	'Initializing 'BroIndex' as 0
	BroIndex=0
	
	'Attempt to get the collection of opened browsers
	Set objCurrentBrowserCollection = Desktop.ChildObjects(objDescription)
	'verify if opened 'objCurrentBrowserCollection' greater than 0 then
	If objCurrentBrowserCollection.Count > 0 Then
		'Iterate through each browser in the collection
		For BroIndex=0 to objCurrentBrowserCollection.Count-1
			'Get the 'strTitle' property value from browser and assign to the variable 'strTitle'
			strTitle = Trim(lcase(objCurrentBrowserCollection.item(BroIndex).GetROProperty("title")))
			'Get the 'application version' property value from browser and assign to the variable 'strBrowserVersion'
			strBrowserVersion = Trim(lcase(objCurrentBrowserCollection.item(BroIndex).GetROProperty("application version")))
			'Setting the browser index to browser object
			Set objBrowser = objCurrentBrowserCollection(BroIndex)
			'Check 'chromium edge’ is not present in ‘strBrowserVersion’  and  string ‘qualitycenter’ or ‘qcbin’ not present in browser url
			If Not((Instr(strBrowserVersion,"chromium edge")>0 and (Instr(strTitle,"quality center") >0) Or (Instr(strBrowserVersion,"chromium edge")>0 and Instr(strTitle,"qcbin")>0))) Then
				'Delete cookies
				objBrowser.DeleteCookies
				'Clear cache
				objBrowser.ClearCache
				'Close the Browser
				objBrowser.close
			End If
		Next
	'END CODE MODIFICATION
	''#############################################################################################
		
		'Getting the dialog object again from desktop
		Set objDialogCollection= Desktop.ChildObjects(dialogDescription)				
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Do error handling if the opened browser is not closed.
		If objDialogCollection.Count>0 or errNumber = "-2147417851" Then
			'Report the status as Warning and error description
			reporterReportEvent "Warning","Web Library--->webCloseAllBrowsers","Error occurred while closing the browser reason: All dialogs are not closed on the browser.Please close the browsers manually."
		'##ElseIf errNumber <> 0 Then
		ElseIf errNumber <> 0 Then
			'Report the status as Warning and error description
			reporterReportEvent "Warning","Web Library--->webCloseAllBrowsers","Error occurred while closing the browser reason: "& errDescription & ". Please close the browsers manually."
		Else
			'Report as done if the browsers other than quality center are closed
			reporterReportEvent "Passed","Web Library-->webCloseAllBrowsers","All the opened browsers are closed successfully."
		End If		
	ElseIf objCurrentBrowserCollection.Count=0 Then
		Err.Clear
		On Error GoTo 0
		'Report the status as Done If no browser is present.
		reporterReportEvent "Done","Web Library--->webCloseAllBrowsers","No browser is present for closing."
	End If
	'#############################################################################
	'CODE MODIFICATION
	'03/19/2014 Varun V Updated the code to clear the "Hwnd" key from the data dictionary
	'Check the existance of key "Hwnd"  in the data dictionary
	If g_dDictionary.Exists("Hwnd") Then
		'Remove the key "Hwnd" from the data dictionary
		g_dDictionary.Remove("Hwnd")
	End If
	'Change the g_objBrowserFocus value null/empty
	g_objBrowserFocus = ""
	'Change the g_objBrowserFocusIndex value to null/empty
	g_BrowserFocusIndex = ""
	'Change the g_CurrentBrowser to nothing
	Set g_CurrentBrowser=Nothing
	'END CODE MODIFICATION
	'###########################################################################
	'Delete Cookies
	WebUtil.DeleteCookies
End Sub


'#########################################################################################################################################
' NAME: webCloseBrowser
' PURPOSE: Ability to close any required browser window
' PARAMETERS:
'		INPUT
'			ddBrwTitle : String that contains the Title of the browser as per user requirement.
'
'		OUTPUT : None
'HISTORY
'NAME:										DATE:					PURPOSE
'--------------------------------------------------------------------------------------------------------------------------------------
'Jayarami Reddy 							12/16/2020				New
'Udayakumar Reddy							02/16/2021				Modified the code to support MS Edge Chromium browser
'#########################################################################################################################################
public Function webCloseBrowser(ddBrwTitle)

	On Error Resume Next
	'###########################################
	'PREREQUISITE CODE
	strReportStepLabel = "Master Library--->webCloseBrowser"
	brtypeflg=False
	strbrtype=""
	objBrwexist=False
	errNumflag = 0
	'END PREREQUISITE CODE
	'###########################################
	BrwTitle = Trim(ddGetItem(ddBrwTitle))
	
	BrowserType=Trim(Lcase(ddGetItem ("Browser_Type")))
	If BrwTitle<>"" Then
		    Set objDescription=Description.Create
		    objDescription("micClass").Value="Browser"
		    'Attempt to get the collection of opened browsers
		    Set objBrowserCollection=Desktop.ChildObjects(objDescription)
			'verify if opened 'objBrowserCollection' greater than 0 then	
		    If  objBrowserCollection.Count>0 Then
		        'Iterate through each browser in the collection
		        For intIndex=0 to objBrowserCollection.Count-1
		           'Get the reference value from data dictionary for the parameter DDReference
				   strExpectedValue=Trim(Lcase(BrwTitle))
				   'Call below component to get the object value from AUT during runtime
				   strActualValue=Trim(Lcase(objBrowserCollection(intIndex).GetRoProperty("title")))
				   'Get the 'application version' property value from browser and assign to the variable 'strBrowserVersion'
				   strBrowserVersion = Trim(lcase(objBrowserCollection.item(intIndex).GetROProperty("application version")))
				   'Get the 'openURL' property value from browser and assign to the variable 'brurl'
				   brurl=Trim(lcase(objBrowserCollection.item(intIndex).GetROProperty("openurl")))
				   '#########################################################################################################################################
					'CODE MODIFICATION
					''Udayakumar: 	 This modification is implemented to grab the browser type
					If Instr(lcase(strBrowserVersion),"edge") > 0 Then
						strbrtype="msedge"
						errNumflag = 0
					ElseIf Instr(lcase(strBrowserVersion),"chrome") Then
						strbrtype="chrome"
						errNumflag = 0
					Else
						errNumflag = 1
					End If
					'END MODIFICATION
					'#########################################################################################################################################				
				   'Check 'internet explorer’ is not present in ‘strBrowserVersion’  and  string ‘qualitycenter’ or ‘qcbin’ not present in browser url
				   	If Not((Instr(strBrowserVersion,"internet explorer")>0 and (Instr(lcase(brurl),"qualitycenter") >0) Or (Instr(strBrowserVersion,"internet explorer")>0 and Instr(lcase(brurl),"qcbin")>0))) Then
						'Call bellow component to compare the actual value and expected value are equal and assign return value to variable
						blnValuesPartialMatch=testCompareValues(strActualValue,strExpectedValue,True)
						If blnValuesPartialMatch and BrowserType=strbrtype Then
							'Setting the browser index to browser object
			                Set objBrowser = objBrowserCollection(intIndex)
			                	brinx=intIndex
			                	objBrowser.highlight
			                	objBrwexist=true
			                Exit For
			            End If
		            End If
		        Next
		
				If blnValuesPartialMatch=true and objBrwexist=true and errNumflag=0 Then

					Select Case BrowserType
						Case "chrome"
							'Closing the browser as per title provided by user
							objBrowser.close
							brtypeflg=true
							'#############################################################################
							'CODE MODIFICATION
							''Udayakumar: 	 This modification is implemented to support MS Edge Chromium browser
						Case "msedge"
							'Closing the browser as per title provided by user
							objBrowser.close
							brtypeflg=true
							'END MODIFICATION
							'#############################################################################
						Case else
						   	reporterReportEvent "Failed", strReportStepLabel ,BrowserType&" browser not supported as of now."
					End Select	
					
					If brtypeflg=true Then
						'Store the generated run time error number and error description in variables.
						errNumber = Err.Number
						errDescription = Err.Description
						'Clear the error.
						Err.Clear
						'Ends the Error Handling Scope.
						On Error GoTo 0
						'Verify the error occurrence	
						If errNumber =0 Then
							'Report as Passed as there was no error occurred  while Close the browser
							reporterReportEvent "Passed",strReportStepLabel,BrwTitle &" has been closed."
						Else
							'Report as failed with the error description
							reporterReportEvent "Failed",strReportStepLabel,"Failed to perform close operation on the browser having title : '"& BrwTitle &"' Reason: '"& errDescription&"'."
						End If
					End If
				Else
					reporterReportEvent "Failed",strReportStepLabel,BrwTitle&" browser of type " & BrowserType & " does not exist or browser type specified is not supported."
				End If
			Else
				'Report as failed no browsers found
				reporterReportEvent "Failed",strReportStepLabel,"No browser found with title supplied :" & BrwTitle
		    End If
	Else
		'Report as failed with the blank browser title
		reporterReportEvent "Failed",strReportStepLabel,"Please provide a valid browser title. It can not be blank."
	End If
End Function

'###############################################################################################
' NAME:  webCollectCredentials
' PURPOSE:  To create an HTA popup with username and password fields and allow user to enter credentials at runtime
' PARAMETERS:
'			INPUT  :
'				UserName : Dictionary object( Key) that store the username given at runtime
'				Password : Dictionary object( Key) that store the password given at runtime
'			OUTPUT :  None						
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Somika Jain  		    	    11/06/2019				    New
'Jayarami Reddy  		    09/01/2022				    Updated the component to launch credentials popup using HTA scince IE is retiring
'###############################################################################################
Function webCollectCredentials(UserName, Password)
	strReportStepLabel = "Web Library ----> Credentials popup validation"
	'Force causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	
	'Verify if username and password is empty
	If Trim(UserName)<>"" and Trim(Password)<>"" Then
		'###########################################################################
		'CODE MODIFICATION
		 'Jayarami reddy 	  09/01/2022 	'This modification is to launch credentials popup using HTA
		'Create FSO object
		Set objFSO=CreateObject("Scripting.FileSystemObject")
		'Create Shell object
		Set objWShell = createObject("WScript.Shell")
		
		'Get the APPDATA path and assign to variable
		appData = objWShell.expandEnvironmentStrings("%APPDATA%")
		'Form the path with UFT folder name
		appDataUFTPath = appData&"\UFT"
		
		'Verify UFT folder in APPDATA path
		If objFso.FolderExists(appDataUFTPath) Then
			'Write Report as UFT folder created successfully at &appData
			reporterReportEvent "Passed",strReportStepLabel,"UFT folder already exist at "&appData
		Else
			'Create UFT folder at APPDATA path
			objFSO.CreateFolder appDataUFTPath		
			'Write Report as UFT folder created successfully at &appData
			reporterReportEvent "Passed",strReportStepLabel,"UFT folder created successfully at "&appData
		End If
	
		'Form the webCollectCredDialog.hta popup path and assign to variable
		htaFile = appDataUFTPath&"\webCollectCredDialog.hta"
	
		'Verify .hta file
		If objFSO.FileExists(htaFile) Then
			'Get the .hta filepath and delete
			Set objFile_hta = objFSO.GetFile(htaFile)
			objFile_hta.Delete
			'Write Report as Deleted existing hta file successfully
			reporterReportEvent "Passed",strReportStepLabel,"Deleted existing hta file successfully."
		End If

		'Text of hta popup file
		htaTxtInitialization = "<head><title>Enter Credentials</title>"&"<HTA:APPLICATION MAXIMIZEBUTTON="&chr(34)&"no"&chr(34)&" "&"SYSMENU="&chr(34)&"no"&chr(34)&"></head><script language="&chr(34)&"VBScript"&chr(34)&">Window.ResizeTo "&"400"&","&" 350"&""
		htaTxtPopup = "</script><body><br><br><br><br>Username : <input type= "&chr(34)&"text"&chr(34)&"name="&chr(34)&"Username"&chr(34)&" SIZE = "&chr(39)&"35"&chr(39)&"></P>Password&nbsp;: <input type="&chr(34)&"password"&chr(34)&" name="&chr(34)&"Password"&chr(34)&" SIZE= "&chr(39)&"35"&chr(39)&"><P align=center><input type="&chr(34)&"button"&chr(34)&"value="&chr(34)&" OK "&chr(34)&" "&"id="&chr(34)&"OK"&chr(34)&" "&"onclick="&chr(34)&"OnOKButton"&chr(34)&">&nbsp;<input type="&chr(34)&"button"&chr(34)&"value="&chr(34)&" Cancel "&chr(34)&" "&"id="&chr(34)&"Cancel"&chr(34)&" "&"onclick="&chr(34)&"OnCancelButton"&chr(34)&"></P></body>"
		
		'Create .hta file
		Set objFile = objFSO.CreateTextFile(htaFile,True)
		'Write to a hta file
		objFile.Write htaTxtInitialization & vbCrLf
		objFile.WriteLine "Sub Window_OnLoad"
		objFile.WriteLine vbTab & "UserName.value = userinput"
		objFile.WriteLine vbTab & "password.value = userinput"
		objFile.WriteLine "End Sub" & vbCrLf
		objFile.WriteLine "Sub OnOKButton()"
		objFile.WriteLine vbTab & "If ( Trim(UserName.value) = """" ) OR ( Trim(password.value) = """" ) Then"
		objFile.WriteLine vbTab & vbTab & "Msgbox ""Username and Password cannot be blank. Please enter valid Username and Password."""
		objFile.WriteLine vbTab & "Else"
		objFile.WriteLine vbTab & vbTab & "document.getElementById(""OK"").disabled = true"
		objFile.WriteLine vbTab & "End If"
		objFile.WriteLine "End Sub" & vbCrLf
		objFile.WriteLine "Function OnCancelButton()"
		objFile.WriteLine vbTab & "document.getElementById(""Cancel"").disabled = true"
		objFile.WriteLine "End Function" & vbCrLf
		objFile.Write htaTxtPopup & vbCrLf
		'Close the file
		objFile.Close
		
		'Form command line
		CmdCommand = "%WINDIR%\system32\mshta.exe "&Chr(34)& htaFile &Chr(34)&" "&"&&exit"
		'Create shell object
		Set objShell = CreateObject("WScript.Shell")
		'Run the command
		objShell.Run CmdCommand, 0, false
		
		'Force execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		Err.Clear
		
		'Create the objects and assign to variable
		Set objCredPopup = Window("nativeclass:=HTML Application Host Window Class","regexpwndtitle:=Enter Credentials","text:=Enter Credentials")
		Set objOkBtn_disabled = Window("nativeclass:=HTML Application Host Window Class","regexpwndtitle:=Enter Credentials","text:=Enter Credentials").Page("title:=Enter Credentials").WebButton("html id:=OK", "html tag:=INPUT","disabled:=1")
		Set objPassword = Window("nativeclass:=HTML Application Host Window Class","regexpwndtitle:=Enter Credentials","text:=Enter Credentials").Page("title:=Enter Credentials").WebEdit("html tag:=INPUT","name:=Password")
		Set objUsername = Window("nativeclass:=HTML Application Host Window Class","regexpwndtitle:=Enter Credentials","text:=Enter Credentials").Page("title:=Enter Credentials").WebEdit("html tag:=INPUT","name:=Username")
		Set objCancelBtn_disabled = Window("nativeclass:=HTML Application Host Window Class","regexpwndtitle:=Enter Credentials","text:=Enter Credentials").Page("title:=Enter Credentials").WebButton("html id:=Cancel", "html tag:=INPUT","disabled:=1")

		'Verify Credential popup
		If objCredPopup.Exist(10) Then
			'Start loop until username and password entered successfully popup exist
			Do While not (objOkBtn_disabled.Exist(3))
				If(objCancelBtn_disabled.Exist(3)) then
					'Close the credential popup
					objCredPopup.Close
					Err.Clear
			  		'Save the excel sheet
					oWB.Save
					'Close the excel sheet & excel application
					oWB.Close
					'quit the excel
					oExcel.Quit
					'Release the objects
					Set oExcel = Nothing
					Set oWB= Nothing
					'Write Report as Since credential popup is cancelled, execution has been stopped
					reporterReportEvent "Failed",strReportStepLabel,"Since credential popup is cancelled, execution has been stopped."
					Exit Function
				End  If
			Loop
			
			'Get username and password
			vUserName = objUsername.GetROProperty("value")
			vPassword = objPassword.GetROProperty("value")
			'Close the credential popup
			objCredPopup.Close
			
			'Add the UserName into data dictionary.
			ddAddItem UserName,vUserName
			'Encrypt the password
			encPassword=crypt.encrypt(vPassword)
			'Add the encrypted Password into data dictionary.
			ddAddItem Password,encPassword
			'Get the error number
			errNumber = Err.Number
			'Get the error description
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Verify if the credentials are entered in the popup
			If errNumber = 0 Then
				'Report as passed when credentials are entered in the popup successfully
				reporterReportEvent "Passed",strReportStepLabel,"Username '" &vUserName& "' and Password '" &encPassword& "'entered in the popup successfully."
			Else
				'Report as failed when Failed to enter credentials
				Err.Clear
				On Error GoTo 0
				reporterReportEvent "Failed",strReportStepLabel,"Something went wrong. Failed to collect credentials due to the following error '" &errDescription& "'"
			End If
		End If 
	Else
		'Report as failed when 'UserName' and 'Password' provided are empty
		reporterReportEvent "Failed",strReportStepLabel, "UserName and Password are mandatory parameter so please provide valid 'UserName and Password'"
		Exit Function
	End If		
	
	'Release the objects
	Set objFile_hta = Nothing
	Set objShell= Nothing
	Set objFSO = Nothing
	'END CODE MODIFICATION
	'###########################################################################
End Function

'#########################################################################################################
' NAME:  webDialogClick
' PURPOSE: To click on the button appeared on the dialog for the browser name passed in.
' PARAMETERS:
'		INPUT:					
'					strButtonText : Key name reference to the data dictionary record that contains name of the button to click.
'		OUTPUT : 	
'					None
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'SunilKumar						05/22/2013					NEW
'Manjunath L M              07/17/2013            Modified to use the current Browser available in global variable g_CurrentBrowser
'Manjunath						07/19/2013			 Modified to set the 'g_CurrentBrowser' for present browser
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Surendra Reddy Devu	 06/01/2016					Modified to set the 'g_CurrentBrowser' for present browser only.

													'Note: The component 'webSetPage' perform below activities(commented now).
													'1)Set the 'g_CurrentBrowser' for present browser
													'2)Set the 'g_objBrowserPage' for present page(not required for dialog operations)
													'3)webWaitUntilPageRefresh--->Wait until the page become stable/ready stage(because of this , new popup/dialog related operations are not working).
													
'#########################################################################################################
Sub webDialogClick(strButtonText)
'Call the reusable component "webSetPage"to set the description  of browser and page hierarchy
'#############################################################################
'CODE MODIFICATION
'Surendra Devu	06/01/2016				Commented 'webSetPage' component.
'webSetPage
'END CODE MODIFICATION
'###########################################################################
'On Error Resume Next' causes execution to continue with the statement immediately following the statement that caused the run-time error
On Error Resume Next
Err.Clear
'#############################################################################
'CODE MODIFICATION
'Surendra Devu		06/01/2016				call component to set current browser
	Set g_CurrentBrowser=webSetCurrentBrowser(g_objBrowserFocus)
'END CODE MODIFICATION
'###########################################################################

'Verify the existance of the current browser
If g_CurrentBrowser.Exist Then
		'Assign browser dialog object using the standard default property values
		Set objCurrentBrowserDialog=g_CurrentBrowser.Dialog("Class Name:=Dialog","nativeclass:=#32770")
		'Verify the existance of dialog
		'#############################################################################
		'CODE MODIFICATION
		'Surendra Devu		06/01/2016				Object existence will be verified for 100 sec , and return the status to the component
				
		If objCurrentBrowserDialog.Exist(100) Then
		'END CODE MODIFICATION
		'###########################################################################		
			'create a description for the win button object in the dialog object
			Set objDialogButton=Description.Create
			objDialogButton("nativeclass").Value="Button"
			objDialogButton("text").value=ddGetItem(strButtonText)
			'Get the button object collection in the dialog
			Set objDialogButton=objCurrentBrowserDialog.ChildObjects(objDialogButton)
			'Verify that button exist in the dialog
			If objDialogButton.Count > 0 Then
				'Clear the error
				Err.Clear
				'Click on the button exist in the dialog
				objDialogButton(0).Click
'Store the generated run time error number and error description in variables.
				errNumber = Err.Number
				errDescription = Err.Description
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				'Verify the error occurance
				If errNumber = 0 Then
					'Reporter the event as done
					reporterReportEvent "Passed","webElement Library ---> webDialogClick","Dialog exist in the browser and clicked on the button of name"& ddGetItem(strButtonText)
				Else
					'Reporter the event as Failed
					reporterReportEvent "Failed","webElement Library ---> webDialogClick","Dialog exist in the browser and Failed to perform click opearation on the button exist on the dailog, Reason:= "& errDescription
				End If
			Else
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
			'Report the event as failed
				reporterReportEvent "Failed","webElement Library ---> webDialogClick","Dialog exist in the browser and button of name"& ddGetItem(strButtonText) &"Not exist on the dailog to click"
			End If
		Else
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Report the event as failed
			reporterReportEvent "Failed","webElement Library ---> webDialogClick","Dialog not exist on the bowser of name :="&g_CurrentBrowser.GetROProperty("title")
		End If
	Else
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Report the event as failed
		reporterReportEvent "Failed","webElement Library ---> webDialogClick","Browser of name:= "&g_CurrentBrowser.GetROProperty("title")&" not exist"
	End If 		
End Sub


'#########################################################################################################
' NAME:  webDialogGetText
' PURPOSE: To get the complete text  from the dialog appeared in the browser of name passed in.
' PARAMETERS:
'		INPUT:
'					None
'		OUTPUT : 	
'					webDialogGetText :String that contains the text value displayed on the dialog .
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'SunilKumar						05/21//2013					NEW
'Manjunath L M              07/17/2013            Modified to use the current Browser available in global variable g_CurrentBrowser
'Manjunath L M				07/19/2013			 Modified to set the current browser object to 'g_CurrentBrowser'	
'Manjunath L M				07/30/2013			Modified component name from webGetDialogText to webDialogGetText
'Surendra Reddy Devu	    06/01/2016			Modified to set the 'g_CurrentBrowser' for present browser only.

													'Note: The component 'webSetPage' perform below activities(commented now).
													'1)Set the 'g_CurrentBrowser' for present browser
													'2)Set the 'g_objBrowserPage' for present page(not required for dialog operations)
													'3)webWaitUntilPageRefresh--->Wait until the page become stable/ready stage(because of this , new popup/dialog related operations are not working).

'#########################################################################################################
Private Function webDialogGetText
'To set the current browser object to 'g_CurrentBrowser' global variable
'#############################################################################
'CODE MODIFICATION
'Surendra Devu		06/01/2016				Commented 'webSetPage' component.
'webSetPage
'END CODE MODIFICATION
'###########################################################################

'#############################################################################
'CODE MODIFICATION
'Surendra Devu		06/01/2016				call component to set current browser
	Set g_CurrentBrowser=webSetCurrentBrowser(g_objBrowserFocus)
'END CODE MODIFICATION
'###########################################################################
'Verify the existance of the current browser
If g_CurrentBrowser.Exist Then
		'Assign browser dialog object using the standard default property values
		Set objCurrentBrowserDialog=g_CurrentBrowser.Dialog("Class Name:=Dialog","nativeclass:=#32770")
		'Verify the existance of dialog
		'#############################################################################
		'CODE MODIFICATION
		'Surendra Devu		06/01/2016				Object existence will be verified for 100 sec , and return the status to the component
				
		If objCurrentBrowserDialog.Exist(100) Then
		'END CODE MODIFICATION
		'###########################################################################	
			'Create a description for text object in the dialog
			Set objDialogText=Description.Create
			objDialogText("nativeclass").Value="Static|SysLink"
			'Get the text object collection in the dialog
			Set objDialogTextCollection=objCurrentBrowserDialog.ChildObjects(objDialogText)
			'Initialise the text value
			tempText=""
			'verify the existance of text object with in the dialog
			If objDialogTextCollection.Count>0 Then
				'Iterate through all text objects and retrive static text of dialog box to a variable
				For indexText=0 to objDialogTextCollection.Count-1
					'Add the text values and concatenate with all
					tempText=tempText&Trim(objDialogTextCollection(indexText).GetROProperty("text"))
				Next
				'Assign the text value to the function name
				webDialogGetText=tempText
				'Reporter the event as passed
				reporterReportEvent "Done","webElement Library ---> webDialogGetText","Dialog exist in the browser and the text value retrieved is:" & tempText
			Else
				'Reporter the event as warning
				reporterReportEvent "warning","webElement Library ---> webDialogGetText","Dialog exist in the browser and no text is displayed on dailog"
			End If
		Else
			'Report the event as failed
			reporterReportEvent "Failed","webElement Library ---> webDialogGetText","Dialog not exist on the bowser of name :="&g_CurrentBrowser.GetROProperty("title")
		End If
	Else
		'Report the event as failed
		reporterReportEvent "Failed","webElement Library ---> webDialogGetText","Browser of name:="&g_CurrentBrowser.GetROProperty("title")&"not exist"
	End If
End Function


'######################/###################################################################################
' NAME:  webDialogSetElementText
' PURPOSE: To set input text on the editbox of  the dialog .
' PARAMETERS:
'		INPUT:		
'					strAttachedTextofEditBox : [string] Contains attached text property of the dialog editbox .
'                	strTextToEnterInEditBox   		:[string] Contains the text to be entered in dialog editbox.
'	    OUTPUT :    None
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Rashmi.c						09/22/2014					NEW
'########################################################################################################
Sub webDialogSetElementText(strAttachedTextofEditBox,strTextToEnterInEditBox)
	' PREREQUISITE CODE
		'  Declarations
			' ##############################################################
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			 strReportStepLabel = "webElement Library --> webDialogSetElementText"
	 ' END PREREQUISITE CODE
	 ' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	 ' ###############################################################
'verify strAttachedTextofEditBox  is not empty
If strAttachedTextofEditBox<>"" Then
	   'Call the reusable component "webSetPage"to set the description  of browser and page hierarchy
	   	webSetPage
		'On Error Resume Next' causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		Err.Clear
		'Assign browser dialog object using the standard default property values
		Set objCurrentBrowserDialog=g_CurrentBrowser.Dialog("Class Name:=Dialog","nativeclass:=#32770")
		'Verify the existance of dialog
		If  objCurrentBrowserDialog.Exist Then
				'create a description for the win Edit object within the dialog
				Set objDialogEdit=Description.Create
				objDialogEdit("nativeclass").Value="Edit"
				objDialogEdit("attached text").value=strAttachedTextofEditBox'"File &name:"
				'Get the editbox object collection in the dialog
				Set objDialogEditBox=objCurrentBrowserDialog.ChildObjects(objDialogEdit)
				'Verify that editbox exist in the dialog
				If objDialogEditBox.Count > 0  Then
					objDialogEditBox(0).set strTextToEnterInEditBox
					'Store the generated run time error number and error description in variables.
					errNumber = Err.Number
					errDescription = Err.Description
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0
					'Verify the error occurance
					If errNumber = 0 Then
						'Reporter the event passed,set operation performed succesfully
						reporterReportEvent "Passed",strReportStepLabel,"Dialog exist in the browser and Set operation performed successfully on edit box having attached text property: '"&strAttachedTextofEditBox&"' with input text: '"&strTextToEnterInEditBox&"'."
					Else
						'Reporter the event Failed,as set action cannot be oerformed on the edit box due to unexpected error
						reporterReportEvent "Failed",strReportStepLabel,"Dialog exist in the browser.But, Failed to do Set operation on edit box having attached text property: '"&strAttachedTextofEditBox&_
																									"'. Due to Reason:'"& errDescription&"'."
					End If
				End If
		Else
			    'Report the event failed,as dialog does not exist on browser
				reporterReportEvent "Failed",strReportStepLabel,"Dialog does not exist on the browser:="&g_CurrentBrowser.GetROProperty("title")
		End If
	Else
		' Report failed, As Supplied Attached text property of the dialog edit box is empty.
		reporterReportEvent "Failed",strReportStepLabel,"strAttachedTextofEditBox cannot be empty .please enter valid  Editbox attached text property value and re-run the script"
End If
End Sub


'#########################################################################################################
' NAME:  webDialogVerifyButtonText
' PURPOSE: To verify the web dialog button name  and expected value from data dictionary are equal
' PARAMETERS:
'		INPUT:					
'					strButtonText : Key name reference to the data dictionary record that contains name of the button to verify.
'		OUTPUT : 	
'					None
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V       					09/26/2013					NEW
'Varun V						10/09/2013					Removed the Browser existance logic
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#########################################################################################################
Sub webDialogVerifyButtonText(strButtonText)
'Call the reusable component "webSetPage"to set the description  of browser and page hierarchy
webSetPage
'####################################################################################################
'	'CODE MODIFICATION
'	'10/09/2013 Varun V  Removed the Brower existance Logic
	   '##Verify the existance of the current browser
	   '##If g_CurrentBrowser.Exist Then
			'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			Err.Clear
			'Assign browser dialog object using the standard default property values
			Set objCurrentBrowserDialog=g_CurrentBrowser.Dialog("Class Name:=Dialog","nativeclass:=#32770")
'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Verify any run time error occurs
			If errNumber = 0 Then
				'Verify the existance of dialog
				If objCurrentBrowserDialog.Exist Then
					'create a description for the win button object in the dialog object
					Set objDialogButton=Description.Create
					objDialogButton("nativeclass").Value="Button"
					objDialogButton("text").value=ddGetItem(strButtonText)
					'Get the button object collection in the dialog
					Set objDialogButton=objCurrentBrowserDialog.ChildObjects(objDialogButton)
					'Verify that button name is matching with the passed paramenter.
						If objDialogButton.Count = 1 Then
						reporterReportEvent "Passed","webElement Library ---> webDialogVerifyButtonText "&ddGetItem(strButtonText),"Dialog button exist in the browser"
						Else If objDialogButton.Count < 1 Then
							reporterReportEvent "Failed","webElement Library ---> webDialogVerifyButtonText","DialogButton is not exist in the browser."
						Else
							reporterReportEvent "Failed","webElement Library ---> webDialogVerifyButtonText","More than 1 button objects found with same name."
						End If
						End If
				Else
					'Report the event as failed
					reporterReportEvent "Failed","webElement Library ---> webDialogVerifyButtonText","Dialog not exist on the bowser of name :="&g_CurrentBrowser.GetROProperty("title")
				End If
			Else
				reporterReportEvent "Failed","webElement Library ---> webDialogVerifyButtonText","Failed to perform the operation"& errDescription
			End If
	'	##Else
	'		'##Report the event as failed
	'		##reporterReportEvent "Failed","webElement Library ---> webDialogVerifyButtonText","Browser of name:= "&g_CurrentBrowser.GetROProperty("title")&" not exist"
	'	##End If
	'END CODE MODIFICATION
	'#######################################################################################################
End Sub


'################################################################################################################################################
'Name :  webDialogVerifyTextEqual
' PURPOSE:  To verify the text value displayed on the webdialog and expected value from data dictionary are equal
'PARAMETERS:
'		INPUT :					
'					DDReference: Reference to a expected value stored in the data dictionary
'		OUTPUT : None
'HISTORY
'		NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Sunil Kumar                    05/22/2013            To verify the dialog text value and expected text value are equal
'Manjunath L M				07/30/2013			Modified component name from webVerifyDialogTextEqual to webDialogVerifyTextEqual
'################################################################################################################################################
Sub webDialogVerifyTextEqual(DDReference)
		'Call below component to get the text displayed on the Dialog
		strActualValue=webDialogGetText
		'Get the referance value from data dictionary for the parameter DDReference
		strExpectedValue=ddGetItem(DDReference)
		'Call below component to compare the actual value and expected value are equal and assign return value to variable
		blnDialogTextEqual=testCompareValues(strActualValue,strExpectedValue,True)
		'Verify the boolean value is true/false
		If blnDialogTextEqual Then
			'Report the status as pass  if DDReference value and dialog text are equal
			reporterReportEvent "Passed","web Test Library ---> webDialogVerifyTextEqual","Expected DDreference and actual dialog text values are equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Dialog text  value is "&strActualValue
		Else
			'Report the status as pass if DDReference value and dialog text are not equal
			reporterReportEvent "Failed","web Test Library ---> webDialogVerifyTextEqual","Expected DDreference and actual dialog text value are not equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Dialog text  value is"&strActualValue
		End If
End Sub


'################################################################################################################################################
'Name :  webDialogVerifyTextPartial
' PURPOSE:  To verify the text value displayed on the webdialog and expected value from data dictionary are partially equal.
'PARAMETERS:
'		INPUT :					
'					DDRef_ValueToVerify: Reference to a value stored in the Data Dictionary, which will be partially compared against the actual dialog text value.
'		OUTPUT : None
'HISTORY
'		NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Varun V                    		07/08/2014				            New
'################################################################################################################################################
Sub webDialogVerifyTextPartial(DDRef_ValueToVerify)
		'************************************************
		'PREREQUISITE CODE
		'1) Declarations		
			Dim strActualValue 			  '(String)Actual value retreived from the dialog box		
			Dim strExpectedValue 	   '(String)Expected value to match partially 		
			Dim blnDialogTextPartial    '(Boolean)Staus of the partial match result			
			Dim strReportStepLabel    '(String)Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
					strReportStepLabel = "Web Test Library-->webDialogVerifyTextPartial"	
					blnDialogTextPartial = False		
		'END PREREQUISITE CODE
		'*********************************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'Verify the DDRef_ValueToVerify parameter is Empty or Not
		If DDRef_ValueToVerify <> "" Then
			'Call webDialogGetText component to get the text displayed on the Dialog and assign to variable strActualValue
			strActualValue=webDialogGetText
			'Get the expected value from data dictionary for the parameter DDRef_ValueToVerify and assign to variable strExpectedValue
			strExpectedValue=ddGetItem(DDRef_ValueToVerify)
			'Call testCompareValues component to compare the actual value and expected value are partially equal and assign return value to variable blnDialogTextPartial
			blnDialogTextPartial=testCompareValues(strActualValue,strExpectedValue,False)
			'Verify the boolean value is true/false
			If blnDialogTextPartial Then
				'Report the status as passed  if DDRef_ValueToVerify value and dialog text value are partially matching
				reporterReportEvent "Passed",strReportStepLabel,"Expected DDRef_ValueToVerify "&Chr(13)&"'"&strExpectedValue&"'"&Chr(13)&" and actual dialog text value "&Chr(13)&"'"&strActualValue&"'"&Chr(13)&" are partially matching."
			Else
				'Report the status as failed if DDRef_ValueToVerify value and dialog text are not matching
				reporterReportEvent "Failed",strReportStepLabel,"Expected DDRef_ValueToVerify "&Chr(13)&"'"&strExpectedValue&"'"&Chr(13)&" and actual dialog text value "&Chr(13)&"'"&strActualValue&"'"&Chr(13)&" are not matching."
			End If
		Else
			'Report the status as failed  if DDRef_ValueToVerify value has empty value
			reporterReportEvent "Failed",strReportStepLabel,"Expected DDRef_ValueToVerify parameter is Empty.Please pass a valid value."
		End If
End Sub


'###################################################################################################################################################
' NAME:  webGetElementValue
' PURPOSE:  Get the object value from AUT during runtime
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT :
'			webGetElementValue : Text that contains the property value will be added to data dictionary
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'SunilKumar						08/25/2012					NEW
'Manjunath 						 11/22/2012					 Designed as per the architecture diagram
'Manjunath                       01/23/2013                  Removed Referance values section .
'Manjunath                       03/07/2013                  Changed from component to sub as per the comments
'###################################################################################################################################################
Sub webGetElementValue(ScreenName_ObjectName)
'Get the web object based on input parameter : ScreenName_ObjectName
Set objWeb=webGetObject(ScreenName_ObjectName)
	'Array that contains the object class names
	arrClassNames=Array("link;webelement","webedit;weblist;webradiogroup","webcheckbox","webbutton","image")		
	'Array that contains the object properties
	arrPropertyNames=Array("innertext","value","checked","name","file name")
	'Iterate through each item in the array to get the property name and its value
	For intIndexValue=0 to UBound (arrClassNames)
		'Get the property name of the specified object
		If Instr(1,arrClassNames(intIndexValue), LCase(g_strObjectType))<>0 Then
			'Get the value from the object
			strDefaultValue=Trim(objWeb.GetROProperty(arrPropertyNames(intIndexValue)))
			Exit For			
		End If
	Next
	'Set the retrieved value to dictionary
	ddAddItem "webGetElementValue",strDefaultValue
	'Report the status of the component as Done with retrieved value
	reporterReportEvent	"Done","WebElement Library --->webGetElementValue","Retrieved default value for the object " & ScreenName_ObjectName & " is : "&strDefaultValue
End Sub


'###################################################################################################################################################
' NAME:  webGetElementValueInUniqueVar
' PURPOSE:  Get the object value from AUT during runtime
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			UniqueVar:String that contains an unique variable name
'		OUTPUT :
'			UniqueVar : Text that contains the property value will be added to data dictionary
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Jayarami Reddy						02/27/2020					New
'###################################################################################################################################################
Sub webGetElementValueInUniqueVar(ScreenName_ObjectName, UniqueVar)
	
	Dim flgChkDupVar
	flgChkDupVar = False
	' Check if uniquevar key already exists in dictionary object
	If StrComp (UniqueVar, ddGetItem (UniqueVar)) = 0 Then
		flgChkDupVar = False
	Else
		flgChkDupVar = True
	End If	
	
	'Proceed only if duplicate key does not exist
	If (flgChkDupVar = False) Then
		
		'Get the web object based on input parameter : ScreenName_ObjectName
		Set objWeb=webGetObject(ScreenName_ObjectName)
		'Array that contains the object class names
		arrClassNames=Array("link;webelement","webedit;weblist;webradiogroup","webcheckbox","webbutton","image")		
		'Array that contains the object properties
		arrPropertyNames=Array("innertext","value","checked","name","file name")
		'Iterate through each item in the array to get the property name and its value
		For intIndexValue=0 to UBound (arrClassNames)
			'Get the property name of the specified object
			If Instr(1,arrClassNames(intIndexValue), LCase(g_strObjectType))<>0 Then
				'Get the value from the object
				strDefaultValue=Trim(objWeb.GetROProperty(arrPropertyNames(intIndexValue)))
				Exit For			
			End If
		Next
		'Add the retrieved value to dictionary with UniqueVariable(UniqueVar)
		ddAddItem UniqueVar,strDefaultValue	
		'Report the status of the component as Done with retrieved value
		reporterReportEvent	"Done","WebElement Library --->webGetElementValueInUniqueVar","Retrieved default value for the object " & ScreenName_ObjectName & " is : " & strDefaultValue & " and stored in key : " & UniqueVar
	Else
		'Report that duplicate key exist & value can not stored
		reporterReportEvent	"Fail","WebElement Library --->webGetElementValueInUniqueVar","Can not store default value of the object : " & ScreenName_ObjectName & " in key : " & UniqueVar & ". Please make sure that key is not duplicate."
	End If

End Sub


'##############################################################################################################################################
' NAME:  webGetObject
' PURPOSE: To get the web object based on specified input parameter "ScreenName_ObjectName"
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT :
'				webGetObject : Returns the web object
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Anil						11/11/2012					NEW
'Anil						11/18/2012					Designed as per the architecture diagram
'Sunil					   01/23/2013				   Disabling the Error Handler  code is removed
'Manjunath			10/29/2013					Modified to get the objects/object collection for mandotory and assistive properties
'Lakshman Kumar A.H.     24/02/2014					Removed Error Handling initialization.
'Lakshman Kumar A.H.     24/03/2014					Modified as per the changes done w.r.t the component "webGetObjectCollection"
'Varun V						09/22/2014					Modified to include FireEvent trigger before doing the actual operation.
'##############################################################################################################################################
Private Function webGetObject(ScreenName_ObjectName)
''PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	Dim objWebCollection  'object that contains the collectionobject
	Dim strReportStepLabel         		  'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Web Library-->webGetObject"
	'##'2) Initialize Error Handling
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
	'##'Clear Error
	'##Err.Clear
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	'3)Get the collection of object for the specified input parameter  "ScreenName_ObjectName"
	Set objWebCollection=webGetObjectCollection(ScreenName_ObjectName,"","","","","")
	'##'Clear the error.
	'##Err.Clear
	'##'Ends the Error Handling Scope.
	'##On Error GoTo 0
	'4)Check for  retrieved value is object
	'##If Not IsEmpty(objWebCollection) Then		
	If Not objWebCollection Is Nothing Then	
	       'Check for the object properties that has "Index" property name mentioned in the object repository.
		'This is important to note that the below code considers the Index property while taking the collection object
		'###############################################################
		'CODE MODIFICATION
		'10/29/2013		Modified to get the objects/object collection for mandotory and assistive properties
		'##If LCase(g_strPropertyName1)="index" Or LCase(g_strPropertyName2)="index" Then
		If LCase(g_strPropertyIndex)="index" Then
		'END CODE MODIFICATION
		'######################################
				'Return the object if any property name in g_arrPropertyNames is index
				Set webGetObject=objWebCollection  ' If Index value is not empty then Object itself is returned from 'webGetObjectCollection' component
			Else
				'Get the first web object in the collection and return to the component
				Set webGetObject=objWebCollection(0)	'Returns the collection object to component
		End If	
		'###########################################################################
		'CODE MODIFICATION
		'09/22/2014			Varun V     Modified to include FireEvent trigger before doing the actuall operation.
		'Check 	g_FireEvent_EventName is Null and object type is not a "webTable"
		If g_FireEvent_EventName<>"" and Not UCASE(g_strObjectType) = "WEBTABLE" Then
			'Use the fire event method "onmouseover" to the obtained object
			webGetObject.FireEvent g_FireEvent_EventName
			'Change the global variable g_FireEvent_EventName to ""
			 g_FireEvent_EventName = ""
		End If		
		'END CODE MODIFICATION
		'############################################################################	
		'Report the status as passed
		reporterReportEvent "Passed", strReportStepLabel ,"Web object found successfully : "&ScreenName_ObjectName	
	Else	
		'Report the status as Failed if no object found
		reporterReportEvent "Failed", strReportStepLabel ,"The supplied element: '"&ScreenName_ObjectName&"' is not available in the page. Please specify the valid properties-values in Object Repository and re-run script"
	End If	
End Function


'#################################################################################################################################################
' NAME: webGetObjectCollection
'PURPOSE: Gets the object collection in the web page
'PARAMETERS:
'		INPUT:
'			ScreenName_ObjectName - String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			webClass	-	String that contains the Class name of the element to search.
'			propertyName1  - String that contains Property Name1 of the object (ex: name/html id/file name)
'			propertyValue1  - Text value for the parameter 'PropertyName1'
'			propertyName2  - String that contains Property Name2 of the object (ex: index/name/html id/file name)											
'			propertyValue2  - Text value for the parameter 'PropertyName2'
'											 - Note: If user is passing property 'index' ,it's mandatory that propertyName2 should be index and the value of 'index' should be in propertyValue2(0,1,2 ..)
'		OUTPUT:
'			webGetObjectCollection - Returns the object collection
'			g_strPropertyIndex    'String that contains the property name index which will be used in webGetObject component to get the first object
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'C.MCMILLAN		  11/12/2012					NEW
'Anil						11/18/2012				   MODIFIED
'Sunil 					   01/15/2013				MODIFIED to include the calling function "ddGetObjectProperties" in a conditional statement
'C.McMillan			03/25/2013					Note:  The function is only initialized if an object is found.  For negative functions the user should use
'																		the "IsEmpty" compartior.
'Manjunath 			03/28/2013                  Updated the header that the user can pass an index using PropertyName2/ProvertyValue2
'Manjunath			10/29/2013					Modified to get the objects/object collection for mandotory and assistive properties
'Lakshman Kumar A.H.     20/03/2014					Removed Error Handling Initialization.
'Lakshman Kumar A.H.     24/03/2014					Returned a Nothing object whenever it fails to return an object collection.
'Vani S									Handled for Visible property
'####################################################################################################################################################
Private Function webGetObjectCollection(ScreenName_ObjectName,webClass,PropertyName1,PropertyValue1,PropertyName2,PropertyValue2)
''PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	Dim intProprtyIndexValue  'Integer that contains the property value  for the index property 	
	Dim arrPropertyName         'Array that contains all the property names
	Dim arrPropertyValue		 'Array that contains all the property values
	Dim objWebCollection        'object that contains the child objcets for the supplied description
	Dim strReportStepLabel         		  'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)		
		Set webGetObjectCollection=Nothing ' Assign the object return collection as nothing.
		strReportStepLabel = "Web Object Properties Library-->webGetObjectCollection"
	'##'2) Initialize Error Handling
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
	'##'Clear Error
	'##Err.Clear
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	'CODE MODIFICATION
	'10/29/2013  Manjunath Modified to get the objects/object collection for mandotory and assistive properties
	   '3)Verify that properties are passed with the function.
	   If Trim(webClass)="" And Trim(PropertyName1)=""  Then
			'Verify object exists in data dictionary and then checks for the data in object repository
			'Call ddGetObjectProperties component to get the properties for the supplied ScreenName_ObjectName
			ddGetObjectProperties ScreenName_ObjectName
			'Get object type , property names and property values from global variable g_strObjectType,g_arrPropertyNames and g_arrPropertyValues(The respective values for
			webClass=g_strObjectType																'these three global variable is defined in ddGetObjectProperties  component)
'##PropertyName1=g_strPropertyName1		
			arrPropertyName=g_arrPropertyNames
			'##PropertyValue1=g_strPropertyValue1
			arrPropertyValue=g_arrPropertyValues  			
			'##PropertyName2=g_strPropertyName2
			'##PropertyValue2=g_strPropertyValue2
			g_strPropertyIndex=""'Assign null to the PropertyIndex global variable
			intProprtyIndexValue="" 'Assign null to a variable intProprtyIndexValue which is used to get the value for the index property
		Else
			'if the input webClass and propertyName 1 is supplied , make array of the all the property names and array property values
			arrPropertyName=Array(Trim(PropertyName1),Trim(PropertyName2))'For dynamic elements these condition is handled
			arrPropertyValue=Array(Trim(PropertyValue1),Trim(PropertyValue2))
	   End If
	   '4) Check at least one property and it's value is specified for the supplied ScreenName_ObjectName
	    If IsArray(arrPropertyName) And IsArray(arrPropertyValue) Then	
				'5)Setting the current page object to construct the object hierarchy
				webSetPage
				'6) Create a description for the web object
				Set  objWeb=Description.Create
				objWeb("micclass").Value=webClass
				'##objWeb(PropertyName1).Value=PropertyValue1
				'##'Verify for PropertName2 and PropertyValue2 values, if both the properties are empty then dont assign it to web object description
				'##If PropertyName2<>"" and PropertyValue2<>"" Then
					'##If Not Lcase(PropertyName2)="index" Then
						'##objWeb(PropertyName2).Value=PropertyValue2
					'##End If
				'##End If
				'7) Iterate through all the values in the arrPropertyName
				For arrindexPropertyName=0 To Ubound(arrPropertyName)
					' verify the value specified in array is not null
					If  arrPropertyName(arrindexPropertyName)<> ""  Then'This condition is handled for dynamic object creation
						'##If Lcase(PropertyName2)="index" Then
						If Not Lcase(arrPropertyName(arrindexPropertyName))="index" Then'Verify property is not index
							''added code for conveting boolean value
						     If Lcase(arrPropertyName(arrindexPropertyName)) = "visible" or Lcase(arrPropertyName(arrindexPropertyName)) = "disabled" Then
						     	arrPropertyValue(arrindexPropertyName) = cbool(arrPropertyValue(arrindexPropertyName))
						     End If
							'Assign property names and respective value to description object created
							objWeb(arrPropertyName(arrindexPropertyName)).Value=arrPropertyValue(arrindexPropertyName)
						Else
							'if property specified is index then assign the same property name to global variable g_strPropertyIndex
							g_strPropertyIndex="index"'this will be used in webGetObject component to get the first object
							intProprtyIndexValue=arrPropertyValue(arrindexPropertyName)'Assign the index value specified to a variable  intProprtyIndexValue
						End if
					End If
				Next
				'8)Attempt to get the collection of objects based on the created description.
				Set objWebCollection=g_objBrowserPage.ChildObjects(objWeb)	
				'9)Check for the object child object collection
				If Not IsEmpty(objWebCollection)  And objWebCollection.Count>0  Then
						'Verify if the intProprtyIndexValue is having some index value
						If intProprtyIndexValue<>"" Then
							'Verify the index property value is less than to the object collection count.
							'##If CInt(PropertyValue2)<=objWebCollection.Count Then
						   If CInt(intProprtyIndexValue) < objWebCollection.Count Then
							   'Assign the object to the function webGetObjectCollection.                       			
								'##Set webGetObjectCollection=objWebCollection(PropertyValue2)				
								Set webGetObjectCollection=objWebCollection(intProprtyIndexValue)
							Else
								'Report the status as warning if object index supplied OR is more then the obtained object collection.
								reporterReportEvent	"Warning",strReportStepLabel, "The supplied index and remaining property-values are not valid for the "&_
																						"object '"&ScreenName_ObjectName&"'. Please specify the valid properties-values and re-run script"
	
							End If
			'END CODE MODIFICATION
			'######################################
						Else
							'Assign the  object collection  to the function webGetObjectCollection
							Set webGetObjectCollection=objWebCollection
						End If
						'Report the status as done
						reporterReportEvent "Done", strReportStepLabel , "The supplied element: '"&ScreenName_ObjectName&"' obtained from the application."
					Else						
						'Report the status as warning if failed to get object collection from the supplied properties.
						reporterReportEvent	"Warning", strReportStepLabel , "The supplied element: '"&ScreenName_ObjectName&"' is not available in the page. Please specify the valid properties-values in Object Repository and re-run script"
				End If
		Else			
			'Report the status as Warning if not a single property and value specified in the database(repository)
			reporterReportEvent	"Warning", strReportStepLabel , "Please specify at least one property and it's value in database(repository) for the supplied  element: "&ScreenName_ObjectName
		End If
End Function


'#############################################################################################################################################################
' NAME: webGetObjectHierarchy
' PURPOSE:  Create and return the object hierarchy (Browser ().Page().Object()) for the  supplied object in ScreenName_ObjectName.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT :
'			webGetObjectHierarchy: Object that contains the object hierarchy (Browser ().Page ().Object ()).
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				10/16/2013				NEW
'Manjunath L M				11/26/2013				Modified to handle the assistive property for the object
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#############################################################################################################################################################
Private Function webGetObjectHierarchy(ScreenName_ObjectName)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		Dim strwebClass 	         'String that  contains Class Name of the object
		'##Dim strPropertyName1   'String that  contains Property Name1 of the object
		'##Dim strPropertyName2   'String that  contains Property Name2 of the object
		Dim arrPropertyName         'Array that contains all the property names
		'##Dim strPropertyValue1   'String that  contains Property Value1 corresponding to the PropertyName1 of the object 		
		'##Dim strPropertyValue2	'String that  contains Property Value2 corresponding to the PropertyName2 of the object
													' by default value it is string so prefixed with str		
		Dim arrPropertyValue		 'Array that contains all the property values
		Dim strPropertyDescription 'String that contains the property name and property value description
		'##'2) Initialize Error Handling
		'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'##'Clear Error
		'##Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
	   '3)Call ddGetObjectProperties to get the properties for the object supplied in ScreenName_ObjectName
		ddGetObjectProperties ScreenName_ObjectName
		'Get the propertynames and propertyvalues in declared variable .
		strwebClass=g_strObjectType
		'##strPropertyName1=g_strPropertyName1
		'##strPropertyName2=g_strPropertyName2
		arrPropertyName=g_arrPropertyNames
		'##strPropertyValue1=g_strPropertyValue1		
		'##strPropertyValue2=g_strPropertyValue2
		arrPropertyValue=g_arrPropertyValues  	
		'4) Check at least one property and it's value is specified for the supplied ScreenName_ObjectName
	    If IsArray(arrPropertyName) And IsArray(arrPropertyValue) Then	
			'5)Create the object hierarchy for the obtained object
			'##strPropertyDescription=strPropertyName1&":="&strPropertyValue1
			strPropertyDescription=arrPropertyName(0)&":="&arrPropertyValue(0)
			'Iterate through all the property names and property values to create the object description
			For indexPropertyName=1 To Ubound(arrPropertyName)
				'Create the property description by using the supplied property names and values
				'##strPropertyDescription=strPropertyDescription&Chr(34)&","&Chr(34)&strPropertyName2&":="&strPropertyValue2
				strPropertyDescription=strPropertyDescription&Chr(34)&","&Chr(34)&arrPropertyName(indexPropertyName)&":="&arrPropertyValue(indexPropertyName)
			Next
			Wait 3
			'Setting the current page object to construct the object hierarchy
			webSetPage
'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			'Clear Error
			Err.Clear
			'Create the object hierarchy
			Execute "Set webGetObjectHierarchy=g_objBrowserPage."&strwebClass&Chr(40)&Chr(34)&strPropertyDescription&Chr(34)&Chr(41)
'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'5)  Verify for the error occurance
			If errNumber =0 Then
				'Report as done as there was no error occured  while creating the object hierarchy
				reporterReportEvent "Done","Web Library-->webGetObjectHierarchy", "Object hierarchy created successfully for the supplied object : "&ScreenName_ObjectName
			 Else
				'Report as Failed as there was error occured  while creating the object hierarchy
				reporterReportEvent "Failed","Web Library--->webGetObjectHierarchy","Failed to create Object hierarchy for the supplied object : "&ScreenName_ObjectName&Chr(13)&" due to the reason "& errDescription & " .Please contact Automation Team ."
			End If
		Else
			'##'Clear the error.
			'##Err.Clear
			'##'Ends the Error Handling Scope.
			'##On Error GoTo 0
			'Report the status as Failed if not a single property and value specified in the database(repository)
			reporterReportEvent	"Failed", "Web Object Properties Library-->webGetObjectCollection", "Please specify at least one property and it's value in database(repository) for the supplied  element: "&ScreenName_ObjectName
		End If	
End Function


'#################################################################################################################################################
' NAME: webGetObjectWithLabel
'PURPOSE: Gets the label child object depnds on the parameter provided.
'PARAMETERS:
'		INPUT:
'			Label_ScreenName_ObjectName :  [String] Contains object name that refers to the value in the object properties of Label displayed besides the element on the webpage from object repository.
'			LabelItem_ScreenName_ObjectName : [String]Contains object name that refers to the value in the object properties of label child element on the webpage from object repository.
'		OUTPUT:
'			webGetObjectWithLabel - Returns the label child object			
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'MLM						09/17/2014				NEW
'####################################################################################################################################################
Private Function webGetObjectWithLabel ( Label_ScreenName_ObjectName, LabelItem_ScreenName_ObjectName )
	'PREREQUISITE CODE
	'1)	Declarations
	'##############################################################
	Dim strwebClass					'[String] Contains the class name of the label child element
	Dim intProprtyIndexValue	'[Integer] Contains the property value  for the index property 	
	Dim arrPropertyName		'[Array] Contains all the property names
	Dim arrPropertyValue	'[Array] Contains all the property values
	Dim objWebLabel		'[Object] Contains the obtained Label object WRT the supplied Label_ScreenName_ObjectName
	Dim objWebInsideLabel	'[Object] Contains the obtained Label Child object WRT the supplied Label_ScreenName_ObjectName and LabelItem_ScreenName_ObjectName
	Dim objWebWithLabelCollection	'[Object] Contains the obtained Label Child object collection WRT the supplied Label_ScreenName_ObjectName and LabelItem_ScreenName_ObjectName	
	Dim strReportStepLabel		'[String] Contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)		
		Set webGetObjectWithLabel=Nothing ' Assign the Label Child object collection as nothing.
		strwebClass=""	'Assign the Label class name as null
		strReportStepLabel = "Web Object Properties Library-->webGetObjectWithLabel" 'Assign the StepLabel for report	
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	'2) Verify Label_ScreenName_ObjectName and LabelItem_ScreenName_ObjectName having some value defined while calling a component
	If Trim(Label_ScreenName_ObjectName)<>"" And  Trim(LabelItem_ScreenName_ObjectName)<>""Then	
		'3)	Get the web Label object based on the parameter Label_ScreenName_ObjectName
		Set objWebLabel=webGetObject(Label_ScreenName_ObjectName)
		'4)	Get the properties of object which is with Label. And the same will be used to retrieve the Label child object inside a main label
			'Call ddGetObjectProperties component to get the properties for the supplied LabelItem_ScreenName_ObjectName
		ddGetObjectProperties LabelItem_ScreenName_ObjectName
		'4.1)	Get object type , property names and property values from global variable g_strObjectType,g_arrPropertyNames and g_arrPropertyValues(The respective values for
		strwebClass=g_strObjectType																'these three global variable is defined in ddGetObjectProperties component)\
		arrPropertyName=g_arrPropertyNames			
		arrPropertyValue=g_arrPropertyValues            			
		intProprtyIndexValue="" 'Assign null to a variable intProprtyIndexValue which is later used to get the value for the index property	
		'5)	Verify the Label Child class(it's a mandotary to get the Label child collection) is specified in the OR.
		If strwebClass <> "" Then
			'6)	Create a description for the label child object
				Set  objWebInsideLabel=Description.Create
				objWebInsideLabel("micclass").Value=strwebClass                   					
					'6.1)	Check at least one property and it's value is specified for the supplied LabelItem_ScreenName_ObjectName(optional while getting the label child object collection)
					If IsArray(arrPropertyName) And IsArray(arrPropertyValue) Then	
						'6.2)	Iterate through all the values in the arrPropertyName
						For arrindexPropertyName=0 To Ubound(arrPropertyName)											
							If Not Lcase(arrPropertyName(arrindexPropertyName))="index" Then'Verify property is not index
								'6.2.1.A)	Assign property names and respective value to description object created
								objWebInsideLabel(arrPropertyName(arrindexPropertyName)).Value=arrPropertyValue(arrindexPropertyName)
							Else
								'6.2.1.B)	If property specified is index then assign the specified  index value to a variable intProprtyIndexValue
								intProprtyIndexValue=arrPropertyValue(arrindexPropertyName)
							End if						
						Next
					End If
					'7)	Attempt to get the collection of objects based on the created description inside the label passed in Label_ScreenName_ObjectName.
					Set objWebWithLabelCollection=objWebLabel.ChildObjects(objWebInsideLabel)	
					'8)	Check for the object collection with label
					If Not IsEmpty(objWebWithLabelCollection)  And objWebWithLabelCollection.Count>0  Then
							'8.1)	Verify if the intProprtyIndexValue is having some index value
							If intProprtyIndexValue<>"" Then
								'8.1.1)	Verify the index property value is less than to the object collection count.							
							   If CInt(intProprtyIndexValue) < objWebWithLabelCollection.Count Then
								   '8.1.1.A)	Assign the object to the function webGetObjectWithLabel.                                							
									Set webGetObjectWithLabel=objWebWithLabelCollection(intProprtyIndexValue)
								Else									
									'8.1.1.B)	Report the status as failed if object index supplied OR is more than the obtained object collection with label.
									reporterReportEvent	"Failed",strReportStepLabel, "The supplied index property - value is more than the collection obtained for object: '"&LabelItem_ScreenName_ObjectName&_
																		"', which is inside a supplied label object: '"&Label_ScreenName_ObjectName&_
																		". Please add the valid index properties-value and re-run script to operate on the required element."
		
								End If			
							Else
								'8.1.2)  Assign the object collection with label
								Set webGetObjectWithLabel=objWebWithLabelCollection(0)
							End If
							'8.2)	Check whether we are suppose to do FireEvent on label child or not
							If g_FireEvent_EventName <> "" Then 'g_FireEvent_EventName is fire event global variable will be defined from script by calling required FireEvent components
								webGetObjectWithLabel.FireEvent g_FireEvent_EventName  ' Do a Fire Event on label item.
								g_FireEvent_EventName = "" 'Suppress FireEvent , This will be only one time call
							End If
							'8.3)	Report the status as done as label child object obtained properly
							reporterReportEvent "Done", strReportStepLabel , "The supplied label child element : '"&LabelItem_ScreenName_ObjectName&"' obtained inside label element: '"&Label_ScreenName_ObjectName&"'"
						Else						
							'9)	Report the status as failed to get label child object collection with label from the supplied properties.
							reporterReportEvent	"Failed", strReportStepLabel , "The supplied element: '"&LabelItem_ScreenName_ObjectName&"' is not available inside the label: '"&Label_ScreenName_ObjectName &"'. "&_
																											"Please specify the valid properties-values in Object Repository and re-run script."
					End If
			Else			
				'5.1)	Report the status as Failed if Label child class name is not specified in the database(repository)
				reporterReportEvent	"Failed", strReportStepLabel , "Please specify ObjectType(class name) value in database(repository) for the supplied  element: '"&LabelItem_ScreenName_ObjectName&"' and Re-Run the script."
			End If
		Else
		' 2) Report the status as fail if either of Label_ScreenName_ObjectName or LabelItem_ScreenName_ObjectName is empty
			reporterReportEvent "Failed",strReportStepLabel,"An empty 'Label_ScreenName_ObjectName' OR/AND 'LabelItem_ScreenName_ObjectName' is passed to the component. Label_ScreenName_ObjectName "&_
																						"and LabelItem_ScreenName_ObjectName value is required while doing a LABEL operations. Please enter a valid "&_
																						"Label_ScreenName_ObjectName and LabelItem_ScreenName_ObjectName value and Re-Run the script."
		End If
End Function


'###################################################################################################################################################
' NAME:  webGetReturnElementValue
' PURPOSE:  Get the object default value from AUT during runtime
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT :
'			webGetReturnElementValue: Text that contains the default property value
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'SunilKumar						08/25/2012					NEW
'Manjunath 						 11/22/2012					 Designed as per the architecture diagram
'Manjunath                       01/23/2013                  Removed Referance values section .
'Manjunath                       03/07/2013                  Adding the retrieved values to dictionary is removed and component is made private
'Manjunath                        03/11/2013                  Changed the component name to webGetReturnElementValue
'###################################################################################################################################################
Private Function webGetReturnElementValue(ScreenName_ObjectName)
'Get the web object based on input parameter : ScreenName_ObjectName
Set objWeb=webGetObject(ScreenName_ObjectName)
	'Array that contains the object class names
	arrClassNames=Array("link;webelement","webedit;weblist;webradiogroup","webcheckbox","webbutton","image")		
	'Array that contains the object properties
	arrPropertyNames=Array("innertext","value","checked","name","file name")
	'Iterate through each item in the array to get the property name and its value
	For intIndexValue=0 to UBound (arrClassNames)
		'Get the property name of the specified object
		'Note g_strObjectType, From the Data Library is a Global String that  contains Class Name of the object (Ex : WebEdit,WebButton etc)
		If Instr(1,arrClassNames(intIndexValue), LCase(g_strObjectType))<>0 Then
			'Get the value from the object
			strDefaultValue=Trim(objWeb.GetROProperty(arrPropertyNames(intIndexValue)))
			Exit For			
		End If
	Next
	'Return the retrieved value to the component
	webGetReturnElementValue=strDefaultValue
	'Report the status of the component as Done with retrieved value
	reporterReportEvent	"Done","WebElement Library --->webGetReturnElementValue","Retrieved default value for the object " & ScreenName_ObjectName & " is : "&strDefaultValue
End Function


'#############################################################################################################################################################
' NAME: webIsElementExists
' PURPOSE:  Returns the Boolean Exist status for the supplied object.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT :
'			webIsElementExists: Boolean that contains the object exist status.
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				09/27/2013				NEW
'Manjunath L M				10/18/2013			Modified to get only exist status by using webGetObjectHierarchy, removing the parameter blnExists
'																		  And involved the object hidden status verifying
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#############################################################################################################################################################
Private Function webIsElementExists(ScreenName_ObjectName)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################		
		Dim objWebElementExist  'Object that contains created hierarchy object(ex:Browser ().Page().Object())
		'2) Initialize Error Handling
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Clear Error
		 '##Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'3) Initialize the component to false
		webIsElementExists=False
'################################
		'CODE MODIFICATION
		'10/16/2013  Manjunath  Modified to get only exist status by using webGetObjectHierarchy and removing the parameter blnExists
	        '4) Call webGetObjectHierarchy component to get the object hierarchy for the supplied object
Set objWebElementExist= webGetObjectHierarchy(ScreenName_ObjectName)	
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		 Err.Clear
		'END CODE MODIFICATION
		'#################################
		'5) Verify the object exist
			'Object existence will be verified for 100 sec , and return the status to the component
			webIsElementExists=objWebElementExist.Exist(100)
'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'6) Verify error occurrence
			If errNumber <>0 Then
				'Report as fail with the error description
				reporterReportEvent "Failed", "Web Library-->webIsElementExists", "Unable get the exist status of the supplied object: "&ScreenName_ObjectName&Chr(13) &"Due to reason: "& errDescription
				'Check for the object hidden status
			ElseIf  webIsElementExists Then 'if the object supplied is exist in application
				If webIsElementHidden(objWebElementExist) Then				
					'Report as fail if the object is exist and hidden
					reporterReportEvent "Failed", "Web Library-->webIsElementExists", "The supplied object: "&ScreenName_ObjectName&" exist and hidden in the opened(focused) application"          			
				End If
			End If		
End Function


'#############################################################################################################################################################
' NAME: webIsElementHidden
' PURPOSE:  Returns the Boolean Hidden status for the supplied object.
' PARAMETERS:
'		INPUT
'			objWeb : Object that contains the web object which needs to be verified for hidden status
'		OUTPUT :
'			webIsElementHidden: Boolean that contains the object Hidden status.
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				10/18/2013				NEW
'Manjunath L M				01/30/2014				Removed the display property and added IsEmpty verification for widhth and height						
'Lakshman Kumar A.H.     	14/03/2014				Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Vani S						02/19/2019				Modified the code to support cross browser testing
'#############################################################################################################################################################
Private Function webIsElementHidden(objWeb)
	'PREREQUISITE CODE
		'1) Declarations
		'##############################################################		
		Dim blnVisbility  'Boolean that contains element hidden status using visibility
		Dim blnDisplay	 'Boolean that contains element hidden using class and display
		Dim intWidth   'Integer that contains the width property value of the supplied object
		Dim intHeight   'Integer that contains the height property value of the supplied object		
		Dim strReportStepLabel   'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		strReportStepLabel="Web Library-->webIsElementHidden"
		'2) Initialize Error Handling
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'3) Initialize the component to false		
		webIsElementHidden=False
		'4) Get the hidden status of the supplied object depends on following cases
			'Cascading style sheets (CSS)
			'4.a) Get Element hidden using visibility ,In this the element is hidden using the visibility attribute of CSS. 				
				'################################
				'CODE MODIFICATION
				'01/30/2014  Manjunath  Removed the display property and added IsEmpty verification for widhth and height                                           					
						intWidth=objWeb.GetROProperty("width")
						intHeight=objWeb.GetROProperty("height")
						'## blnVisbility=(objWeb.GetROProperty("width")=0 And objWeb.GetROProperty("height")=0)
						blnVisbility=((intWidth=0) Or IsEmpty(intWidth))  And ((intHeight=0) Or IsEmpty(intHeight))						
						
						'#############################################################################
						'CODE MODIFICATION
						'Vani S 	02/19/2019 	'This modification is implemented to support cross browser testing
						'Commented below line of code as the currentStyle native property is not available  for objects in Chrome and Firefox browser
						
						'blnIsCSS=False
						' '##4.b)Get Element hidden using class and Element hidden using display ,In this the element is hidden using the CSS display property				
						'strDisplay=Trim(Lcase(objWeb.Object.currentStyle.display))
						
						  'END CODE MODIFICATION
						'#################################
						
						'Store the generated run time error number and error description in variables.
						errNumber = Err.Number
						errDescription = Err.Description
						'#############################################################################
						'CODE MODIFICATION
						'Vani S 	02/19/2019 	'This modification is implemented to support cross browser testing
						'Commented below line of code as the currentStyle display is not stored in strDisplay
						
						'Check for the object not existanse in application error, If no Then don't go for CSSverification use only widht and hieght	
'						If errNumber <> "-2147220983" Then							
'							 blnDisplay=(strDisplay="none")
'							 blnIsCSS=True
'						End If
'						
						'END CODE MODIFICATION
						'#################################				
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				'#############################################################################
					'CODE MODIFICATION
					'Vani S 	02/19/2019 	'This modification is implemented to support cross browser testing
					'Commented below line of code as the below error number is not encountered.
				
				'5) Verify error occurrence	
				'If errNumber<>0 And errNumber<>-2147220983  Then
				
				'END CODE MODIFICATION
				'#################################	
				
				'5) Verify error occurrence
				If errNumber <> 0 Then
					'Report as fail with the error description
					reporterReportEvent "Failed", strReportStepLabel, "Unable get the hidden status of the supplied object: "&Chr(13) &"Due to reason: "& errDescription
				'#############################################################################
				'CODE MODIFICATION
				'Vani S 	02/19/2019 	'This modification is implemented to support cross browser testing
				'Commented below line of code as CSS is not available
				
				'Check for the object not existanse in application error if yes do the CSSand normal verification(widht and hieght)					
'				ElseIf blnIsCSS And blnDisplay Then
'					'Return true the component if object supplied is hidden
'					webIsElementHidden=True
				'ElseIf Not blnIsCSS And blnVisbility Then
				
				'END CODE MODIFICATION
				'#################################						
				
				ElseIf blnVisbility Then
					'Return true the component if object supplied is hidden
					webIsElementHidden=True
				End If
End Function



'#############################################################################################################################################################
' NAME: webIsElementNotExist_ExitAction
' PURPOSE:  This Sub will exit from the action in which it has been called if the supplied object does not exist (displayed) in opened (focused) application
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT : None
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				09/27/2013				NEW
'Manjunath L M				10/18/2013			Modified to include the component webIsElementNotExists
'#############################################################################################################################################################
Sub webIsElementNotExist_ExitAction(ScreenName_ObjectName)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		Dim blnNotExist 	         'Boolean that contains the object not existence status 		
		'2)if we use "On Error Reume Next" statment its going to suppress ExitAction
		'Clear the Errors        		
		 Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'CODE MODIFICATION
			'10/11/2013  Manjunath  Modified to include the component webIsElementNotExists
			'3)Call webIsElementNotExists component to get the object not exist status
	            '##blnNotExist=webIsElementExists(ScreenName_ObjectName,False)	
				blnNotExist=webIsElementNotExists(ScreenName_ObjectName)
		 'END CODE MODIFICATION
		'#################################
		'4)Verify the status in blnNotExist( Check object not exist status)
		If blnNotExist Then
			'Report Done as the supplid object not exist
			reporterReportEvent "Done","Web Library-->webIsElementNotExist_ExitAction","The supplied object: "&ScreenName_ObjectName&" not exist "&Chr(13)&" we are not executing the remaining steps from the action(template)"
			'Do exit action if the suppllies object not exist in opened (focused)application
			ExitAction
		 Else
			'Report Done as the supplid object exist
reporterReportEvent "Done","Web Library-->webIsElementNotExist_ExitAction","The supplied object: "&ScreenName_ObjectName&" exist ,we are executing the remaining steps from the action(template)"
		End If
End Sub


'#############################################################################################################################################################
' NAME: webIsElementNotExists
' PURPOSE:  Returns the Boolean Not Exist status for the supplied object.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT :
'			webIsElementNotExists: Boolean that contains the object not exist status.
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				10/18/2013				NEW
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#############################################################################################################################################################
Private Function webIsElementNotExists(ScreenName_ObjectName)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################		
		Dim objWebElementNotExist  'Object that contains created hierarchy object(ex:Browser ().Page().Object())
		'2) Initialize Error Handling
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Clear Error
		 '##Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'3) Initialize the component to false
		webIsElementNotExists=False
	    '4) Call webGetObjectHierarchy component to get the object hierarchy for the supplied object
		Set objWebElementNotExist= webGetObjectHierarchy(ScreenName_ObjectName) 		
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		Err.Clear
		'5) Verify the object exist
			'Object existence will be verified for 30 sec , and return the status to the component
			webIsElementNotExists =Not(objWebElementNotExist.Exist(30))
'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'6) Verify error occurrence
			If errNumber <>0 Then
				'Report as fail with the error description
				reporterReportEvent "Failed", "Web Library-->webIsElementNotExists", "Unable get the exist status of the supplied object: "&ScreenName_ObjectName&Chr(13) &"Due to reason: "& errDescription
				'Check for the object hidden status			
			ElseIf Not webIsElementNotExists Then 'if the object supplied is exist in application
				If webIsElementHidden(objWebElementNotExist) Then
					'Report as fail if the object is exist and hidden
					reporterReportEvent "Failed", "Web Library-->webIsElementNotExists", "The supplied object: "&ScreenName_ObjectName&" exist and hidden in the opened(focused) application" 			
				End If
			End If
End Function



'###################################################################################################################
' NAME:  webIsTable
' PURPOSE:Verify that supplied object is a 'webtable'
' PARAMETERS:
'		INPUT
'			objwebTable- Object that contains instance of the webtable object based on input parameter : ScreenName_ObjectName
'			ScreenName_ObjectName - String that contains reference to the webtable object stored in the object repository
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					   PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath    		  07/03/2013			   		 New
'Manjunath            07/19/2013               Modified to verify the object is a webTable from run time application
'###################################################################################################################
Private Sub webIsTable(objwebTable,ScreenName_ObjectName)
'Verify that supplied object is a "webtable" to perform the operation
	If testCompareValues(objwebTable.GetRoproperty("micClass"),"WEBTABLE",True) Then	
		'Report the status as done if object type is a webtable
		reporterReportEvent "Done","WebTableElement Library--->webIsTable","The object supplied '"& ScreenName_ObjectName &"' is a webTable object"
	Else
		'Report the status as Failed if object type is not a webtable
		reporterReportEvent "Failed","WebTableElement Library--->webIsTable","The object supplied '"& ScreenName_ObjectName &"' is not a webTable and the actual Object type is "& UCase(Trim(objwebTable.GetRoproperty("micClass")))
	End If
End Sub


'###################################################################################################################################
' NAME:  webLaunchBrowserPvtMode
' PURPOSE:  To Launch browser in a private mode.
' PARAMETERS:
'		INPUT
'			ddBrwType : Mandatory Parameter - String that contains the executable file to run or any command line arguments. Ex: "chrome.exe"
'			ddAddress : Mandatory Parameter - String that contains the browser URL.
'			ddAppFolderPath : Optional Parameter - String that contains the folder path for the application. The default is the folder that contains the executable file.

'		OUTPUT : None
'HISTORY
'NAME:									DATE:					PURPOSE
'--------------------------------------------------------------------------------------------------------------------------------------
'Udayakumar Reddy 						12/29/2020				New
'Jayarami Reddy							12/01/2022				Modified the code to support MS Edge Chromium browser private mode
'Sushmashree 							02/20/2023				After upgrading chrome to 110.0.5481.78 version, we required to add one more tab to enable chrome incognito mode

'#########################################################################################################################################

Function webLaunchBrowserPvtMode(ddBrwType,ddAddress,ddAppFolderPath)
	'PREREQUISITE CODE
	'Declarations
	'##############################################################
	Dim strAddress
	strReportStepLabel = "Master Library ---> webLaunchBrowserPvtMode"
	'END PREREQUISITE CODE
	'**************************	
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	'Get input parameter ddAppName from data dictionary and assign it to strApp
	brwType = ddGetItem(Trim(ddBrwType))
	'Get input parameter ddAddress from data dictionary and assign it to strAddress
	strAddress = ddGetItem(Trim(ddAddress))	
	'Get input parameter ddAppFolderPath from data dictionary and assign it to strAddress
	strFolderPath = ddGetItem(Trim(ddAppFolderPath))
	'Verify for the parameter ddAppName for Null/Empty
	If brwType <> ""  Then			
	
		If  strAddress <>"" and strAddress<>"ddAddress" Then		
		
				'## Initialize Error Handling	
				'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error			
				On Error Resume Next
				'Clear the error.
				Err.Clear
		
				If brwType="chrome.exe" Then
					'Launch google chrome with default page
					Systemutil.Run "chrome.exe","www.google.com","","",3
					if Window("regexpwndtitle:= Google Chrome", "is child window:=0","is owned window:=0").Exist(35) then
						Window("regexpwndtitle:= Google Chrome", "is child window:=0","is owned window:=0").Activate
						Set WshShell = CreateObject("WScript.Shell")
							'wait 3
							'Press F6 to locate the address bar
							WshShell.SendKeys "{F6}"
							wait 3
							'Pass the chrome extension URL
							WshShell.SendKeys "chrome://extensions"
							wait 3
							WshShell.SendKeys "{ENTER}"
						if Window("hwnd:=.*","regexpwndtitle:= Google Chrome","is owned window:=0","is child window:=0","text:=Extensions - Google Chrome").Exist(20) then
							'Search for UFT extesion on chrome extension page
							Window("hwnd:=.*","regexpwndtitle:= Google Chrome","is owned window:=0","is child window:=0","text:=Extensions - Google Chrome").Type "Micro Focus UFT Agent"
							'Verify if extension is already enabled
							If Browser("name:=Extensions","title:=Extensions").Exist Then
								'Report the pass message if extension is already enabled
								extenblSts=True
								reporterReportEvent "Passed","UFT extension verification","UFT extension is already enabled"
							else
								'Enable the extension if it is disabled
								Set WshShell1 = CreateObject("WScript.Shell")
									wait 3
									WshShell1.SendKeys "{TAB}"
									WshShell1.SendKeys "{TAB}"
									WshShell1.SendKeys "{TAB}"
									WshShell1.SendKeys "{TAB}"
									WshShell1.SendKeys "{TAB}"
									wait 2
									WshShell1.SendKeys "{ENTER}"
									wait 3
									reporterReportEvent "Passed","UFT extension verification","UFT extension is now enabled"
									extenblSts=True
							End If
						else
							reporterReportEvent "Failed","Chrome extension Page","Unable to identify browser window."
						End If
					else
						reporterReportEvent "Failed","Chrome Home Page","Unable to identify the browser home page. Please check if UFT extension for chrome is installed or not."
					End If
					'Close the browser
					SystemUtil.CloseProcessByName "chrome.exe"
					
					If extenblSts=True Then
						SystemUtil.CloseProcessByName "chrome.exe"
						Systemutil.Run brwType," -incognito "&strAddress,strFolderPath,"",3
						If not Browser("name:=.*","title:=.*").Exist Then
							'Close the chrome application process
							SystemUtil.CloseProcessByName "chrome.exe"
							wait 5
							'Launch google chrome with default page
							Systemutil.Run "chrome.exe","www.google.com","","",3
							wait 5
							'Press F6 to locate the address bar
							WshShell.SendKeys "{F6}"
							wait 3
							'Pass the chrome extension URL
							WshShell.SendKeys "chrome://extensions"
							WshShell.SendKeys "{ENTER}"
							wait 5
							'Search for UFT extesion on chrome extension page
							Window("hwnd:=.*","regexpwndtitle:= Google Chrome","is owned window:=0","is child window:=0","text:=Extensions - Google Chrome").Type "Micro Focus UFT Agent"
							wait 5
							'Enable the incognito option in UFT extension if it is disabled
							WshShell.SendKeys "{TAB}"
							WshShell.SendKeys "{TAB}"
							WshShell.SendKeys "{TAB}"
							WshShell.SendKeys "{ENTER}"
							wait 3
							WshShell.SendKeys "{TAB}"
							WshShell.SendKeys "{TAB}"
							WshShell.SendKeys "{TAB}"
							'#############################################################################
							'CODE MODIFICATION
							'20-Feb-2023		Sushmashree 	Adding one more tab to enable the chrome incognito mode
							
							WshShell.SendKeys "{TAB}"
							
							'END CODE MODIFICATION
							'#################################
							WshShell.SendKeys "{TAB}"
							WshShell.SendKeys "{ENTER}"
							wait 2
							reporterReportEvent "Passed","UFT extension verification","Allow in incognito option is enabled now in UFT extension"
							SystemUtil.CloseProcessByName "chrome.exe"
						Else
							reporterReportEvent "Passed","UFT extension verification","Allow in incognito option is already enabled in UFT extension"
							SystemUtil.CloseProcessByName "chrome.exe"
						End If
					End If
					'Launch application in chrome with private/incognito mode
					Systemutil.Run brwType," -incognito "&strAddress,strFolderPath,"",3
			
					errNumber = Err.Number
					errDescription = Err.Description
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0
					'Verify error occurrence and report the status accordingly			
					If errNumber = 0 Then
						'Report the status as Passed if there is any error while launching
						reporterReportEvent "Passed",strReportStepLabel,"Browser Type '" & ddBrwType & "' is launched successfully in private mode."
					Else
						'Report the status as Failed if there is any error
						reporterReportEvent "Failed",strReportStepLabel,"Failed to launch browser with address '" & strAddress &"' and the Error is: '" &errDescription&" '. You may check if URL is correct."
					End If
				End If
				
				'#############################################################################
				'CODE MODIFICATION
				'Jayarami Reddy 	12/01/2022	 This modification is implemented to support MS Edge Chromium browser
				If brwType="msedge.exe" Then
					Set WshShell = CreateObject("WScript.Shell")
					'Launch google msedge chromium with default page
					Systemutil.Run brwType,strAddress,strFolderPath,"",3
					'Verify browser existancy
					If Browser("name:=.*","title:=.*","creationtime:=0").Exist(10) then
						'Set flag
						extenblSts=True
						'Write message in report that 'UFT extension is already enabled'
						reporterReportEvent "Passed","Microsoft Edge UFT extension verification","UFT extension is already enabled"
					Else
						Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge").Highlight
						Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge").Click
						wait 5
						WshShell.SendKeys "{F4}"
						wait 5
						'Pass the ms edge extension URL
						WshShell.SendKeys "edge://extensions/"
						wait 5
						WshShell.SendKeys "{ENTER}"
						wait 5
						If Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge").Exist(2) then
							Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge").Activate
							'Search for UFT extesion on ms edge extension page
							Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge").Type "Micro Focus UFT Agent"
			
							WshShell.SendKeys "{ENTER}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys "{TAB}"
							wait 3
							WshShell.SendKeys " "
							wait 3
							If Browser("name:=.*","title:=.*","creationtime:=0").Exist(3) then
								extenblSts=True
								reporterReportEvent "Passed","Microsoft Edge UFT extension verification","UFT extension is now enabled"
							ElseIf Window("hwnd:=.*","regexpwndtitle:= Microsoft​ Edge","is owned window:=False","is child window:=False","text:=.*Work.*Microsoft​ Edge").Exist(2) Then
								reporterReportEvent "Failed","Microsoft Edge Home Page","Unable to identify the home page. Check if UFT Extension for Edge browser is installed."
							else
								reporterReportEvent "Failed","Microsoft Edge Home Page","Unable to identify the home page. Check if UFT Extension for Edge browser is installed."
							End If	
						Else
							reporterReportEvent "Failed","Microsoft Edge extension Page","Unable to search UFT extension on extension page"
						End If
					End If	
					'Verify flag status
					If extenblSts=True Then
						'Close the browser
						webCloseAllBrowsers
						wait 5
						'Launch the MS Edge Private browser
						Systemutil.Run brwType,"-inprivate "&strAddress,strFolderPath,"",3
						
						If not Browser("name:=.*","title:=.*", "creationtime:=0").Exist(10) Then
							'Close the private browser
							WshShell.SendKeys "%{F4}"
							wait 2
							'Launch msedge
							Systemutil.Run brwType,"",strFolderPath,"",3
							wait 5
							'Set the browser focus
							webSetBrowserFocus
							'Press F4 to locate the address bar
							WshShell.SendKeys "{F4}"
							wait 3
							'Pass the ms edge extension URL
							WshShell.SendKeys "edge://extensions/"
							wait 5
							WshShell.SendKeys "{ENTER}"
							wait 3
							'Search for UFT extesion on msedge extension page
							WshShell.SendKeys "Micro Focus UFT Agent"
							wait 3
							'Enable the InPrivate option in UFT extension if it is disabled
								WshShell.SendKeys "{ENTER}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{ENTER}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 3
								WshShell.SendKeys "{TAB}"
								wait 5
								WshShell.SendKeys " "
							wait 2
							'Write message in report that 'InPrivate option is enabled now in UFT extension'
							reporterReportEvent "Passed","UFT extension verification","Allow in"& chr(32)&"InPrivate"&chr(32)&" option is enabled now in UFT extension"
							'Close the browser
							webCloseAllBrowsers
							'Launch application in msedge with private mode
							Systemutil.Run brwType,"-inprivate "&strAddress,strFolderPath,"",3
						Else
							reporterReportEvent "Passed","UFT extension verification","Allow in"& chr(32)&"InPrivate"&chr(32)&" option is already enabled in UFT extension"
						End If
					End If
					'Get the error number and description
					errNumber = Err.Number
					errDescription = Err.Description
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0
					'Verify error occurrence and report the status accordingly			
					If errNumber = 0 Then
						'Report the status as Passed if there is any error while launching
						reporterReportEvent "Passed",strReportStepLabel,"Browser Type '" & ddBrwType & "' is launched successfully in private mode."
					Else
						'Report the status as Failed if there is any error
						reporterReportEvent "Failed",strReportStepLabel,"Failed to launch browser with address '" & strAddress &"' and the Error is: '" &errDescription&" '. You may check if URL is correct."
					End If
				End If
				'END MODIFICATION
				'#############################################################################
		Else
			'Report the Failed status as'strAddress' value is empty
			reporterReportEvent "Failed",strReportStepLabel, "strAddress is a mandatory parameter and cannot be empty. Please provide the valid strAddress."		
		End If
	Else
		'Report the Failed status as'ddBrwType' value is empty
		reporterReportEvent "Failed",strReportStepLabel, "ddBrwType is a mandatory parameter and cannot be empty. Please provide the valid file path in ddBrwType parameter."
	End If
End Function


'###############################################################################################
' NAME:  webMaximizeCurrentBrowser
' PURPOSE:  To Maximize the Browser window to fill the entire screen.
' PARAMETERS:
'				INPUT     :  None
'				OUTPUT :  None						
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath 					07/19/2012				New
'Lakshman Kumar A.H.     	21/02/2014				Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Vani S 					03/14/2019				Modified to get the "HWND" of current browser that got launched.
'Somika Jain				08/23/2019				Modified to launch browser in maximize mode both in citrix QA desktops and local desktops
'###############################################################################################
Private Sub webMaximizeCurrentBrowser
'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
On Error Resume Next
	'Clear Error
	Err.Clear
	'#############################################################################
	'CODE MODIFICATION
	'Vani S 	03/14/2019 	'This modification is implemented as the previous code use to maximize only the first browser that got launched.
	'Now the "HWND" of current browser that got launched will be stored in 'hwnd' which will be used to maximize the window	
	
	'Get the hwnd handle for the current Browser window
	'hwnd = g_CurrentBrowser.Object.HWND
	'#############################################################################
	'CODE MODIFICATION
	'Somika Jain 	08/23/2019 	'This modification is implemented as the previous code is maximizing window only on citrix QA desktop, not the local desktops.
	'Calling the WebsetCurrentBrowser component and passing the browser focus as a parameter for this function
	Set g_CurrentBrowser=webSetCurrentBrowser(g_objBrowserFocus)
	'Get the hwnd handle for the current Browser window
hwnd = g_CurrentBrowser.Object.HWND
	'Commented the line below
	 'hwnd = g_objIE.HWND
	 'END CODE MODIFICATION
'################################################################
	'END CODE MODIFICATION
'################################################################
	'Set the Test Results not to display anything(This is done to handle Window's run time error)
	Reporter.Filter=rfDisableAll 'No events are displayed in the Test Results.
	'Maximize the browser window if it is not already maximized and is maximizable
	Window("hwnd:=" & hwnd).Maximize
	'Set the Test Results to default mode(Display all status )
	Reporter.Filter=rfEnableAll 'All reported events are displayed in the Test Results. 	
	'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0
	'Verify the error occurance	
	If errNumber =0 Then
		'Report as done as there was no error occured  while maximizing the browser
		reporterReportEvent "Done","Web Browser Library-->webMaximizeCurrentBrowser", " Browser having name : '"&g_CurrentBrowser.GetROProperty("title")&"' maximized successfully "
		'Check if the Browser is maximizable or not
	ElseIf Window("hwnd:=" & hwnd).GetROProperty("maximizable") = False Then
		'Report the status as warning as the browser object is not a maximizable
		reporterReportEvent "Warning","Web Browser Library-->webMaximizeCurrentBrowser", " Browser having name : '"&g_CurrentBrowser.GetROProperty("title")&"' is not maximizable"
	Else
		'Report as warning with the error description
		reporterReportEvent "Warning","Web Browser Library-->webMaximizeCurrentBrowser"," Failed to perform maximize operation on the  Browser having name : '"&g_CurrentBrowser.GetROProperty("title")& "' Reason: '"& errDescription&"'."
	End If 	
End Sub


'##################################################################################################################
' NAME:  webNavigateTo
' PURPOSE:  To navigate to the specified address
' PARAMETERS:
'		INPUT
'			Address : String URL to navigate the browser object .
'		OUTPUT : None
'HISTORY
'NAME:						DATE:						PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil							11/21/2012			New
'Sunil							15/01/2013			Modified to include error handling
'Narasinha				 23/01/2013			 Error handling reporting message is updated
'Manjunath 			   09/18/2013			Modified to wait until specified address loads completely and if not load within 100 seconds
																	'report the status as failed due to performance issue of the URL supplied
'Lakshman Kumar A.H.     21/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'##################################################################################################################
Private Sub webNavigateTo(Address)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		Dim intWaitTime 'Integer that contains the wiat time counter
		'2) Initialize Error Handling
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		 Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
	'3)Use the global browser object variable and navigate to the specified address (URL)
g_objIE.Navigate(Trim(ddGetItem(Address)))
	'######################################
	'CODE MODIFICATION
	'09/18/2013  Manjunath L M  Modified to wait until specified address loads completly and if not load within 100 seconds report the status as
															'failed due to performance issue of the URL supplied
	'4) Initializing Wait Time
	intWaitTime=1
	'5)Wait for browser to navigate for specified URL "Address"
	Do until (Not(g_objIE.Busy) Or g_objIE.ReadyState=4 )  Or intWaitTime=100
'##Do until Not(g_objIE.Busy)
		'Wait for one second
		 Wait 1
		 intWaitTime=intWaitTime+1
		 'Increment counter time
	Loop
	'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0  	
	'6) Report the script status once the counter exceeds the value 100 seconds
	If intWaitTime =100 Then	
		reporterReportEvent "Failed","Web Browser Library--->webNavigateTo", "Failed to load the URL : " &ddGetItem(Address) &" as the url specified is having the performance(max wait 100 seconds) issue while trying to launch in internet explore."
	'END CODE MODIFICATION
	'#################################
	'Verify error occurance
	ElseIf errNumber =0 Then
		'Report as passed as there was no error occured  while performing Navigation operation for given address
		reporterReportEvent "Done","Web Browser Library--->webNavigateTo", "Navigation operation performed successfully  for the URL  :" &Address
	Else
		'Report as failed  as there was  error occured  while performing Navigation operation for given address
		reporterReportEvent "Failed","Web Browser Library--->webNavigateTo","Failed to perform Navigation operation for the URL "&Address&Chr(13) &"Reason: "& errDescription
	End If
End Sub


'########################################################################################################################
' NAME:  webNewBrowser
' PURPOSE:  To create new Chrome/Firefox/MS Edge Chromium browser instance and navigate to the specified address
' PARAMETERS:
'				INPUT:	
'							Address : String that contains URL to navigate the browser object.
'				OUTPUT:
'							g_BrowserType: Object that contains Chrome/Firefox/MS Edge Chromium browser instance					
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil						11/20/2012			New
'Manjunath  L M	  		07/19/2013          		Modified to handle the browser maximization
'Lakshman Kumar A.H.     	21/02/2014			Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Vani S				   		02/20/2019		 	Modified the code to support cross browser testing
'Sanskriti             			10/18/2019        		Modified the code to set browser zoom level 100%
'Somika Jain				11/08/2019			Modified the code to avoid multiple calls of webSetCurrentBrowser function for Firefox.
'Udayakumar Reddy		09/07/2020			Modified the code to support MS Edge Chromium browser
'Jayarami Reddy            		10/03/2022       	 	As part of IE Retirement_Phase3A, Commented out the "ie" related code
'Sushmashree				12/01/2022			As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'########################################################################################################################
Sub webNewBrowser(Address)
	'PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	'##'2) Initialize Error Handling
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error	
	On Error Resume Next
	'Clear the Error
	Err.Clear	
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	
'check if the browser type is'Chrome' or "Firefox" or "msedge"
If g_BrowserType = "chrome" or g_BrowserType = "firefox" or g_BrowserType = "msedge" Then
	'Assign the current 'g_BrowserType&".exe"' value to a variable 'strBrowserExe'
	strBrowserExe=g_BrowserType&".exe"
	'launch application in Chrome or Firefox or MSEdge Browser
	'Call the reusable component "launchApplication" to launch the application(URL) in Chrome or Firefox Browser		
	launchApplication strBrowserExe,Address,""
	'#############################################################################
	'CODE MODIFICATION
	'Somika Jain 	11/08/2019 	'This modification is implemented to avoid multipe calls of webSetCurrentBrowser function for Firefox
	'webSetCurrentBrowser component is being called inside launchApplication function to set focus on firefox to maxime the window.
	If g_BrowserType = "chrome" Then
		'Call the reusable component "webSetCurrentBrowser" to set the newly opened browser with creation time 0
		webSetCurrentBrowser ""
	End If
	'END CODE MODIFICATION
	'###############################################################################
	'Call the reusable component "webSetPage"to set the description  of browser and page hierarchy
	webSetPage
	'#############################################################################
	'CODE MODIFICATION
	'Sanskriti 	  10/18/2019 	'This modification is to set browser zoom level 100%	
	'Call the reusable component "webSetBrowserZoom" To set the Browser zoom level 100%
	 webSetBrowserZoom
	'END CODE MODIFICATION
	'#############################################################################
End If	
'END CODE MODIFICATION
'#############################################################################
	
End Sub


'#########################################################################################################################################
' NAME: webNewBrowserPvtMode
' PURPOSE:  To create new private browser instance and navigate to the specified address
' PARAMETERS:
'				INPUT:	
'							Address : String that contains URL to navigate the browser object.
'				OUTPUT:
'							None
'HISTORY
'NAME:									DATE:					PURPOSE
'--------------------------------------------------------------------------------------------------------------------------------------
'Udayakumar Reddy 					12/29/2020				New
'Jayarami Reddy						12/01/2022				Modified the code to support MS Edge Chromium browser private mode
'#########################################################################################################################################

Sub webNewBrowserPvtMode (Address)
	'PREREQUISITE CODE
	'1) Declarations
		strReportStepLabel = "Master Library ---> webNewBrowserPvtMode"
	'##############################################################
	'##'2) Initialize Error Handling
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error	
	On Error Resume Next
	'Clear the Error
	Err.Clear	
	'END PREREQUISITE CODE
	'**************************
	'BEGIN FUNCTION IMPLEMENTATION
	'###############################################################
	g_BrowserType = lcase(ddGetItem("Browser_Type"))

			Select Case g_BrowserType

		    	 	Case "chrome"
		    	 		strBrowserExe=g_BrowserType&".exe"
						'Call the reusable component "webLaunchBrowserPvtMode" to launch the application(URL) in Chrome 		
						webLaunchBrowserPvtMode strBrowserExe,Address,""				
				       	
				       	'Call the reusable component "webSetCurrentBrowser" to set the newly opened browser with creation time 0
						webSetCurrentBrowser ""
						
		    	 		'Call the reusable component "webSetPage"to set the description  of browser and page hierarchy
						webSetPage
						
						'Call the reusable component "webSetBrowserZoom" To set the Browser zoom level 100%
						webSetBrowserZoom
						
						reporterReportEvent "Passed",strReportStepLabel,"Browser Type '" & g_BrowserType & "' is launched successfully in private mode."
					'#############################################################################
					'CODE MODIFICATION
					'Jayarami Reddy 	12/01/2022	 This modification is implemented to support MS Edge Chromium browser
					Case "msedge"
		    	 		strBrowserExe=g_BrowserType&".exe"
						'Call the reusable component "webLaunchBrowserPvtMode" to launch the application(URL) in MS Edge 		
						webLaunchBrowserPvtMode strBrowserExe,Address,""				
				       	
				       	'Call the reusable component "webSetCurrentBrowser" to set the newly opened browser with creation time 0
						webSetCurrentBrowser ""
						
		    	 			'Call the reusable component "webSetPage"to set the description  of browser and page hierarchy
						webSetPage
						
						'Call the reusable component "webSetBrowserZoom" To set the Browser zoom level 100%
						webSetBrowserZoom
						
						reporterReportEvent "Passed",strReportStepLabel,"Browser Type '" & g_BrowserType & "' is launched successfully in private mode."	
					'END MODIFICATION
					'#############################################################################	
					Case else
						reporterReportEvent "Failed",strReportStepLabel, g_BrowserType & " browser type is invalid and currently not supported for private mode, please provide valid browser type."				
			End Select

	'END FUNCTION IMPLEMENTATION
	'###############################################################
End Sub


'############################################################################################################################################################
' NAME:  webRightClickElement
' PURPOSE:  To Right Click on an element in a Web application.
' PARAMETERS:
' INPUT  :
'			ScreenName_ObjectName: String that contains the object name or object names that refers to the value in the data dictionary or refers to the object properties from object repository.

' OUTPUT : None
'HISTORY
'NAME:				          DATE:		PURPOSE
'-----------------------------------------------------------------------------------------------------
'Shambhavi Pawar				06/10/2018		New
'#########################################################################################################################################
Sub webRightClickElement(ScreenName_ObjectName)		
	'PREREQUISITE CODE
'1) Declarations
'##############################################################
strReportStepLabel = "Master Library--->rightClickOnObject"
'END PREREQUISITE CODE
'**************************
'BEGIN FUNCTION IMPLEMENTATION
'##############################################################
	'Verify if 'ScreenName_ObjectName' is not empty
	If Trim(ScreenName_ObjectName)<>"" Then	
			'Get the object "ScreenName_ObjectName" from object repository using 'webGetObject'
			Set objElement = webGetObject(ScreenName_ObjectName)
			'##' Initialize Error Handling
		'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error			
			On Error Resume Next		
			'Right click on the obtained object
			objElement.RightClick			
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description			
			'Clear the error.
			Err.Clear			
			'Ends the Error Handling Scope.
			On Error GoTo 0			
			'Verify If right click operation is performed
			If errNumber = 0 Then
				'Report as passed as Successfully performed right click operation on the given  object
				reporterReportEvent "Passed", strReportStepLabel , "Right click operation performed successfully on object  :"&ScreenName_ObjectName&"."				
			Else
				'Report the status as Failed to perform right click operation on the given  object
				reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform right click operation on object "&ScreenName_ObjectName&Chr(13) &" .Due to the following reason: " & errDescription & "."
			End If	
	Else
		'Report the status as Failed as 'ScreenName_ObjectName' is empty
		reporterReportEvent "Failed",strReportStepLabel, " ScreenName_ObjectName is a mandatory parameter and cannot be empty.Please enter a valid ScreenName_ObjectName."
End If

End Sub


'#########################################################################################################################################
' NAME: webSetBrowser
' PURPOSE: Ability to run UFT script from any step as user want.
' PARAMETERS:
'		INPUT
'			BrowserTitle : String that contains the Title of the browser as per user requirement.
'
'		OUTPUT : None
'HISTORY
'NAME:									DATE:					PURPOSE
'--------------------------------------------------------------------------------------------------------------------------------------
'Udayakumar Reddy 					10/07/2020			New
'Jayarami Reddy            					10/03/2022       		As part of IE Retirement_Phase3A, Commented out the "ie" related code
'Sushmashree							12/01/2022			As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'#########################################################################################################################################

Function webSetBrowser(BrowserTitle)
On Error Resume Next
strReportStepLabel = "Master Library--->webSetBrowser"

If BrowserTitle<>"" Then
	    Set objDescription=Description.Create
	    objDescription("micClass").Value="Browser"
	        'Attempt to get the collection of opened browsers
	    Set objBrowserCollection=Desktop.ChildObjects(objDescription)	
	    If  objBrowserCollection.Count>0 Then
	        'Iterate through each browser in the collection
	        For intIndex=0 to objBrowserCollection.Count-1
	            If Trim(Lcase(objBrowserCollection(intIndex).GetRoProperty("title")))=Trim(Lcase(BrowserTitle)) Then
	                Set objBrowser = objBrowserCollection(intIndex)
	                	objBrflg=true
	                	brinx=intIndex
	                	objBrowser.highlight
	                Exit For
	            End If
	        Next
	
			If objBrflg=true Then
			    BrowserType=Trim(Lcase(ddGetItem ("Browser_Type")))
			
		    	 Select Case BrowserType
		    	 	
		    	 	Case "chrome"
		    	 		g_objBrowserFocus=brinx
				       	webSetBrowserFocus BrowserTitle,brinx
		    	 	
		    	 	Case "firefox"
		    	 		c=brinx
				       	webSetBrowserFocus BrowserTitle,brinx
		    	 	
		    	 	Case "msedge"
		    	 		g_objBrowserFocus=brinx
				       	webSetBrowserFocus BrowserTitle,brinx
		    	 End Select
		    	
				'Store the generated run time error number and error description in variables.
				errNumber = Err.Number
				errDescription = Err.Description
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				'Verify the error occurrence	
				If errNumber =0 Then
					'Report as Passed as there was no error occurred  while Close the browser
					reporterReportEvent "Passed",strReportStepLabel, "Browser focus has been set to the browser: " & BrowserTitle&" and Browser Index " &brinx&"."
				Else
					'Report as Warning with the error description
					reporterReportEvent "Failed",strReportStepLabel,"Browser focus has not set to the browser: " & BrowserTitle&", reason: " & errDescription & "."
				End If
				
			Else
				reporterReportEvent "Failed", strReportStepLabel, BrowserTitle&" browser title does not exists."
			End If
		Else
			reporterReportEvent "Failed", strReportStepLabel, " No browser available to set the focus."
	    End If
Else
	reporterReportEvent "Failed", strReportStepLabel, " Browser title is empty, please provide valid browser title name."
End If
End Function


'#############################################################################################################
' NAME: webSetBrowserFocus
' PURPOSE:  This component helps user to  shift  focus between browsers.
' PARAMETERS:
'		INPUT
'			strBrowserName_OR_Title : String that contains "Name/Title" of the browser to shift focus.If browser to shift is not having name defined then specify title.
'									Note: If user sends input value "null" then focus will  shift to default (first) browser.
'			BrowserIndex[optional]: Integer that contains index of browser
'									Note: If user opened 'n' browser,index will vary from o to (n-1).
'									BrowserIndex: An Optional integer Reference that contains the browser index		
'		OUTPUT :
'			g_objBrowserFocus : String or integer value contains the browser name or Hwnd value of the browser
'			g_BrowserFocusIndex : Integer value contains the Index of the browser
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Ravi Mishra			28/11/2012			      NEW
'Varun V				03/28/2014		Modified the component to set the focus on browser when two browser with Same name opens
'MLM					11/06/2014	    	Modified to include the browser title if name is not defined in UAT(strBrowserName to strBrowserName_OR_Title)
'Venkateswarlu v 		12/02/2019 		This modification is implemented to support cross browser testing.
'Sushmashree			10/03/2022		As part of IE Retirement_Phase3A, Commented out the "ie" related code
'Sushmashree			12/01/2022		As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'#############################################################################################################
Sub webSetBrowserFocus(strBrowserName_OR_Title,BrowserIndex)
' PREREQUISITE CODE
' 1) Declarations
' ##############################################################		
Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
strReportStepLabel = "Web Library --->webSetBrowserFocus"
' END PREREQUISITE CODE
' **************************
	' BEGIN FUNCTION IMPLEMENTATION
	' ###############################################################
	'2)	Verify the parameter BrowserIndex contains a numeric value or not
	If IsNumeric(BrowserIndex) or Trim(BrowserIndex) = "" Then
		''#############################################################################
		''CODE MODIFICATION
		'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
		''We are Verify the parameter 'BrowserIndex' is -ve value
		
		If Trim(BrowserIndex) <> "" Then
			'Verify If the parameter 'BrowserIndex' is -ve value
			If BrowserIndex < 0 Then
				'Report as failed if 'BrowserIndex' is not numeric
				reporterReportEvent "Failed",strReportStepLabel,"The supplied value BrowserIndex:'"&BrowserIndex&"' should be positive integer value and not less than zero.Please provide valid numeric value"
			End If					
		End If
		
		''END CODE MODIFICATION
		''#############################################################################									
		'2.1) If yes  than Assign the browser index to a global variable g_BrowserFocusIndex
		g_BrowserFocusIndex = BrowserIndex
		'2.2) Verify the InputParameter "strBrowserName_OR_Title"  contains some browser name or title to shift the focus
		If Trim(strBrowserName_OR_Title)<> "" Then
			'2.2.A) Assign the supplied browser name/title to a global variable g_objBrowserFocus
			g_objBrowserFocus = strBrowserName_OR_Title ' this will be used in webSetCurrentBrowser component
			'2.2.B) Report Done, As the supplied browser name/title is assigned for browser focus
			reporterReportEvent	"Done", strReportStepLabel ,"Browser focus has been set to the browser: '" & g_objBrowserFocus&"' and Browser Index '" &g_BrowserFocusIndex&"'."
		Else
			'g_BrowserType' is Chrome/Firefox then  initialize 'g_BrowserFocusIndex' as 0	
			g_BrowserFocusIndex = 0
			'2.3.B) Report Done, As the Hwnd is assigned for browser focus
			reporterReportEvent	"Done", strReportStepLabel ,"Browser focus has been reset to the default (first) browser."
		End If
	Else
		'3) Report fail, As user passed a non numeric value for browser index parameter
		reporterReportEvent	"Failed", strReportStepLabel ,"Browser Index value :'"&BrowserIndex&"' is not valid.Please pass only a numeric value and re-run your script."
	End If
End Sub

'###############################################################################################
' NAME:  webSetBrowserZoom
' PURPOSE:  To set IE/Firefox/Chrome/MS Edge Chromium browser zoom level to 100%.
' PARAMETERS:
'				INPUT     :  None
'				OUTPUT :  None						
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sanskriti  		    		10/18/2019				 New
'Nikhil Ambekar			09/07/2020				Modified purpose of this function for MS Edge Chromium
'###############################################################################################
Private Sub webSetBrowserZoom()
'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
On Error Resume Next
'Clear Error
	Err.Clear
	Dim objShell
'Create windows shell scripting object
set objShell = CreateObject("WScript.Shell")
'Press ctrl+0 to set browser zoom level to 100%
objShell.SendKeys "^0","10"
'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0
	'Verify the error occurrence	
	If errNumber =0 Then
		'Report as done as no error occurred while maximizing the browser
		reporterReportEvent "Passed","Web Browser Library--->webSetBrowserZoom", "Zoom Level set to 100% for Browser Type '"&g_BrowserType&"' "
	Else
		'Report as Warning with the error description
		 reporterReportEvent "Warning","Web Browser Library--->webSetBrowserZoom","Failed to set zoom level 100% for browser type '"&g_BrowserType&"', Reason: "& errDescription
	End If
	set objShell = Nothing

End Sub


'################################################################################################################################################
' NAME:  webSetCheckBox
' PURPOSE:  Selects a Checkbox based on Input value provided.
' PARAMETERS:
'		INPUT
'				ScreenName_ObjectName :  String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'				InputValue : String that contains the value to set  Checkbox
'							*Note: 	InputValue should be either  ON or OFF
'		OUTPUT : None
'HISTORY
'NAME:										DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'C.MCMILLAN						11/11/2012					NEW
'Manjunath                            01/23/2013                 Modified to add descriptive errors
'Manjunath                              03/06/2013					Modified to organize logic flow
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'################################################################################################################################################
Sub webSetCheckBox(ScreenName_ObjectName,InputValue)
		'Get the web object based on input parameter from database/object repository
		Set objCheckBox=webGetObject(ScreenName_ObjectName) 	
		'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		Err.Clear
		strInputValue = ddGetItem(Trim(InputValue))
		'Select CheckBox based on the input parameter : InputValue
		objCheckBox.Set strInputValue
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Do any error handling if the item was not able to be selected.
		If errNumber <>0 Then
			''#############################################################################
			''Commented below line of code effecting for cross browser testing
			'''Verify the object is enabled
			''If objCheckBox.Object.isDisabled Then
			''#############################################################################
			''#############################################################################
			''CODE MODIFICATION
			'' venkateswarlu v 02/22/2019 'This modification is implemented to support cross browser testing	
			''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
			''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.			
			If objCheckBox.Object.Disabled Then					
			'END CODE MODIFICATION
			'#############################################################################
				'Report the status as Failed for object disable
				reporterReportEvent "Failed","WebElement Library--->webSetCheckBox","webCheckBox  object "&ScreenName_ObjectName & " is disabled"
			 Else				
				'Report the status as Failed and  error description
				reporterReportEvent "Failed","WebElement Library--->webSetCheckBox","Failed to perform set operation on object "&ScreenName_ObjectName&Chr(13) &" Reason: "& errDescription
			End if
		 Else
			'Report as passed as there was no error occured  while performing specified operation on  object
			reporterReportEvent "Passed","WebElement Library--->webSetCheckBox", "Set operation performed successfully  on object " &ScreenName_ObjectName&" for input value: "&InputValue
		End If
End Sub


'################################################################################################################################################
' NAME:  webSetCheckBoxWithLabel
' PURPOSE:  Selects a Checkbox within a label based on Input values provided.
' PARAMETERS:
'		INPUT
'				Label_ScreenName_ObjectName :  [String] Contains object name that refers to the value in the object properties of Label displayed besides the “ CheckBox” on the webpage from object repository.
'				LabelItem_ScreenName_ObjectName : [String]Contains object name that refers to the value in the object properties of label  "CheckBox” on the webpage from object repository.
'				Status	:	[String]	Contains the status of checkbox to be modified 				
'							*Note: 	Status should be either ON or OFF
'		OUTPUT : None
'HISTORY
'NAME:				DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'MLM			 														NEW
'################################################################################################################################################
Sub webSetCheckBoxWithLabel (Label_ScreenName_ObjectName, LabelItem_ScreenName_ObjectName, Status)
		''PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		Dim objCheckBoxWithLabel		'[Object] Contains the label child checkbox element				
		Dim strReportStepLabel		'[String] Contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)    			
		strReportStepLabel = "WebElement Library-->webSetCheckBoxWithLabel"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################		
		'2)	Verify the supplied status is valid to do operation on checkbox
		If UCase(Trim(Status))="ON" Or  UCase(Trim(Status))="OFF" Then	
				'3)	Get the label check box based on input parameter Label_ScreenName_ObjectName and LabelItem_ScreenName_ObjectName
				Set objCheckBoxWithLabel=webGetObjectWithLabel(Label_ScreenName_ObjectName, LabelItem_ScreenName_ObjectName)
				'4)	On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
				On Error Resume Next
				'4.1)	Clear Error
				Err.Clear
				'5)	Set the status of the label checkbox as per the supplied status in parameter Status
				objCheckBoxWithLabel.Set UCase(Trim(Status))
				'4.2)	Get the error number and description, If any while doing checkbox operation
				errNumber = Err.Number
				errDescription = Err.Description
				'4.3)	Clear the error.
				Err.Clear
				'4.4)	Ends the Error Handling Scope.
				On Error GoTo 0
				'6)	Do any error handling if the label checkbox status not changed as expected.
				If errNumber <>0 Then
					''#############################################################################
					''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing				
						'6.1)	Verify the label child object is enabled
						'If objCheckBoxWithLabel.Object.isDisabled Then
					''#############################################################################
					''#############################################################################
					''CODE MODIFICATION
					'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
					''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
					''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.					
						'6.1)	Verify the label child object is enabled
						If objCheckBoxWithLabel.Object.Disabled Then
					'END CODE MODIFICATION
					'#############################################################################						
								'6.1.A) Report Failed, As label child object is disabled
								reporterReportEvent "Failed", strReportStepLabel, "The supplied CheckBox element: '"&LabelItem_ScreenName_ObjectName&"' inside the label: '"&Label_ScreenName_ObjectName&_
								"' is disabled .Operation cannot be performed . Please recheck the steps in the script and re-run."
						Else				
								'6.1.B)	Report Failed, While changing the status of label check box there was a unexpectd error occured
								reporterReportEvent "Failed", strReportStepLabel, "Failed to perform operation on checkbox element: '"&LabelItem_ScreenName_ObjectName&"' inside the label: '"&Label_ScreenName_ObjectName&_
								"'. Due to Reason: '"& errDescription&"'."
						End if
				Else
						'6.1)	Report passed, As there was no error occured  while changing the label CheckBox status
						reporterReportEvent "Passed", strReportStepLabel, "The status of the supplied CheckBox element: '"&LabelItem_ScreenName_ObjectName&"' inside the label: '"&Label_ScreenName_ObjectName&_
						"' is changed to: '"&UCase(Trim(Status))&"' successfully."
				End If
		Else
				'2.1)	Report failed, As supplied label chekcbox status is invalid
				reporterReportEvent "Failed", strReportStepLabel , "The supplied checkbox status: '"&Status&"' is invalid. Please supply either ON or OFF as status and re-run the script."
		End If
End Sub


'###########################################################################################################################
' NAME:  webSetCurrentBrowser
' PURPOSE:  To Set the browser object from the open browser collections
' PARAMETERS:
'                 Input : None
'                 Ouput:
'                            webSetCurrentBrowser: Integer value that contains Hwnd property value of  the browser
'HISTORY
'NAME:                        DATE:                    PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil                       	11/20/2012              New
'Sunil                       	01/23/2013              Name of function is modified and modified in new way.
'Manjunath            	09/18/2013         	Modfied to get the location name of the launched URL/Address  and add the handler to DD for the key Hwnd ,
										'once obtained use same key to get the hander for the browser
'Varun V                	03/19/2014             Modified the component to set the browser based on index along with browser name.
'MLM                        11/06/2014              Modified to include the browser title if name is not defined in UAT(strBrowserName to strBrowserName_OR_Title)
'Venkatesh               08/03/2017              Modified to handle the browser when Location Name is Null.
'Vani S			      02/19/2019		      Modified the code to support cross browser testing
'Sushmashree          10/03/2022       	      As part of IE Retirement_Phase3A, Commented out the "ie" related code
'Sushmashree		12/01/2022		As part of IE Retirement_Phase3B, deleted "IE" related code and code comments
'###########################################################################################################################
Private Function webSetCurrentBrowser(strBrowserName_OR_Title)
' PREREQUISITE CODE
' 1) Declarations
' ##############################################################
Dim strReportStepLabel       'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
strReportStepLabel = "Web Library --->webSetCurrentBrowser"
' END PREREQUISITE CODE
' **************************
' BEGIN FUNCTION IMPLEMENTATION
' ###############################################################
'1) Initialize Error Handling
'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
On Error Resume Next
'Clear Error
Err.Clear
'2) Verify if the browser name is already defined
If Trim(strBrowserName_OR_Title)="" or IsEmpty(strBrowserName_OR_Title) Then
	'Set the browser object using the creationtime property. if the 'g_BrowserType' is Chrome or Firefox
	Set webSetCurrentBrowser=Browser("creationtime:=0") 
	'Report the status as done
	reporterReportEvent "Done", strReportStepLabel ,"Browser of name: '"& webSetCurrentBrowser.GetROProperty("name") &"' opened and set as a first/default browser"
Else
	'#############################################################
	'CODE MODIFICATION
	'03/19/2014        Varun V        Modified the component to set the browser based on index along with browser name.
	'Check g_BrowserFocusIndex value is empty or null
	If Trim(g_BrowserFocusIndex)="" or IsEmpty(g_BrowserFocusIndex) Then
		'3) Verify that passed bowser name value id not a hwnd property value.
		If Not IsNumeric(strBrowserName_OR_Title) Then
				'If strBrowserName_OR_Title contains the browser name/title, then set the browser object using name/title property.
				If Browser("name:="&strBrowserName_OR_Title).Exist Then
					Set webSetCurrentBrowser=Browser("name:="&strBrowserName_OR_Title)' Browser exist with the name supplied
				Else
					Set webSetCurrentBrowser=Browser("title:="&strBrowserName_OR_Title)' If not exist than set it with title
				End If
		Else
			'Set the browser object using the creationtime property. if the 'g_BrowserType' is Chrome or Firefox
			Set webSetCurrentBrowser=Browser("creationtime:=0")
		End If
	Else
		' verify the current browser xistence with the supplied browser name and CreationTime properties
		If Browser("name:="&strBrowserName_OR_Title,"CreationTime:="&g_BrowserFocusIndex).Exist Then
			'Set the current browser with the supplied browser name and CreationTime properties
			Set webSetCurrentBrowser=Browser("name:="&strBrowserName_OR_Title,"CreationTime:="&g_BrowserFocusIndex) ' Browser exist with the name supplied
		Else
			'Set the current browser with the supplied browser title and CreationTime properties
			Set webSetCurrentBrowser=Browser("title:="&strBrowserName_OR_Title,"CreationTime:="&g_BrowserFocusIndex) ' If not exist than set it with title
		End If
	End If
	'END CODE MODIFICATION
	'################################################################
End If
End Function


'#################################################################################################################################################
' NAME:  webSetDropDownValue
' PURPOSE: Selects a DropDown values based on InputText provided.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			InputText :Text that contains values to select from dropdown.  if "SELECTALL" is passed as a input string then all the dropdown values is selected if suplied drop down object is multiple selection drop down.
'					**Note : If more than one value to select in the multiple selection  dropdown then user have to send the values with semicolon separator .
'									 Example for the InputText parameter is  "LegalEntity;LegalName;RelationShipName"
'
'		OUTPUT : None
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'C.MCMILLAN				11/11/2011				NEW
'Manjunath                 03/182013				Modified header comments and fail messages
'Manjunath                 06/10/2013			  Modified to selcect the multiple values from the dropdown
'Narasinha					07/17/2013			   Modified to remove the random selection code	
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Shambhavi Pawar           5/22/2017               Modified to select a list item from dropdown using partial string.
'###################################################################################################################################################
Sub webSetDropDownValue(ScreenName_ObjectName,InputText)
	'Verify the supplied value is not null to select from the dropdown
	If ddGetItem(Trim(InputText)) <> ""	 Then		'This verification is done due to when QTP select's null value in weblist the QTP will becomes hang
			'Get the web object based on input parameter from database/object repository
			'NOTE: Test will stop (fail) if object is not found
			Set objDropDown=webGetObject(ScreenName_ObjectName)
			'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			Err.Clear
			'Get all items from the dropdown (Should work even if the field is disabled)
			objDropDownAllItems=Trim(objDropDown.GetROProperty("all items"))	
			'Based on the value of the InputText passed in, determine which input value to pick.
'			If Ucase(Trim(InputText )) ="SELECTALL" Then
			If Ucase(Trim(InputText )) ="SELECTALL" or Ucase(ddGetItem(Trim(InputText )))="SELECTALL" Then' Chsnged the code to handle dd Key
				'Assign all the values from the dropdown
				InputValue=objDropDownAllItems
			Else
			'verify the existance of input parameter in data dictionary
	            InputValue=ddGetItem(Trim(InputText))
			End If		
			'Clear Error
			Err.Clear
			'Verifying the supplied drop down object is multiple selection drop down		
			If objDropDown.GetROProperty("select type")="Extended Selection" Then
				
			'Split the input values so that we can select one by one in a webdropdown
			arrInputValues=Split(InputValue,";")
			'Iterate each value in the input values array and select it from the webdropdown
			For Each strInputValue In arrInputValues
			'#######################################################################################					
			'CODE MODIFICATION Begins
			'Shambhavi Pawar 05/22/2017       Modified to select a list item from dropdown using partial string.			
			'Below are the Modification
						
	         'Code for Comparing for partial match using of 'testCompareValues' method for multiple selection drop down
			 If  InStr(Trim(objDropDownAllItems),Trim(strInputValue))>0 Then
		        	ComArrInputValues=Split(objDropDownAllItems,";")
	                For Each ComStrInputValue In ComArrInputValues
	
	                If len(trim(strInputValue))=0 Then
	                	'Clease errors
	                    Err.Clear
	                    'Ends the Error Handling Scope.
	                    On Error GoTo 0	
						'Report as Fail if we try to select null value from webDropDown
						reporterReportEvent "Failed","WebElement Library--->webSetDropDownValue","Can't select the supplied value : '"&strInputValue&"' from the webdropdown  object : "&ScreenName_ObjectName& CHr(13)&"Please supply a valid value to select in the dropdown"	                	
	                End If	
						'Verify if the given partial Input value exists in the multiple selection drop down then select the item.
						If instr(ComStrInputValue,strInputValue)>0 Then
						objDropDown.ExtendSelect ComStrInputValue
						Exit for
						End If
					Next	
		      Else
		       'Select the supplied multiple values from multiple selection drop down (complete match).
				objDropDown.ExtendSelect ddGetItem(Trim(strInputValue))
		      End If
		      Next
		
				'Code for Comparing for exact match in a single select drop down
				'ElseIf  testCompareValues(objDropDownAllItems,InputValue,False) Then
				ElseIf  InStr(Trim(objDropDownAllItems),Trim(InputValue))>0 Then

	
			'&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&	
			' Setting "selectFlag" to make sure if the selection for input value is exact match - After selecting the exact match option,
			'it should not make another selection for partial match for the same input value.
			
			'selectFlag=0 (No selection made)
			'selectFlag = 1 (Selected the input value option)


			'Initializing selectFlag to 0
			selectFlag=0
			'Split the input values so that we can select one by one in a webdropdown
			arrInputValues=Split(objDropDownAllItems,";")
			'Verifies if the input value for single select is a exact match and selects the input value.
					          For Each strInputValue In arrInputValues
									If strInputValue=InputValue Then
										objDropDown.Select strInputValue
										'Setting 'selectFlag' to 1 (For Exact match Selection)
										selectFlag=1
										Exit for
									End If
								Next		
									
								'Verifies if the input value for single select is a partial match and selects the input value.									
								If selectFlag=0 Then
									For Each strInputValue1 In arrInputValues
										If instr(strInputValue1,InputValue)>0 Then
											objDropDown.Select strInputValue1
											'Setting 'selectFlag' to 1 (For partial match Selection)
											selectFlag=1
											Exit for								
										
										End If
									Next
										
							  End If									
		''END CODE MODIFICATION
		'######################################################################################
			Else			
				objDropDown.Select InputValue
			End If		
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Do any error handling if the item was not able to be selected.
			If errNumber = 0 Then
					'Report as passed as there was no error occured  while performing specified operation on  object
					reporterReportEvent "Passed","WebElement Library--->webSetDropDownValue", "Selection operation performed successfully  on object : " &ScreenName_ObjectName&" for the input value: "&InputValue	
			Else
					''#############################################################################
					''02/22/2019 Commented below line of code effecting for cross browser testing
					'Verify the object is enabled
					''If objDropDown.Object.isDisabled  Then
					''#############################################################################
					''#############################################################################
					''CODE MODIFICATION
					'' 02/22/2019 'This modification is implemented to support cross browser testing	
					''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
					''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.
					'Verify the object is enabled
					If objDropDown.Object.Disabled  Then
					'END CODE MODIFICATION
					'#############################################################################					
						'Report the status as Failed for object disable
						reporterReportEvent "Failed","WebElement Library--->webSetDropDownValue","webdropdown object:- '"& ScreenName_ObjectName &"' is disabled" 							
						'Verify the supplied input values are multiple .If so then drop down should be of selection type 'Extended Selection'
					ElseIf (InStr(1,InputText,";")<>0 OR Ucase(Trim(InputText )) ="SELECTALL"  ) And objDropDown.GetROProperty("select type")<>"Extended Selection"Then
						'Report Fail as the webList is not a multiselection type for the supplied multiple values
						reporterReportEvent "Failed","WebElement Library--->webSetDropDownValue","webdropdown object:- '" & ScreenName_ObjectName &"' is of single selection dropdown and input values supplied is multiple ,the values are:- '"&InputValue
						'Verify the supplied value displayed in the webdropdown 		
					ElseIf InStr(1,objDropDownAllItems,InputValue)=0 Then
						'Report Fail as the supplied value is not there in webDropDown
						reporterReportEvent "Failed","WebElement Library--->webSetDropDownValue","webdropdown  object :- '"&ScreenName_ObjectName&"' does not contain the input value: '"&InputValue&"'  to select in dropdown items '" & objDropDownAllItems			
					Else
						'Report the status as Failed and  error description
						reporterReportEvent "Failed","WebElement Library--->webSetDropDownValue","Failed to perform selection operation on object:- '"&ScreenName_ObjectName&"'"&Chr(13) &" Reason:- "& errDescription
			       End if          	
			End If
	Else
		'As QTP will through Error if we try to select null value from webDropDown ,Report the status as failed
		reporterReportEvent "Failed","WebElement Library--->webSetDropDownValue","Can't select the supplied value :- "&ddGetItem(Trim(InputText))&" from the webdropdown  object : "&ScreenName_ObjectName& CHr(13)&"Please supply a valid value to select in the dropdown"
	End If
End Sub


'#########################################################################################################################################
' NAME:  webSetElementbyKeyStroke
' PURPOSE:  Set the value in WebEdit field by key stroke.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			InputValue : Text that contains value to enter in the webedit field
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V						06/18/2014				   	   NEW
'##############################################################################################################################################
Sub webSetElementbyKeyStroke(ScreenName_ObjectName,InputText)
		'***************************
		'PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
			Dim objEdit						'(Object) webEdit object
			Dim objWSShell				'(Object) Shell object
			Dim strReportStepLabel  	 '(String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Web Library --> webSetElementbyKeyStroke"
		'END PREREQUISITE CODE
		'***************************
		' BEGIN FUNCTION IMPLEMENTATION
		' ###############################################################
			'verify the existance of input parameter in data dictionary
			InputValue=Trim(ddGetItem(InputText))
			'Set the webEdit object to variable objEdit
			Set objEdit=webGetObject(ScreenName_ObjectName)
			'Set the Shell object to a variable objWSShell
			Set objWSShell = CreateObject("WScript.Shell")
			'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			'Clear Error
			 Err.Clear
			'Click on the WebEdit inorder to set the cursor on the Edit box
			objEdit.Click
			''##################################
			'Code modified to wait 2 seconds after clicked on text field
			'wait 2
			'End Modification
			''##################################
			'Set the input value in WebEdit by using sendkey method
			objWSShell.SendKeys InputValue
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Do any error handling if the item was not able to be selected.
			If errNumber <>0 Then
				''#############################################################################
				''02/22/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
				'''Verify the object is enabled			
				'Verify the object is disabled
				'If objEdit.Object.isDisabled Then
				''#############################################################################
				''#############################################################################
				''CODE MODIFICATION
				''vENKATESWARLU V 02/22/2019 'This modification is implemented to support cross browser testing	
				''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
				''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.
				'Verify the object is disabled
				If objEdit.Object.Disabled Then
				'END CODE MODIFICATION
				'#############################################################################
					'Report the status as Failed for object disabled
					reporterReportEvent "Failed",strReportStepLabel,"Text field '" & ScreenName_ObjectName & "' is disabled. Value '"& InputValue &"' can not be entered. Please "&_
																								"verify the test script steps and execute again."				
				Else						
					'Report the status as Failed and error description
					reporterReportEvent "Failed",strReportStepLabel,"Failed to enter the '" &InputValue&"' in the text field '" &ScreenName_ObjectName &"' due to Reason:"&errDescription&_
					                                                                            ".Please re-execute the script."
				End If
			Else
					'Report as passed as there was no error occured while entering the input value in the text field on object
					reporterReportEvent "Passed",strReportStepLabel,"'"&InputValue & "' is entered successfully in the text field '"& ScreenName_ObjectName& "'."
			End If
End Sub


'#########################################################################################################################################
' NAME:  webSetElementText
' PURPOSE:  To set the value in WebEdit field.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			InputValue : Text that contains value to enter in the webedit field
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Charles MCMILLAN						11/11/2011				   	   NEW
'Manjunath                                    01/23/2013                 	 Modified to add descriptive errors and changed
'Manjunath                              	  03/06/2013					 Modified to organize logic flow
'Varun V										  08/27/2013					 Modified the error description in the reporterReportEvent function
'Neeraj Gaur								  11/22/2013					  Modified object name for the disabled message and error messages are improved from end user perspective.
'Lakshman Kumar A.H.     			24/02/2014						Modified to start and end the Error Handling Scope appropriately wherever it requires.
'##############################################################################################################################################
Sub webSetElementText(ScreenName_ObjectName,InputText)
		'***************************
		'PREREQUISITE CODE
		'########################################################################
		'CODE MODIFICATION
		'11/22/2013 Neeraj Gaur  Added On error resume next statement for runtime error handling.
		'Initialize Error Handling
		'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Clear Error
		'##Err.Clear
		'END CODE MODIFICATION
		'########################################################################
		'END PREREQUISITE CODE
		'***************************
		'Verify if ScreenName_ObjectName is empty
		If Trim(ScreenName_ObjectName)<>"" Then
		   'Get the web object based on input parameter from database/object repository
			Set objEdit=webGetObject(ScreenName_ObjectName)
			'verify the existance of input parameter in data dictionary
			InputValue=ddGetItem(InputText)
			'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			'Clear Error
			 Err.Clear
			'######################################################################
			'CODE MODIFICATION
				'11/22/2013 Neeraj Gaur  Removed the error code from here and placed at the start of the component.
				'##On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
				'##On Error Resume Next
				'##Clear Error
				'##Err.Clear
			'END CODE MODIFICATION
			'######################################################################
			'Set the input value in WebEdit
			objEdit.Set Trim(InputValue)
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Do any error handling if the item was not able to be selected.
			If errNumber <>0 Then
				'Verify the object is disabled
				'######################################################################
				'CODE MODIFICATION
				'11/22/2013 Neeraj Gaur  Commented the disabled statement to change the object name from objDropDownList to objEdit
				'##If objDropDownList.Object.isDisabled Then
				''#############################################################################
				''02/22/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
				'''Verify the object is enabled				
				'If objEdit.Object.isDisabled Then
				'END CODE MODIFICATION
				'######################################################################
			
			''#############################################################################
			''CODE MODIFICATION
			'' VENKATESWARLU V 02/22/2019 'This modification is implemented to support cross browser testing	
			''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
			''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.
			If objEdit.Object.Disabled Then
			'END CODE MODIFICATION
			'#############################################################################

					'Report the status as Failed for object disabled
					'######################################################################
					'CODE MODIFICATION
					'11/22/2013 Neeraj Gaur  Modified the failure message.
					'##reporterReportEvent "Failed","WebTableElement Library--->\webTableSetElementText","Editable element is disabled in the table object " &ScreenName_ObjectName & Chr(13) & " for  reference value "& ddGetItem(RowReferenceValue) &" and column name  "& ColumnNameorPosition
					 reporterReportEvent "Failed","WebElement Library--->webSetElementText","Text field " & ScreenName_ObjectName & " is disabled. Value " & chr(34) & InputValue & chr(34) & " can not be entered. Please verify the test script steps and execute again.If issue not resolved then contact application developer."				
					'END CODE MODIFICATION
					'######################################################################
				Else						
					'Report the status as Failed and error description
					'######################################################################
					'CODE MODIFICATION
					'11/22/2013 Neeraj Gaur  Modified the failure message.
					'##reporterReportEvent "Failed","WebTableElement Library--->webTableSetElementText","Failed to perform set operation to editable element present in table object "&ScreenName_ObjectName&Chr(13) &" Reason: "&Err.Description
					 reporterReportEvent "Failed","WebElement Library--->webSetElementText","Failed to enter the " & chr(34) & InputValue & chr(34) & " in the text field " & chr(34) & ScreenName_ObjectName & chr(34) & "." & "Please re-execute the script and if problem persists then contact automation team for more details."
					'END CODE MODIFICATION
					'######################################################################
				End If
			Else
					'Report as passed as there was no error occured while entering the input value in the text field on object
					'######################################################################
					'CODE MODIFICATION
					'11/22/2013 Neeraj Gaur  Modified the success message.
					'##reporterReportEvent "Passed","WebTableElement Library--->webTableSetElementText", "The value "&InputValue&"  is  set successfully  to editable element present in the table " & ScreenName_ObjectName & Chr(13) & " for  reference value "& ddGetItem(RowReferenceValue) &" and column name  "& ColumnNameorPosition
					reporterReportEvent "Passed","WebElement Library--->webSetElementText", chr(34) & InputValue & chr(34) & " is entered successfully in the text field " & chr(34) & ScreenName_ObjectName & chr(34) & "."
					'END CODE MODIFICATION
					'######################################################################
			End If
		Else
					'######################################################################
					'CODE MODIFICATION
					'11/22/2013 Neeraj Gaur  Added the failure message
					reporterReportEvent "Failed","WebElement Library--->webSetElementText", "Value passed for InputText is empty.As ScreenName_ObjectName is a mandatory parameter so please enter the object name for the ScreenName_ObjectName as per object repository and execute the script again."
					'END CODE MODIFICATION
					'######################################################################
		End If

End Sub


'######################################################################################################################
' NAME:  webSetFireEvent_onMouseOver
' PURPOSE:  FireEvent method to simulate moving the mouse over on a objects.
' PARAMETERS:
'		INPUT	: None				
'	   OUTPUT : None
'HISTORY
'NAME:				DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'MLM			9/22/2014						NEW
'######################################################################################################################
Sub webSetFireEvent_onMouseOver
	'Assign the global variable g_FireEvent_EventName with the event name "onmouseover"
g_FireEvent_EventName="onmouseover"
'Report the status as done
reporterReportEvent "Done","Web Library-->webSetFireEvent_onMouseOver","Fire Event name set to 'onmouseover'. Next called component will be performed "&_
												"the respective operation with 'onmouseover' event"
End Sub


'###############################################################################################
' NAME:  webSetFrame
' PURPOSE:  To set the description  of browser, page and frame hierarchy
' PARAMETERS:
'				INPUT:
'					strFrameName : String that contains "Name" of the Frame.
'									Note: If  input value "null" then componenet return false which means no frame exist in the application .
'					FrameIndex: Integer that contains index of frame.
'									Note:If n frames exists in the application with same name,index will vary from o to (n-1).
'				OUTPUT:
'						g_objBrowserFrame: Object  that contains the browser page frame hierarchy.						
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					05/27/2014				New
'Varun V					09/22/2014				Modified the code by adding input parameters strFrameName and FrameIndex
'###############################################################################################
Private Function webSetFrame(strFrameName,FrameIndex)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################		
			Dim strReportStepLabel  	 		' (String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "Web Browser Library --->webSetFrame"
		 ' END PREREQUISITE CODE
	 ' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	 ' ###############################################################
	 'Check the input variable strFrameName is Null
	 If strFrameName <>"" Then
			'Check if strFrameName is "Frame" and FrameIndex is empty
			If LCASE(strFrameName) = "frame" and FrameIndex = "" Then
				'Set the browser page Frame hierarchy and assign to a global variable g_objBrowserFrame
				Set g_objBrowserFrame=g_CurrentBrowser.Page("micclass:=page").Frame("micclass:=Frame","Index:=0")
			'Check if strFrameName is "Frame" and FrameIndex is not empty
			ElseIf LCASE(strFrameName) = "frame" and FrameIndex <> "" Then
			'Set the browser page Frame hierarchy and assign to a global variable g_objBrowserFrame
				Set g_objBrowserFrame=g_CurrentBrowser.Page("micclass:=page").Frame("micclass:=Frame","Index:="&FrameIndex)
			'Check if FrameIndex is empty
			ElseIf FrameIndex <> "" Then
				'Set the browser page Frame hierarchy and assign to a global variable g_objBrowserFrame
				Set g_objBrowserFrame=g_CurrentBrowser.Page("micclass:=page").Frame("micclass:=Frame","name:="&strFrameName,"Index:="&FrameIndex)
			Else
				'Set the browser page Frame hierarchy and assign to a global variable g_objBrowserFrame
				Set g_objBrowserFrame=g_CurrentBrowser.Page("micclass:=page").Frame("micclass:=Frame","name:="&strFrameName,"Index:=0")
			End If
			'Check the existance of frame
			If g_objBrowserFrame.Exist(2) Then	
					'Return True to the function
					webSetFrame=True
			Else
					'Report Failed if the frame is exists in the application
					reporterReportEvent "Failed",strReportStepLabel,"Frame having name: '"&strFrameName&"' and Index : '"&FrameIndex&"' doen't exist in the application"
			End If
	Else
			'Return False to the function
		webSetFrame=False
		'Report warning if the frame is exists in the application
		reporterReportEvent "Warning",strReportStepLabel,"An empty value passed to the component and focus has been shifted to page."
	End if
End Function


'#############################################################################################################
' NAME: webSetFrameFocus
' PURPOSE:  This component helps user to  shift  focus from browser to frames,frame to frame and frame to browser
' PARAMETERS:
'		INPUT
'			strFrameName : String that contains "Name" of the Frame to shift focus.
'									Note: If user sends input value "null" then focus will  shift to default (first) browser .
'			FrameIndex: Integer that contains index of frame
'									Note:If n frames exist in the application with same name,index will vary from o to (n-1).
'		OUTPUT :
'			g_FrameFocus : String or integer value contains the Frame name.
'			g_FrameFocusIndex : Integer value contains the Index of the Frame.
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V								09/13/2014					New
'#############################################################################################################
Sub webSetFrameFocus(strFrameName,FrameIndex)
'PREREQUISITE CODE
	' Declarations
	'##############################################################     			
	Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		strReportStepLabel = "Web Browser Library --->webSetFrameFocus"
	'Check FrameIndex is a numeric value
	If IsNumeric(FrameIndex) or Trim(FrameIndex) = "" Then
	   'Assign the frame index to a global variable g_FrameFocusIndex
		g_FrameFocusIndex = FrameIndex
		'Verify the InputParameter "strFrameName"  is not NULL
		If Trim(strFrameName)<> "" Then
			'Assign the Frame name to a global variable g_FrameFocus
			g_FrameFocus = strFrameName
			'Report the status as "Done"
			reporterReportEvent	"Done",strReportStepLabel,"Frame focus has been set to the Frame: '" &g_FrameFocus&"' and Frame Index: '" &g_FrameFocusIndex&"'."
		Else
			'If input parameter is NULL then assign it to default (first ) browser.
			g_FrameFocus=""
			'Report the status as "Done "
			reporterReportEvent	"Done",strReportStepLabel,"Focus has been reset to the default (first) browser"
		End If
	Else
		'Report the status as fail when user passes a non numeric value for Frame index parameter
		reporterReportEvent	"Failed",strReportStepLabel,"Frame Index value: '"&FrameIndex&"' is not valid.Please pass a numeric value"
	End If
End Sub


'###############################################################################################
' NAME:  webSetPage
' PURPOSE:  To set the description  of browser and page hierarchy
' PARAMETERS:
'				INPUT:  None
'				OUTPUT:
'						g_objBrowserPage: Object  that contains the browser page hierarchy.						
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil						11/20/2012				New
'Varun V				03/28/2014				Set the g_CurrentBrowser object to nothing and updated the error message
'Varun V		09/17/2014				Modified the code to set the focus on frame,based on g_FrameFocus.
'###############################################################################################
Private Sub webSetPage()
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################		
			Dim strReportStepLabel  	 		' (String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "Web Browser Library --->webSetPage"
		 ' END PREREQUISITE CODE
	 ' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	 ' ###############################################################
	'call component to set current browser
	Set g_CurrentBrowser=webSetCurrentBrowser(g_objBrowserFocus)
	'Verify  "g_CurrentBrowser" is not empty
	If g_CurrentBrowser.Exist Then
		'#############################################################################
		'CODE MODIFICATION
		'Varun V		09/17/2014				Modified the code to set the focus on frame,based on g_FrameFocus.
		If webSetFrame(g_FrameFocus,g_FrameFocusIndex) Then
				'Set the g_objBrowserFrame object to g_objBrowserPage
				Set g_objBrowserPage = g_objBrowserFrame
		Else
				'If g_CurrentBrowser contains the browser name, then set the browser object using name property.
				Set g_objBrowserPage=g_CurrentBrowser.Page("micclass:=page")
				'##reporterReportEvent	"Passed","Web Library --->webSetPage","Browser Set."
		End If
			'Report Passed once page set
			reporterReportEvent	"Passed",strReportStepLabel,"Browser page hierarchy set successfully."
		'END CODE MODIFICATION
		'###########################################################################
	Else
		'#############################################################################
		'CODE MODIFICATION
		'Varun V		03/28/2014				Set the g_CurrentBrowser object to nothing and updated the error message
			'Set the g_CurrentBrowser as nothing
			Set g_CurrentBrowser=Nothing	
			'####reporterReportEvent	"Failed","Web Library --->webSetPage","Browser not found."
			'Report the status failed
			reporterReportEvent	"Failed",strReportStepLabel,"Browser with the name/title as "&g_objBrowserFocus&" and browser index as  "&g_BrowserFocusIndex&" ,doesn't exist.Please pass valid values for Browser name/title or Broswer Index parameter."
		'END CODE MODIFICATION
		'###########################################################################
	End If
	'wait for the browser page to refresh
	webWaitUntilPageRefresh g_objBrowserPage
End Sub


'################################################################################################################################################
' NAME:  webSetRadioButton
' PURPOSE: Selects a RadioButton option  based on InputValue provided.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			InputValue : Integers that contains value to select  WebRadioGroup options,inputValue should be either  0,1,2...
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil						17/09/2012					NEW
'Manjunath         01/23/2013                 Modified to add descriptive errors
'Manjunath                              		03/06/2013					Modified to organize logic flow
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'################################################################################################################################################
Sub webSetRadioButton(ScreenName_ObjectName,InputValue)

	'Get the web object based on input parameter from database/object repository
	Set objRadioButton=webGetObject(ScreenName_ObjectName)	
	'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	'Clear Error
	Err.Clear

		''#############################################################################
		''CODE MODIFICATION
		'' venkateswarlu v 02/22/2019 'This modification is implemented to support cross browser testing	
		''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
		''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.	
		'Verify the object is enabled
		'If objRadioButton.Object.isDisabled Then			
		'Verify the object is enabled	
		If objRadioButton.Object.Disabled Then
		'END CODE MODIFICATION
		'#############################################################################	
		'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0		
			'Report the status as Failed for object disable
			reporterReportEvent "Failed","WebElement Library--->webSetRadioButton","WebRadioGroup object " & ScreenName_ObjectName & " is disabled"		
		End if
			
	'Set the RadioButton option as per the input parameter :InputValue
	objRadioButton.Select "#"&ddGetItem(InputValue)
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
	'Do any error handling if the item was not able to be selected.
	If errNumber <>0 Then
		''#############################################################################
		''venkateswarlu v 02/22/201 Commented below line of code effecting for cross browser testing
		''Shiffted below lines of code for verification object enabled before selecting radio button		
		'Verify the object is enabled
		'If objRadioButton.Object.isDisabled Then	
			'Report the status as Failed for object disable
		'	reporterReportEvent "Failed","WebElement Library--->webSetRadioButton","WebRadioGroup object " & ScreenName_ObjectName & " is disabled"		
		'	Else				
			'Report the status as Failed and  error description
		reporterReportEvent "Failed","WebElement Library--->webSetRadioButton","Failed to perform Select operation on object "&ScreenName_ObjectName&Chr(13) &" Reason: "& errDescription
		'End if
	Else
	'Report as passed as there was no error occured  while performing specified operation on  object
	reporterReportEvent "Passed","WebElement Library--->webSetRadioButton", "Select operation performed successfully  on object : " &ScreenName_ObjectName&" for the input value: "&InputValue
	End If
End Sub


'#########################################################################################################################################
' NAME:  webSetSecureElementText
' PURPOSE:  To set encrypted text in to EditBox (Textbox) present in Web application.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			InputValue : Text that contains encrypted value to enter in the webedit field
'           Note* : To convert the value into encrypted value there are 2 ways to convert
'                 1) Using Password Encoder utility (Start > All Programs > HP Software > Unified Functional Testing > Tools > Password Encoder). Provide the value and generate the encrypted value.
'                 2) Parameterize the argument using a Data Table pararmeter and use the Data Table encryption option (right-click each unencrypted value in the password column and choose Data > Encrypt).
'		OUTPUT : None
'HISTORY
'NAME:												DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
'Rashmi Dinkar						02/21/2017				   	   NEW
'##############################################################################################################################################
Sub webSetSecureElementText(ScreenName_ObjectName,InputText)
		
		'Verify if ScreenName_ObjectName is empty
		If Trim(ScreenName_ObjectName)<>"" Then
		   'Get the web object based on input parameter from database/object repository
			Set objEdit=webGetObject(ScreenName_ObjectName)
			'verify the existence of input parameter in data dictionary
			InputValue=ddGetItem(InputText)		
			'On Error Resume Next causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			'Clear Error
			 Err.Clear
			
			'Setsecure the input value in WebEdit
			objEdit.SetSecure Trim(InputValue)
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Do any error handling if the item was not able to be selected.
			If errNumber <>0 Then
				''#############################################################################
				''02/22/2019 Commented below line of code effecting for cross browser testing
				'''Verify the object is enabled
				'Verify the object is disabled
				'If objEdit.Object.isDisabled Then
				''#############################################################################
				''#############################################################################
				''CODE MODIFICATION
				'' 02/22/2019 'This modification is implemented to support cross browser testing	
				''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
				''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.				
				'Verify the object is disabled
				If objEdit.Object.Disabled Then
				'END CODE MODIFICATION
				'#############################################################################								
					'Report the status as Failed for object disabled
					 reporterReportEvent "Failed","WebElement Library--->webSetSecureElementText","Text field " & ScreenName_ObjectName & " is disabled. Encrypted Value " & chr(34) & InputValue & chr(34) & " can not be entered. Please verify the test script steps and execute again.If issue not resolved then contact application developer."
					
				Else						
					'Report the status as Failed when the value is not set in the editbox due to some error
					 reporterReportEvent "Failed","WebElement Library--->webSetSecureElementText","Failed to enter the Encrypted value " & chr(34) & InputValue & chr(34) & " in the text field " & chr(34) & ScreenName_ObjectName & chr(34) & "." & "Due to the following error '" &errDescription& "'"
					End If
			Else
					'Report as passed as there was no error occurred while entering the input value in the text field on object
					reporterReportEvent "Passed","WebElement Library--->webSetSecureElementText", "Encrypted Value " & chr(34) & InputValue & chr(34) & " is entered successfully in the text field " & chr(34) & ScreenName_ObjectName & chr(34) & "."
			End If
			
		Else
					'Report as failed when 'ScreenName_ObjectName' value provided is empty
					reporterReportEvent "Failed","WebElement Library--->webSetSecureElementText", "ScreenName_ObjectName is a mandatory parameter so please enter the object name for the ScreenName_ObjectName as per object repository and execute the script again."
					
		End If

End Sub


'#############################################################################################################################
' NAME:  webTableClickElement
' PURPOSE:  Performs click operation in webtable object on any clickable elements (WebButton, Link , Image And WebElement) exist in a cell .
' PARAMETERS:
'		  INPUT     :
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required clickable element present in the webtable or Row Position where the clickable element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....

'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'			ObjectIndex: Integer that contains the index value of the object. This is to click on the specified clickable element  based on the index value.		
'	  	OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'SunilKumar	           03/19/2013	               NEW
'Manjunath    		  03/26/2013			Modified error handling for webtable object verification
'Manjunath            07/30/2013			Modified to include webTableGetObject component
'Varun V					09/03/2013				     Added On error Resume Next Statement for runtime error handling
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#############################################################################################################################
Sub  webTableClickElement(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex)
		'***************************
		'PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################	
			Dim strReportStepLabel  	 '(String)Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "WebTableElement Library--->webTableClickElement"
		'##############################################################
		'CODE MODIFICATION
		'09/03/2013 Varun V  Added On error Resume Next Statement for runtime error handling.
		'Initialize Error Handling
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'END CODE MODIFICATION
		'##############################################################
		'END PREREQUISITE CODE
		'**************************
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnName,ObjectIndex,ChildClass name
		'ChildClass name will be consist of clickable elements like "WebButton,Link,Image,WebElement"
		Set objChild=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,"WebButton,Link,Image,WebElement")
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error History
		Err.Clear
		'Perform click operation
		objChild.Click
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Do any error handling if the item was not able to be clicked.
		If errNumber <>0 Then
			''#############################################################################
			''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
			'Verify the element is enabled
			'If objChild.Object.isDisabled Then
			''#############################################################################
			''CODE MODIFICATION
			'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
			''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
			''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.
			If objChild.Object.Disabled Then
			''END CODE MODIFICATION
			''#############################################################################
				'Report the status as Failed for element disable
				reporterReportEvent "Failed",strReportStepLabel,"Clickable element is disabled in the table object: '" &ScreenName_ObjectName& "' for  reference value: '"& strRowInputValue &"' and column name/position: '"& ColumnNameorPosition&"'"
			Else				
				'Report the status as Failed and  error description
				reporterReportEvent "Failed",strReportStepLabel,"Failed to perform click operation in table object: '"&ScreenName_ObjectName&"' Reason: '"& errDescription&"'"
			End if
		Else
			'Report as passed as there was no error occured  while performing specified operation on  element
			reporterReportEvent "Passed",strReportStepLabel, "Clicked successfully on clickable object in the table: '" & ScreenName_ObjectName&"' for  reference value: '"& strRowInputValue &"' and  column name/position: '"& ColumnNameorPosition&"'"
		End If
End Sub


'###################################################################################################################
' NAME:  webTableGetChildObject
' PURPOSE:To get the ChildItime in a specified cell of table depends on 'ObjectIndex' parameter
' PARAMETERS:
'		INPUT
'                       objwebTable- Object that contains instance of the webtable object based on input parameter : ScreenName_ObjectName
'			ScreenName_ObjectName - String that contains reference to the webtable object stored in the object repository			
'			intChildItemsCount - Integer that contains the child item count value for a particular element
'			RowPosition  -  Integer that contains row value in which required element present  in the webtable
'			ColumnPos - Integer that contains the Column Position of webtable in which element present
'			objectClassNames: String that containes the child object class names which is to be  retrieved from a table.
'								   Note*:  For click  objectClassNames will be 'WebButton,Link,Image,WebElement',for SetCheckBox 'WebCheckBox',for SetText  'WebEdit' and for DropDown 'WebList'
'			ObjectIndex: Integer that contains the index value of the object present in a cell of the webtables to perform the operation on the specified  element  based on the index value.
'		OUTPUT :
'			webTableGetChildObject :Returns the web child object from the table
'HISTORY
'NAME:						DATE:					   PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath    		  05/27/2013			   		 New
'Narasinha				07/10/2013				Error handling code is added
'Manjunath      	   07/30/2013			Modified the name from webGetChildObjectFromTable to webTableGetObject
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'###################################################################################################################
Private Function webTableGetChildObject(objwebTable,ScreenName_ObjectName,intChildItemsCount,RowPosition,ColumnPos,strClassName,ObjectIndex)
	'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	 '##On Error Resume Next
	'Verify ObjectIndex input parameter
	If ObjectIndex="" Then
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Set the child object obtained
		Set webTableGetChildObject=objwebTable.ChildItem(RowPosition,ColumnPos,strClassName,0)
		'Report the status as warning when objectsIndex specified is null
		reporterReportEvent "Warning","WebTableElement Library ---> webTableGetChildObject","Object exist in a cell of a table "&ScreenName_ObjectName&" of specified row "& RowPosition &"and column name/position: " &ColumnPos&" and first item of Object type " & strClassName & " returned successfully."
		'Verify that given object index parameter is less than the child obect collection count.
	ElseIf Cint(ObjectIndex) < intChildItemsCount Then
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Set the   obtained child object
		Set webTableGetChildObject=objwebTable.ChildItem(RowPosition,ColumnPos,strClassName,Cint(ObjectIndex))	
		reporterReportEvent "Done","WebTableElement Library ---> webTableGetChildObject","Object of type  " & strClassName & "  exist in a cell of table object "&ScreenName_ObjectName&" and returned successfully."
	Else
		'Report the status as failed when objects count is less than input parameter "ObjectIndex"
		reporterReportEvent "Failed","WebTableElement Library ---> webTableGetChildObject","Supplied parameter objectIndex : "& ObjectIndex & " is  less then Object count : "& intChildItemsCount &"  in a cell of specified row "& RowPosition &" and column name/position: " &ColumnPos&Chr(13)& " in a Table object "&ScreenName_ObjectName
	End If
End Function


'###############################################################################################################################################
' NAME:  webTableGetColumnposition
' PURPOSE:  To get the column position from webtable depends on the supplied ColumnName or Column Position
' PARAMETERS:
'		INPUT     :
'			objwebTable : Object that contains instance of the webtable object based on input parameter : ScreenName_ObjectName
'			ScreenName_ObjectName  : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.												
'	   OUTPUT :
'            webTableGetColumnposition : Integer that contains column position
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil Kumar          11/13/2012                    NEW
'Manjunath L M	  06/18/2013              Modified to parameter ColumnName to ColumnNameorPosition
'Manjunath L M	   11/29/2013			Modified to include webtable verification and possible parameter error handling
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Varun V										8/11/2014										Added one more parameter objwebTable and removed the function call webGetObject and webIsTable
'################################################################################################################################################
Private Function  webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
	'PREREQUISITE CODE
	'######################################
	'CODE MODIFICATION
	'11/29/2013  Manjunath Modified to include webtable verification and possible parameter error handling	
		'1) Declarations
		'##############################################################
		'Dim objwebTable   		   'Contains the object of the table supplied from which the column position should be retrieved
		Dim blnColumnExist 		 'Contains the Boolean value for the column exist status in the table
		Dim intColumnIndex 		'Contains the integer column index which will be returned back the calling component if the name is supplied
		Dim intColumnCount	    'Contains the integer column count of the supplied webTable
		Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "WebTableElement Library ---> webTableGetColumnposition"
		'2) Initialize Error Handling
		'##On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'##Clear Error
		'##Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'Check the supplied ScreenName_ObjectName consist of the some value which will be retrieved from msaccess database
		If  Trim(ScreenName_ObjectName) <> "" Then
			'Check the supplied ColumnNameorPosition consist of some value
			If  Trim(ColumnNameorPosition) <> "" Then	
			'Verify the supplied parameter ColumnNameorPosition is name or position of the column
				If IsNumeric(ColumnNameorPosition) Then
					'return column position to the component
					 webTableGetColumnposition=Cint(ColumnNameorPosition)
					'Report the status as done  if expected column exist in the webtable
					reporterReportEvent "Done", strReportStepLabel ,"Supplied input parameter ColumnNameorPosition by the user "&_
					 "is having a column position and the position  is: '"&Cint(ColumnNameorPosition)&"'"
				Else
					'Get the web object based on input parameter from database/object repository
					'##Set objwebTable=webGetObject(ScreenName_ObjectName)
					'Verify that supplied object is a "webtable" from which column will be retrieved
					'##webIsTable objwebTable,ScreenName_ObjectName
					'Get the column count of the WebTable
					'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
					On Error Resume Next
					'Clear Error
					Err.Clear
					intColumnCount=objwebTable.GetROProperty("cols")
					'Declare the flag variable to check if required column position is found
					blnColumnExist=False
					'Iterate through all the column names in the WebTable
					For intColumnIndex=1 to intColumnCount
						'Verify the existence of the column in the WebTable
						If Trim(objwebTable.GetCellData(1,intColumnIndex))=Trim(ColumnNameorPosition) Then	
							'Change the Boolean flag status to True if column is found
							blnColumnExist=True
							Exit For
						End If
					Next    				
					'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0
					'Report the message according to the Boolean flag status		
					If blnColumnExist Then
						'Report the status as Done  if expected column exist in the webtable
						reporterReportEvent "Done", strReportStepLabel ,"Expected Column Name : '" & ColumnNameorPosition &"' Exists in the Table at: '" & intColumnIndex&"'"
						'return column position to the component
						 webTableGetColumnposition=intColumnIndex
					Else
						'Report the status as Failed  if expected column  doesn't exist in the webtable
						reporterReportEvent "Failed", strReportStepLabel  ,"Expected Column Name : '" & ColumnNameorPosition &" Does not Exists in the Table ."&_
						"Please recheck the webtable in the application ,Pass the valid column name to component and Re-run the script"
					End If
				End If
			Else
				'Report the status Failed if supplied ColumnNameorPosition consist of empty value
				reporterReportEvent "Failed", strReportStepLabel , "An empty ColumnName or Column Position was passed to the component."&_
				" ColumnNameorPosition value is required . Please enter the valid ColumnNameorPosition value and Re-run the script"
			End If
			Else
				'Report the status as Failed  if supplied ScreenName_ObjectName consist  empty value		
				reporterReportEvent "Failed", strReportStepLabel , "An empty ScreenName_ObjectName was passed to the component."&_
				" ScreenName_ObjectName value is required . Please enter the valid ScreenName_ObjectName value and Re-run the script"
		End If
	'END CODE MODIFICATION
	'######################################
End Function


'###################################################################################################################################################
' NAME:  webTableGetElementValue
' PURPOSE:  Get the webtable element(cell ) value corresponding to the 'row Refrence Value' and 'Column Name' from AUT during runtime
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName: String that contains reference to the Table object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'		OUTPUT :
'			ScreenName_ObjectName&"_tblval": Text that contains the default property value from a perticuler element(cell )
'HISTORY
'NAME:									DATE:							PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				 03/11/2013                  NEW
'Manjunath L M				 03/18/2013                  Added the concept to store the retrieved val in ScreenName_ObjectName_tblval key name in datadictionary
'###################################################################################################################################################
Sub webTableGetElementValue(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition)		
		'PREREQUISITE CODE
			'#############################################################
			' Declarations 			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "webTableElement Library --->webTableGetElementValue"
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################	
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Call the bellow component to get value corresponding to the 'row Refrence Value' and 'Column Name' from AUT during runtime
		strDefaultValue=Trim(webTableGetReturnElementValue(ScreenName_ObjectName,strRowValue,ColumnNameorPosition))
		'Add the retrieved value to dictionary with specfied ScreenName_ObjectName append with tblval string(ScreenName_ObjectName_tblval)
		ddAddItem ScreenName_ObjectName &"_tblval",strDefaultValue	
		'Report the status of the component as Done with retrieved value
		reporterReportEvent	"Done", strReportStepLabel ,"Retrieved default value for the table object: '" & ScreenName_ObjectName &"' for  reference value: '"& strRowInputValue &"'"&_
																" and column name: '"& ColumnNameorPosition &"' is: '"&strDefaultValue&"'"
End Sub




'####################################################################################################################################
'Name: webTableGetObject
'PURPOSE: To get the web child object based on speciified input parameter RowReferenceValueOrPosition, ColumnNameorPosition and class name in webtable object "ScreenName_ObjectName"
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required object present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position of webtable in which element is present
'			objectClassNames: String that contains the child object class names which is to be retrieved from a table.
'								   Note*:  For click  objectClassNames will be 'WebButton,Link,Image,WebElement',for SetCheckBox 'WebCheckBox',for SetText  'WebEdit' and for DropDown 'WebList'
'			ObjectIndex: Integer that contains the index value of the object present in a cell of the webtables to perform the operation on the specified  element  based on the index value.

'OUTPUT:				
'				webTableGetObject : Returns the web child object from the table
'HISTORY
'NAME:																DATE:													PURPOSE:
'Manjunath 													05/06/2013												NEW
'Narasinha													 07/10/2013											Updated for error handling	
'Manjunath      										   07/30/2013										Modified the name from webGetObjectFromTable to webTableGetObject
'Lakshman Kumar A.H.     24/02/2014					Removed Error Handling as it's been already handled in called components.
'Varun V							07/08/2014							Modified the logic by replacing "GetRowWithCellText" method by component webTableGetRowPosition and updated the function call webTableGetColumnposition
'Varun V							09/22/2014					Modified to include FireEvent trigger before doing the actual operation.
'##################################################################################################################################
Private Function webTableGetObject(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,objectClassNames)
	'PREREQUISITE CODE
		' Declarations
		'##############################################################
			Dim strFireEvent_EventNameForTable '(String)Name of the fire event method
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "WebTableElement Library ---> webTableGetObject"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Get the webtable  object based on input parameter : ScreenName_ObjectName
		Set objwebTable=webGetObject(ScreenName_ObjectName)
		'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objwebTable,ScreenName_ObjectName
		'Get the row position of the reference value
		'GetRowWithCellText method will return the value as '-1' if the RowReferenceValueOrPosition doesn't exist in the webtable object
		'GetRowWithCellText will return a value greater than '0' that is RowPosition of the RowReferenceValueOrPosition exist in the table
		'Get the row position of the reference value
		'##intRowPosition=objwebTable.GetRowWithCellText(ddGetItem(RowReferenceValueOrPosition))
		'Call webTableGetRowPosition to get the column position
		intRowPosition=webTableGetRowPosition(objwebTable,ScreenName_ObjectName,RowReferenceValueOrPosition)
		'Verify for the ReferenceValue existance
		If intRowPosition>0 Then
			'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
			'##intColumnPos=webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)			
			intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)	
			'Clear Error history
			'##Err.Clear
			'Split below array that contains the object class names
			arrClassNames=Split(objectClassNames,",")	
			'Declare the boolean flag to verify the child object existence
			blnChildObjectExist=False
			'Iterate through each object class in the array
			For Each strClassName In arrClassNames
				'Get the child item count of each object class  for specified RowReferenceValueOrPosition and ColumnName
				intChildItemsCount=objwebTable.ChildItemCount(intRowPosition,intColumnPos,strClassName)
				'Verify the child object is exist in the retrieved Row and Column position
				If intChildItemsCount > 0 Then
					'Declare the boolean flag as true for child object exist
					blnChildObjectExist=True
					'Exit for loop
					Exit For
				End If
			Next
			If Left(RowReferenceValueOrPosition,1)="{" and Right(RowReferenceValueOrPosition,1)="}" Then RowReferenceValueOrPosition = Mid(RowReferenceValueOrPosition,2,(Len(RowReferenceValueOrPosition)-2))
			If blnChildObjectExist Then
				'Get the child object based on the supplied objectIndex
				Set webTableGetObject=webTableGetChildObject(objwebTable,ScreenName_ObjectName,intChildItemsCount,intRowPosition,intColumnPos,strClassName,ObjectIndex)
				'###########################################################################
				'CODE MODIFICATION
				'09/22/2014			Varun V     Modified to include FireEvent trigger before doing the actuall operation.
				'Check 	g_FireEvent_EventName is Null
				If g_FireEvent_EventName<>"" Then
					'Use the fire event method "onmouseover" to the obtained object
					webTableGetObject.FireEvent g_FireEvent_EventName
					'Change the global variable g_FireEvent_EventName to ""
					g_FireEvent_EventName = ""
				End If		
				'END CODE MODIFICATION
				'############################################################################	
			Else
				'Report the status as failed when object doesn't exist in a cell
				reporterReportEvent "Failed", strReportStepLabel  ,"Object doesn't exist in a cell for specified reference value: '"& RowReferenceValueOrPosition & "' and column name: '"& ColumnNameorPosition & "' in a Table object: '"&ScreenName_ObjectName&"'"
			End If
		Else
			'Report the status as Failed if expected ReferenceValue not found in webtable
			reporterReportEvent "Failed", strReportStepLabel  ,"Expected reference value: '"  & RowReferenceValueOrPosition &"' not found in the table:' " & ScreenName_ObjectName&"'"
		End If
End Function


'###################################################################################################################################################
' NAME:  webTableGetReturnElementValue
' PURPOSE:  Get the webtable element(cell ) value corresponding to the 'row Refrence Value' and 'Column Name' from AUT during runtime
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName: String that contains reference to the Table object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.							
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'		OUTPUT :
'			webTableGetReturnElementValue : Text that contains the default property value from a perticuler element(cell )
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Narasinha 					03/21/2013				Return value is set  to function name  and changed to private function
'Varun V							07/08/2014							Modified the logic by replacing "GetRowWithCellText" method by component webTableGetRowPosition and updated the function call webTableGetColumnposition
'###################################################################################################################################################
Private Function webTableGetReturnElementValue(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition)
	'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "webTableElement Library --->webTableGetReturnElementValue"													
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
			'Get the web object based on input parameter : ScreenName_ObjectName
			Set objwebTable=webGetObject(ScreenName_ObjectName)
			'Verify that supplied object is a "webtable" to perform the operation
			webIsTable objwebTable,ScreenName_ObjectName
			'Get the row position of the reference value
			'GetRowWithCellText method will return the value as '-1' if the RowReferenceValueOrPosition doesn't exist in the webtable object
			'GetRowWithCellText will return a value greater than '0' that is RowPosition of the RowReferenceValueOrPosition exist in the table  		
			'##intRowPosition=objwebTable.GetRowWithCellText(ddGetItem(RowReferenceValueOrPosition))
		   'Call webTableGetRowPosition to get the column position
			intRowPosition=webTableGetRowPosition(objwebTable,ScreenName_ObjectName,RowReferenceValueOrPosition)
If Left(RowReferenceValueOrPosition,1)="{" and Right(RowReferenceValueOrPosition,1)="}" Then RowReferenceValueOrPosition = Mid(RowReferenceValueOrPosition,2,(Len(RowReferenceValueOrPosition)-2))
			'Verify for the ReferenceValue existence
			If intRowPosition>0 Then
				'Call below component to get the column position in which expected return value is present
				'##intColumnPosition=webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)
				intColumnPosition=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
				'Get the value from the table object with reference to row and column position
				strReferenceValue=Trim(objwebTable.GetCellData(intRowPosition,intColumnPosition))	
				'Return the retrieved value to component
				webTableGetReturnElementValue=strReferenceValue
				'Report the status of the component as Done with retrieved value
				reporterReportEvent	"Done", strReportStepLabel ,"Retrieved reference cell  value for the table object: '" & ScreenName_ObjectName & "' for  reference value: '"& RowReferenceValueOrPosition&"'" &Chr(13)&" and column name/position:  '"& ColumnNameorPosition &"' is : '"&strReferenceValue&"'"
			Else
				'Report the status as Failed if expected ReferenceValue not found in webtable
				reporterReportEvent "Failed", strReportStepLabel ,"Expected reference value: '"  & RowReferenceValueOrPosition &"' is not found in the table: '" & ScreenName_ObjectName &"'"
			End If	
End Function



'###############################################################################################################################################
' NAME:  webTableGetRowPosition
' PURPOSE:  To get the row position from webtable depending  on the supplied RowReferenceValueOrPosition
' PARAMETERS:
'		INPUT     :
'			objwebTable : Object that contains instance of the webtable object based on input parameter : ScreenName_ObjectName
'			ScreenName_ObjectName  : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'																Note:	1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'																			2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'																			3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'	   OUTPUT :
'            webTableGetRowPosition : Integer that contains row position
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V							08/11/2014								New
'################################################################################################################################################
Private Function  webTableGetRowPosition(objwebTable,ScreenName_ObjectName,RowReferenceValueOrPosition)
	'PREREQUISITE CODE
	'######################################
	'CODE MODIFICATION
		'1) Declarations
		'##############################################################
		Dim intRowCount 		   '(Integer)Total Number of Row
		Dim intColumnCount	      '(Integer)Total Number of Column
		Dim strCellValue			  '(String)Table Cell Value
		Dim blnGetRowSpecialCaseFound	'(Boolean) Status of # symbole in the row ref
		Dim Replaced_RowReferenceValueOrPosition '(String) # Replaced RowReferenceValueOrPosition value
		Dim blnRowFound			  '(Boolean) Status of rowvalue existance
		Dim strReportStepLabel   ' (String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTableElement Library ---> webTableGetRowPosition"
				blnRowFound = False
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'Check the supplied RowReferenceValueOrPosition consist of some value.
		If Trim(RowReferenceValueOrPosition) <> "" Then	
			'Check for '#' symbol inside the supplied value.
			blnGetRowSpecialCaseFound=(Left(RowReferenceValueOrPosition,1)="{" and Right(RowReferenceValueOrPosition,1)="}")
			'If exist then remove the appended '#' symbol from the supplied Row Ref, Assign to variable
			If blnGetRowSpecialCaseFound Then
				Replaced_RowReferenceValueOrPosition=Mid(RowReferenceValueOrPosition,2,(Len(RowReferenceValueOrPosition)-2))
			'If not exist Assign the supplied Row Ref to variable
			Else
				Replaced_RowReferenceValueOrPosition=RowReferenceValueOrPosition
			End If
			'Check RowReferenceValueOrPosition is numeric or not
			If Left(Replaced_RowReferenceValueOrPosition,1)="#" and IsNumeric(Replace(Replaced_RowReferenceValueOrPosition,"#","",1,1)) Then
				'Assign Row position to a variable			
				 webTableGetRowPosition=Cint(Replace(Replaced_RowReferenceValueOrPosition,"#","",1,1))
				'Report the status as Done
				reporterReportEvent "Done",strReportStepLabel,"Supplied input parameter RowReferenceValueOrPosition "&_
															 "is integer.Hence row position  is: '"&webTableGetRowPosition&"'"
			Else	
				'Disable the Report logs
				Reporter.Filter = rfDisableAll
				'Get the total row count and assign to avariable intRowCount
				intRowCount = objwebTable.RowCount
				'Initiate a For loop and iterate through all the rows							
				For intRowPositionIndex = 1 To intRowCount
					'Get the column count and assign to a variable intColumnCount
					intColumnCount = objwebTable.ColumnCount(intRowPositionIndex )
					'Initiate a For loop and iterate through all the columns
					For intColumnIndex = 1 To intColumnCount
						'Get the cell value and assign to a variable strCellValue
						strCellValue = Trim(objwebTable.GetCellData(intRowPositionIndex ,intColumnIndex))
						'Check strCellValue and RowReferenceValueOrPosition are PARTIAL / EXACT equal
						If blnGetRowSpecialCaseFound Then
							'Check for the exact value match from table cell
							blnRowFound = testCompareValues(strCellValue, Replaced_RowReferenceValueOrPosition, True)
						Else
							'Check for the partial value match from table cell
							blnRowFound = testCompareValues(strCellValue, Replaced_RowReferenceValueOrPosition, False)
						End If		
						'Check Row Value existance, By using defined variable blnRowFound in the previous step
						If blnRowFound Then Exit For												
					Next
					'Exit for loop if blnRowFound is true
					If blnRowFound Then Exit For
				Next
				'Enable the Report logs
				Reporter.Filter = rfEnableAll
				'Check the status of blnRowFound
				If  blnRowFound Then
					'Report the status as Done  if expected row exist in the webtable
					reporterReportEvent "Done",strReportStepLabel,"Expected Row value : '" & Replaced_RowReferenceValueOrPosition &"' exists in the WebTable : '"&ScreenName_ObjectName&"' at row position : '" & intRowPositionIndex&"'"				
							'return row position to the component
						webTableGetRowPosition=intRowPositionIndex
				ElseIf blnGetRowSpecialCaseFound Then
					'Report the status as Failed  if expected exact row refe doesn't exist in the webtable
					reporterReportEvent "Failed",strReportStepLabel,"Expected Exact RowReferenceValueOrPosition : '" & Replaced_RowReferenceValueOrPosition &"' doesn't Exists in the WebTable : '"&ScreenName_ObjectName&_
																"'.Please enter a valid RowReferenceValueOrPosition."
				Else
					'Report the status as Failed  if expected partial row refe doesn't exist in the webtable
					reporterReportEvent "Failed",strReportStepLabel,"Expected Partial RowReferenceValueOrPosition : '" & Replaced_RowReferenceValueOrPosition &"' doesn't Exists in the WebTable : '"&ScreenName_ObjectName&_
																"'.Please enter a valid RowReferenceValueOrPosition."
				End If
			End If
		Else
			'Report the status Failed if supplied RowReferenceValueOrPosition consist of empty value
			reporterReportEvent "Failed",strReportStepLabel, "An empty RowReferenceValueOrPosition has been passed to the component."&_
																																								"Please enter the valid RowReferenceValueOrPosition."
		End If
End Function


'####################################################################################################################################
'Name: webTableSetAllElementsText
'PURPOSE:  Set the input values to reference values WebEdit present under  the webtable
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPositions  - String reference that contains values which is inline with the required editable element present in the webtable or Row Positions where the element is located.
'							 **Note-multiple values should be seperated by ';' delimiter
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String that contains the Column Name of webtable in which editable element present
'			InputValues- Text that containes InputValues to enter in the editable element present  in the webtable.
'					**Note-multiple values should be seperated by ';' delimiter
'			ObjectIndex: Integer that contains the index value of the editable element. This is to set the the specified input value in the editable element based on the objectindex .
'OUTPUT:	None
'HISTORY
'NAME:																						DATE:													PURPOSE
'Manjunath L M																	05/22/2013											     NEW
'Narasinha																			07/30/2013											Updated as per new webtable functionality
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Varun V							07/08/2014							Modified the logic by replacing "GetRowWithCellText" method by component webTableGetRowPosition and updated the function call webTableGetColumnposition
'Varun V							09/22/2014					Modified to include FireEvent trigger before doing the actual operation.
'##############################################################################################################################
Sub webTableSetAllElementsText(ScreenName_ObjectName,RowReferenceValueOrPositions,ColumnNameorPosition,InputValues,ObjectIndex)
	'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "WebTableElement Library--->webTableSetAllElementsText"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'On Error Resume Next' causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Get the webtable  object based on input parameter : ScreenName_ObjectName
		Set objwebTable=webGetObject(ScreenName_ObjectName)
	    'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objwebTable,ScreenName_ObjectName
		 'The below array that contains the all the row reference values
		arrRowReferenceValueOrPosition=Split(ddGetItem(RowReferenceValueOrPositions),";")
		 'The below array that contains the all the input values for each row reference values
		arrInputValue=Split(ddGetItem(InputValues),";")
		'Verify that supplied RowReferenceValueOrPosition Count and inputValues Count are equal.
		If Ubound(arrRowReferenceValueOrPosition)=Ubound(arrInputValue) Then
			'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
			'##intColumnPos=webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)
			intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
			'Iterate through all RowReferenceValueOrPositions ,
			For intArrayIndex= 0 to Ubound(arrRowReferenceValueOrPosition)
				'GetRowWithCellText method will return the value as '-1' if the RowReferenceValueOrPosition doesn't exist in the webtable object
				'GetRowWithCellText will return a value greater than '0' that is RowPosition of the RowReferenceValueOrPosition exist in the table
				'Get the RowPosition Of the RowReferenceValueOrPosition(intArrayIndex)in a variable intRowPosition
				'##intRowPosition=objwebTable.GetRowWithCellText(arrRowReferenceValue(intArrayIndex))
		         'Check "{" and "}" exists in the RowReferenceValueOrPosition
				If Left(Trim(arrRowReferenceValueOrPosition(intArrayIndex)),1)="{" and Right(Trim(arrRowReferenceValueOrPosition(intArrayIndex)),1)="}" Then
					'Get the row value from Data Dictionary
					strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(arrRowReferenceValueOrPosition(intArrayIndex)),2,(Len(Trim(arrRowReferenceValueOrPosition(intArrayIndex)))-2)))))
					'Append the obtained value with "{","}" and sign to a variable strRowValue
					strRowValue = "{"&strRowInputValue&"}"
				Else
					'Get the RowReferenceValueOrPosition value from Data Dictionary
					strRowValue = Trim(ddGetItem(Trim(arrRowReferenceValueOrPosition(intArrayIndex))))	
					'Assign the strRowValue to the variable strRowInputValue
					strRowInputValue = strRowValue
				End If
				'Call webTableGetRowPosition to get the column position
				intRowPosition=webTableGetRowPosition(objwebTable,ScreenName_ObjectName,strRowValue)
				'Verify for the ReferenceValue existance
				If intRowPosition>0 Then                    				
					'Determine the webEdit child object in a cell of the webtable with    retrieved rowposition and column position.
					intChildItemsCount=objwebTable.ChildItemCount(intRowPosition,intColumnPos,"WebEdit")
					'Verify the child object is exist in the retrieved Row and Column position
					If intChildItemsCount > 0 Then
						Set objWebEdit=webTableGetChildObject(objwebTable,ScreenName_ObjectName,intChildItemsCount,intRowPosition,intColumnPos,"WebEdit",ObjectIndex)					
						'On Error Resume Next' causes execution to continue with the statement immediately following the statement that caused the run-time error
						On Error Resume Next
						'Clear error
						Err.clear
							'###########################################################################
							'CODE MODIFICATION
							'09/22/2014			Varun V     Modified to include FireEvent trigger before doing the actuall operation.
							'Check 	g_FireEvent_EventName is Null
							If g_FireEvent_EventName<>"" Then
								'Use the fire event method "onmouseover" to the obtained object
								objWebEdit.FireEvent g_FireEvent_EventName
								'Change the global variable g_FireEvent_EventName to ""
								g_FireEvent_EventName = ""
							End If		
							'END CODE MODIFICATION
							'############################################################################	
						'set the input value
						objWebEdit.Set arrInputValue(intArrayIndex)
						'Store the generated run time error number and error description in variables.
						errNumber = Err.Number
						errDescription = Err.Description
						'Clear the error.
						Err.Clear
						'Ends the Error Handling Scope.
						On Error GoTo 0
						'Do any error handling if the item was not able to be clicked.
						If errNumber <> 0 Then
						''#############################################################################
						''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing						
							'Verify the element is enabled
							'If objWebEdit.Object.isDisabled Then
						''END CODE MODIFICATION
						''#############################################################################	
						''#############################################################################
						''CODE MODIFICATION
						'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
						''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
						''So we are changing it from "isDis						
							'Verify the element is enabled
							If objWebEdit.Object.Disabled Then
						''END CODE MODIFICATION
						''#############################################################################							
								'Report the status as warning for element disable
								reporterReportEvent "Warning", strReportStepLabel ,"Editable element is disabled in the table object: '" &ScreenName_ObjectName & "'" &Chr(13) & " for  row value: '"& strRowInputValue & "' and column name/position: '"& ColumnNameorPosition&"'"
							Else				
								'Report the status as warningand  error description
								reporterReportEvent "Warning", strReportStepLabel ,"Failed to perform set operation in table object: '"&ScreenName_ObjectName&"'"&Chr(13) &" Reason: '"& errDescription&"'"
							End if
						Else
							'Report as done as there was no error occured  while performing specified operation on  element
							reporterReportEvent "Done", strReportStepLabel , "Value set successfully on EditBox in the table: '" & ScreenName_ObjectName &"'"& Chr(13) & " for  row value: '"& strRowInputValue & "' and column name/position: '"& ColumnNameorPosition&"'"
						End If
					Else
						reporterReportEvent "Warning", strReportStepLabel ,"Object webEdit doesn't exist in a cell for reference value: '"& strRowInputValue & "' and column name/position: '"& ColumnNameorPosition & "' in a Table object '"&ScreenName_ObjectName&"'"
					End If                    		
				Else
					'Report the status as warning if expected ReferenceValue not found in webtable
					reporterReportEvent "Warning", strReportStepLabel ,"Expected reference value: '" & strRowInputValue &"' not found in the table: '" & ScreenName_ObjectName&"'"
				End If
			Next
		Else
			'Report the status as failed when supplied RowReferenceValueOrPositions count and InputValues Count are not equal
			reporterReportEvent "Failed", strReportStepLabel ,"Supplied RowReferenceValueOrPositions count is: '" & Ubound(arrRowReferenceValueOrPosition) & "' and InputValues Count is: '" &  Ubound(arrInputValue) & "' are not equal"
	End If
End Sub


'####################################################################################################################################
'Name: webTableSetAllTextWithSequentialNumbers
'PURPOSE: Set the sequential values to webedit of each row for a specified column name/position present under webtable.
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			ColumnNameorPosition  : String or integer that contains the Column Name / position of webtable in which element present
'			ObjectIndex: Integer that contains the index value of the object. This is to set on the specified webedit element  based on the index value.

'OUTPUT:None
'HISTORY
'NAME:																DATE:													PURPOSE:
'Manjunath 													05/21/2013												       NEW
'Manjunath                                                  05/27/2013                                                 Modified the component name
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Varun V								07/08/2014						Modified the function call webTableGetColumnposition by adding one more parameter objWebTable
'Varun V							09/22/2014					Modified to include FireEvent trigger before doing the actual operation.
'##################################################################################################################################
Function webTableSetAllTextWithSequentialNumbers(ScreenName_ObjectName,ColumnNameorPosition,ObjectIndex)
	'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTableElement Library ---> webTableSetAllTextWithSequentialNumbers"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
			'Get the webtable object based on input parameter : ScreenName_ObjectName
			Set objwebTable=webGetObject(ScreenName_ObjectName)
			'Verify that supplied object is a "webtable" to perform the operation
			webIsTable objwebTable,ScreenName_ObjectName
			'Get the row count of the webtable in a variable
			intRowCount =objwebTable.RowCount
			'Verify that the supplied table is having edit boxes to set sequentially value
			If intRowCount >1 Then
				'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
				'##intColumnPos = webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)
				intColumnPos = webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
				'Iterate through all rows starting from first row
				For intRowIndex = 2 to intRowCount
					'"On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
					On Error Resume Next
					'Clear Error history
					Err.Clear
					'Get the child item count of webEdit obiect
					intChildItemsCount=objwebTable.ChildItemCount(intRowIndex,intColumnPos,"WebEdit")
					'Verify the child object is exist in the retrieved Row and Column position
					If intChildItemsCount > 0 Then
						'Verify ObjectIndex input parameter
						If ObjectIndex="" Then
							'Set the child object obtained
							Set objWebEdit=objwebTable.ChildItem(intRowIndex,intColumnPos,"WebEdit",0)
							'Report the status as warning when objectsIndex specified is null
							reporterReportEvent "Warning", strReportStepLabel ,"Objects exist in a cell of a table: '"&ScreenName_ObjectName&"' of  row value: '"& intRowIndex & "' and column name/position: '"& ColumnNameorPosition & "' and first item selected successfully."
						'Verify that given object index parameter is less than the child obect collection count.
						ElseIf ObjectIndex < intChildItemsCount Then
							'Set the child object obtained
							Set objWebEdit=objwebTable.ChildItem(intRowIndex,intColumnPos,"WebEdit",ObjectIndex)	
							'Report the as done
							reporterReportEvent "Done", strReportStepLabel ,"EditBox Object exist in a cell of table object: '"&ScreenName_ObjectName&"' and returned successfully."
						Else
						   'Clear the error.
							Err.Clear
							'Ends the Error Handling Scope.
							On Error GoTo 0
							'Report the status as failed when objects count is less than input parameter "ObjectIndex"
							reporterReportEvent "Failed", strReportStepLabel ,"Supplied parameter objecctIndex: '"& ObjectIndex & "' is  less then Object count: '"& intChildItemsCount &"' in a cell of row value: '"& intRowIndex & "' and column name/position: '"& ColumnNameorPosition & "'" &Chr(13)& " in a Table object: '"&ScreenName_ObjectName&"'"
						End If
					Else
						'Report the status as warning when object doesn't exist in a cell
						reporterReportEvent "Warning", strReportStepLabel ,"Object webEdit doesn't exist in a cell for row value: '"& intRowIndex & "' and column name/position: '"& ColumnNameorPosition & "' in a Table object: '"&ScreenName_ObjectName&"'"
					End If
					'Clear Error history
					Err.Clear
						'###########################################################################
							'CODE MODIFICATION
							'09/22/2014			Varun V     Modified to include FireEvent trigger before doing the actuall operation.
							'Check 	g_FireEvent_EventName is Null
							If g_FireEvent_EventName<>"" Then
								'Use the fire event method "onmouseover" to the obtained object
								objWebEdit.FireEvent g_FireEvent_EventName
								'Change the global variable g_FireEvent_EventName to ""
								g_FireEvent_EventName = ""
							End If		
							'END CODE MODIFICATION
					'############################################################################	
					'set th esequential number which will start from 1,2,3...
					objWebEdit.Set intRowIndex-1
					'Do any error handling if the item was not able to be clicked.
					If Err.Number<>0 Then
						''#############################################################################
						''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
						'Verify the element is enabled
						'If objWebEdit.Object.isDisabled Then
						''END CODE MODIFICATION
						''############################################################################
						''#############################################################################
						''CODE MODIFICATION
						'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
						''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
						''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.						
						'Verify the element is enabled
						If objWebEdit.Object.Disabled Then
						''END CODE MODIFICATION
						''#############################################################################
							'Report the status as warning for element disable
							reporterReportEvent "Warning", strReportStepLabel ,"Editable element is disabled in the table object: '" &ScreenName_ObjectName & "'" &Chr(13) & "for  row value: '"& intRowIndex & "' and column name/position: '"& ColumnNameorPosition&"'"
						Else				
							'Report the status as warning and  error description
							reporterReportEvent "Warning", strReportStepLabel ,"Failed to perform set operation in table object: '"&ScreenName_ObjectName& "'" &Chr(13) &" Reason: '"&Err.Description&"'"
						End if
					Else
						'Report as done as there was no error occured  while performing specified operation on  element
						reporterReportEvent "Done", strReportStepLabel , "Value set successfully on EditBox in the table: '" & ScreenName_ObjectName & "'" &Chr(13) & " for  row value: '"& intRowIndex & "' and column name/position: '"& ColumnNameorPosition&"'"
					End If
				Next
			Else	
				'Report the status as failed when supplied table not having rows
				reporterReportEvent "Failed", strReportStepLabel ,"Supplied webTable object: '"&ScreenName_ObjectName&"' is not having any edit boxes to set"
			End If		
End Function


'####################################################################################################################################
'Name: webTableSetCheckBox
'PURPOSE:  Performs set operation in webtable object on any checkbox elements (WebCheckBox) exist in a cell .
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required check box present in the webtable or Row Position where the check box is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position of webtable in which element present
'			ObjectIndex: Integer that contains the index value of the checkbox element. This is to set the  specified input value  in the checkbox element based on the objectindex .
'			InputText- Text that containes InputValue to enter in the checkbox element present  in the webtable.
'						*Note: 	InputText should be either  ON or OFF ,if user wants to select some checkbox then InputText must be 'ON'
'      						if user wants to unselect some checkbox then InputText must be 'OFF'
'OUTPUT:
'				None
'HISTORY
'NAME:																						DATE:													PURPOSE
'Manjunath L M																		04/26/2013											 NEW
'Narasinha																				07/10/2013										Updated for error handling   \
'Manjunath      										   							  07/30/2013									Modified the name from webGetObjectFromTable to webTableGetObject
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'##############################################################################################################################
Sub  webTableSetCheckBox(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,InputText)
'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTableElement Library--->webTableSetCheckBox"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
	'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
	'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnName,ObjectIndex,ChildClass name
	'ChildClass name will be consist of checkbox element "WebCheckBox"
	Set objChild=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,"WebCheckBox")
	'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	'Clear Error History
	Err.Clear
	'Perform set operation
	objChild.Set ddGetItem(InputText)
'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0
	'Do any error handling if the item was not able to be clicked.
	If errNumber <>0 Then
		''#############################################################################
		''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing	
		'Verify the check box is enabled
		'If objChild.Object.isDisabled Then
		''#############################################################################
		''#############################################################################
		''CODE MODIFICATION
		'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
		''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
		''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.		
		'Verify the check box is enabled
		If objChild.Object.Disabled Then
		''END CODE MODIFICATION
		''#############################################################################		
			'Report the status as Failed for element disable
			reporterReportEvent "Failed", strReportStepLabel ,"Checkbox element is disabled in the table object: '" &ScreenName_ObjectName& "' for  reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'"
		Else				
			'Report the status as Failed and  error description
			reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform set operation on checkbox in table object: '"&ScreenName_ObjectName&"' Reason: '"& errDescription&"'"
		End if
	Else
		'Report as passed as there was no error occured  while performing specified operation on  element
		reporterReportEvent "Passed", strReportStepLabel , "Value set successfully on checkbox element present  in the table: '" & ScreenName_ObjectName&"' for  reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'"
	End If
End Sub


'#############################################################################################################################'
' NAME:  webTableSetDropDownValue
' PURPOSE:  Performs select operation in webtable object on specified dropdown elements (WebList) exist in a cell .
' PARAMETERS:
'		INPUT     :
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository.
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required web list present in the webtable or Row Position where the web list is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String that contains the Column Name of webtable in which dropdown element present.
'			ObjectIndex	:  Integer that contains the index value of the dropdown element which is present in perticular cell of webtable.
'			InputText	: Text that containes InputValue to select in the dropdown element present  in the webtable.
'							Note : If drop down object present under the table is multiple selection drop down, then pass semicolon separated values to InputText
'										parameter to select  multiple values.(Ex:= "LegalEntity;LegalName;RelationShipName")
'	  OUTPUT : None
'HISTORY
'NAME:				 DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath    	    		 07/03/2013	   	NEW
'Narasinha			 07/04/2013		updated for error handling and new webtable functionality.
'Narasinha			 07/17/2013		Modified to remove the random selection and adding functionality for multiple selection
'Neeraj Gaur			 11/14/2013		Modified the webGetObjectFromTable component name to webTableGetObject
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#############################################################################################################################
Sub webTableSetDropDownValue(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,InputText)
	    'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTableElement Library--->webTableSetDropDownValue"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		blnInputValueIsNull=False
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnName,ObjectIndex,ChildClass name
		'ChildClass  will be name of object class, operation to be performed.
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'######################################
		 'CODE MODIFICATION
		 '11/14/2013  Neeraj Gaur  Modified the webGetObjectFromTable component name to webTableGetObject
		'## Set objDropDown=webGetObjectFromTable(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,"WebList")	
		 Set objDropDown=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,"WebList")		
		 'END CODE MODIFICATION
		 '#################################
		'Get all items from the dropdown (Should work even if the field is disabled)
		objDropDownAllItems=Trim(objDropDown.GetROProperty("all items"))	
		'Based on the value of the InputText passed in, determine which input value to pick.
		If Ucase(Trim(InputText )) ="SELECTALL" Then
			'Assign all the values from the dropdown
			InputValue=objDropDownAllItems
		Else
			'verify the existance of input parameter in data dictionary
			InputValue=ddGetItem(Trim(InputText))		
		End If		
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		Err.Clear
		'Verifying the supplied drop down object is multiple selection drop down
		If objDropDown.GetROProperty("select type")="Extended Selection" Then
			'Split the input values so that we can select one by one in a webdropdown
			arrInputValues=Split(InputValue,";")
			'Iterate each value in the input values array and select in the webdropdown
			For Each strInputValue In arrInputValues
				'Select each value as specified in the inputvalue  parameter
				objDropDown.ExtendSelect ddGetItem(Trim(strInputValue))         			
			Next
		ElseIf Trim(InputValue)="" Then
				blnInputValueIsNull=True
		Else
		    objDropDown.Select InputValue		  			
		End If			
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Do any error handling if the item was not able to be selected.
		If errNumber <>0 Then
			''#############################################################################
			''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
			'Verify the object is disabled
			'If objDropDown.Object.isDisabled  Then
			''#############################################################################
			''#############################################################################
			''CODE MODIFICATION
			'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
			''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
			''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.
			'Verify the object is disabled
			If objDropDown.Object.Disabled  Then
			''END CODE MODIFICATION
			''#############################################################################				
				'Report the status as Failed for object disable
				reporterReportEvent "Failed", strReportStepLabel ,"webDropDown element is disabled in the table object: '" &ScreenName_ObjectName&"' for  reference value: '"&_
																													strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'"
			'Verify the supplied input values are multiple .If so then drop down should be of selection type 'Extended Selection'
			ElseIf  InStr(1,InputText,";")<>0  And objDropDown.GetROProperty("select type")<>"Extended Selection"  Then
				'Report the status as Failed for the object can not be selected any multiple values
				reporterReportEvent "Failed", strReportStepLabel ,"webdropdown object present under the table: '" & ScreenName_ObjectName & "' is of single selection dropdown "&_
																													"and input values supplied is multiple ,the values are: '"&InputText&"'"
			'Verify the specified  InputValue in dropdown
			ElseIf  InStr(1,objDropDownAllItems,InputValue)=0 And objDropDown.GetROProperty("select type")<>"Extended Selection"  Then
				 'Item as specified in Data Dictionary was not found. Report the status as failed
				 reporterReportEvent "Failed", strReportStepLabel ,"webDropDown element in the table object: '" &ScreenName_ObjectName & "' for  reference value: '"& strRowInputValue &_
										"' and column name: '"& ColumnNameorPosition &"' does not contain the input value: '"&InputValue&"' to select in dropdown items: '" & objDropDownAllItems&"'"
			  	'Verify the supplied input values are multiple .If so then drop down should be of selection type 'Extended Selection'
			ElseIf (InStr(1,InputText,";")<>0 OR Ucase(Trim(InputText )) ="SELECTALL" OR  InStr(1,objDropDownAllItems,InputValue)=0 ) And objDropDown.GetROProperty("select type")="Extended Selection"Then
				'Report the status as Failed for the object can not be selected any multiple values
				reporterReportEvent "Failed", strReportStepLabel ,"multiple selection webdropdown object present under the table: '" & ScreenName_ObjectName & "' for  reference value: '"&_
							 strRowInputValue &"' and column name: '"& ColumnNameorPosition &"' does not contain the input value: '"&InputValue&"' to select in dropdown items '" & objDropDownAllItems&"'"
			Else
				 'Report the status as Failed and  error description
				reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform select operation in table object: '"&ScreenName_ObjectName&"' Reason: '"& errDescription&"'"
			End if
			'Report the status is failed for the InputText parameter is not having any value (Null)
		ElseIf blnInputValueIsNull Then
			 reporterReportEvent "Failed", strReportStepLabel ,"Please pass the value for 'InputText'  parameter  to select item  from webdropdown  object present under the table: '"&ScreenName_ObjectName&"'"
		Else
			'Report as passed as there was no error occured  while performing specified operation on  object
			reporterReportEvent "Passed", strReportStepLabel , "Select operation performed successfully  on dropdown element in table object: '" & ScreenName_ObjectName & "' for "&_
																	"reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition &"' for the input value : '"&InputValue&"'"
		End If
End Sub


'####################################################################################################################################
'Name: webTableSetElementbyKeyStroke
'PURPOSE:  Set the value to WebEdit  present under  the webtable cell by Key Stroke.
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required editable element present in the webtable or Row Position where the editable element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'			ObjectIndex	: Integer that contains the index value of the editable element. This is to set the the specified input value in the editable element based on the objectindex .
'			InputText	: Text that containes InputValue to enter in the editable element present  in the webtable.
'OUTPUT:
'				None
'HISTORY
'NAME:								DATE:													PURPOSE
'Varun V							06/18/2014												 NEW
'######################################################################################################################################
Sub webTableSetElementbyKeyStroke(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,InputText)
'***************************
	'PREREQUISITE CODE
	' 1) Declarations
	' ##############################################################
		Dim objChild						'(Object) webEdit child object
		Dim objWSShell				'(Object) Shell object
		Dim strReportStepLabel  	 '(String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Web Library --> webTableSetElementbyKeyStroke"
	'END PREREQUISITE CODE
	'***************************
	' BEGIN FUNCTION IMPLEMENTATION
	' ###############################################################
		   'Get the input value from dd
		   InputValue=Trim(ddGetItem(InputText))
			'Check "{" and "}" exists in the RowReferenceValueOrPosition
			If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
				'Get the row value from Data Dictionary
				strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
				'Append the obtained value with "{","}" and siign to a variable strRowValue
				strRowValue = "{"&strRowInputValue&"}"
			Else
				'Get the RowReferenceValueOrPosition value from Data Dictionary
				strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
				'Assign the strRowValue to the variable strRowInputValue
				strRowInputValue = strRowValue
			End If
			'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,ChildClass name
			'ChildClass name will be consist of editable element "WebEdit"
			Set objChild=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,"WebEdit")
			'Set the Shell object to a variable objWSShell
			Set objWSShell = CreateObject("WScript.Shell")
			'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			'Clear Error History
			Err.Clear
			'Perform click operation to place the cursor in the edit field
			objChild.Click
			''##################################
			'Code modified to wait 2 seconds after clicked on text field
			'wait 2
			'End Modification
			''##################################
			'Set the input value in WebEdit by using sendkey method
			objWSShell.SendKeys InputValue
			'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Do any error handling if the item was not able to be clicked.
			If errNumber <>0 Then
				''#############################################################################
				''02/22/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
				'Verify the element is enabled
				'If objChild.Object.isDisabled Then
				''#############################################################################
				''#############################################################################
				''CODE MODIFICATION
				''vENKATESWARLU V 02/22/2019 'This modification is implemented to support cross browser testing	
				''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
				''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.				
				If objChild.Object.Disabled Then
				'END CODE MODIFICATION
				'#############################################################################
					'Report the status as Failed for element disable
					reporterReportEvent "Failed", strReportStepLabel ,"Editable element is disabled in the table object: '" &ScreenName_ObjectName & "' for reference value: '"& _
																								strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'."
				Else				
					'Report the status as Failed and  error description
					reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform set operation to editable element present in table object: '"&ScreenName_ObjectName&_
																								"' due to Reason: '"& errDescription&"'. Please re-execute the script."
				End if
			Else
				'Report as passed as there was no error occured  while performing specified operation on  element
				reporterReportEvent "Passed", strReportStepLabel , "The value: '"&InputValue&"' is set successfully to editable element present in the table: '" & ScreenName_ObjectName &_
																					"' for  reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'."
			End If
End Sub


'####################################################################################################################################
'Name: webTableSetElementText
'PURPOSE:  Set the value to WebEdit  present under  the webtable cell.
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required editable element present in the webtable or Row Position where the editable element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'			ObjectIndex	: Integer that contains the index value of the editable element. This is to set the the specified input value in the editable element based on the objectindex .
'			InputText	: Text that containes InputValue to enter in the editable element present  in the webtable.
'OUTPUT:
'				None
'HISTORY
'NAME:																						DATE:													PURPOSE
'Sunil  Kumar																			03/18/2013											 NEW
'Manjunath L M																		04/26/2013											 Modified to add the webGetObjectFromTable component
'Narasinha																				08/07/2013											 Updated as per new webtable functionality .
'Manjunath      										   							  07/30/2013									   Modified the name from webGetObjectFromTable to webTableGetObject
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'######################################################################################################################################
Sub webTableSetElementText(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,InputText)
'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTableElement Library--->webTableSetElementText"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,ChildClass name
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
	'ChildClass name will be consist of editable element "WebEdit"
	Set objChild=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,"WebEdit")
	' 'verify the existance of input parameter in data dictionary
	InputValue=Trim(ddGetItem(InputText))
	'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	'Clear Error History
	Err.Clear
	'Perform click operation
	objChild.Set InputValue
	'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0
	'Do any error handling if the item was not able to be clicked.
	If errNumber <>0 Then
		''#############################################################################
		''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing	
		'Verify the element is enabled
		'If objChild.Object.isDisabled Then
		''#############################################################################
		''#############################################################################
		''CODE MODIFICATION
		'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
		''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
		''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.		
		If objChild.Object.Disabled Then
		''END CODE MODIFICATION
		''#############################################################################		
			'Report the status as Failed for element disable
			reporterReportEvent "Failed", strReportStepLabel ,"Editable element is disabled in the table object: '" &ScreenName_ObjectName&"' for  reference value: '"& strRowInputValue &_
																												"' and column name: '"& ColumnNameorPosition&"'"
		Else				
			'Report the status as Failed and  error description
			reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform set operation to editable element present in table object: '"&ScreenName_ObjectName&"' Reason: '"& errDescription&"'"
		End if
	Else
		'Report as passed as there was no error occured  while performing specified operation on  element
		reporterReportEvent "Passed", strReportStepLabel , "The value: '"&InputValue&"' is  set successfully  to editable element present in the table: '" & ScreenName_ObjectName &_
																												"' for  reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'"
	End If
End Sub


'####################################################################################################################################
'Name: webTableSetRadioButton
'PURPOSE: Performs set operation on any webRadioGroup present under the webtable
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required radiobutton present in the webtable or Row Position where the radiobutton is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position of webtable in which element present
'			ObjectIndex: Integer that contains the index value of the object. This is to set on the specified clickable webRadioGroup element  based on the index value.
'OUTPUT:
'				None
'HISTORY
'NAME:																DATE:													PURPOSE
'Sunil  Kumar													03/18/2013											NEW
'Manjunath    		  										  03/28/2013			Modified error handling for webtable object verification
'Narasinha                                                      07/15/2013				  Updated as per new webtable functionality	
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Varun V							07/08/2014							Modified the logic by replacing "GetRowWithCellText" method by component webTableGetRowPosition and updated the function call webTableGetColumnposition
'Varun V							09/22/2014						Modified to include FireEvent trigger before doing the actual operation.
'#################################################################################################################################	
Sub webTableSetRadioButton(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex)
	'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTableElement Library-->webTableSetRadioButton"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Get the webtable  object based on input parameter : ScreenName_ObjectName
		Set objwebTable=webGetObject(ScreenName_ObjectName)
		'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objwebTable,ScreenName_ObjectName
		'Get the row position of the reference value
		'GetRowWithCellText method will return the value as '-1' if the RowReferenceValueOrPosition doesn't exist in the webtable object
		'GetRowWithCellText will return a value greater than '0' that is RowPosition of the RowReferenceValueOrPosition exist in the table 			
		'##intRowPosition=objwebTable.GetRowWithCellText(ddGetItem(RowReferenceValueOrPosition))
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Call webTableGetRowPosition to get the column position
		intRowPosition=webTableGetRowPosition(objwebTable,ScreenName_ObjectName,strRowValue)
		'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
		'##intColumnPos=webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)		
		intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
		'Clear Error history
		'##Err.Clear
		'Verify for the ReferenceValue existance
		If intRowPosition>0 Then
			'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
			On Error Resume Next
			'Clear Error history
			Err.Clear
			'Retrieving the start point of webRadioGroup in webtable
			intRowCount=objwebTable.RowCount		
			'Iterate through all the rows in the webtable
			For intRowIndex=1 to intRowCount
				'Get the child item count  webRadioGroup for specified RowReferenceValueOrPosition and ColumnName
				intChildItemsCount=objwebTable.ChildItemCount(intRowIndex,intColumnPos,"WebRadioGroup")
				'Verify the webRadioGroup element is exist in the retrieved Row and Column position
				If intChildItemsCount > 0 Then
					'Verify ObjectIndex input parameter
					If ObjectIndex="" Then
						'Assign ObjectIndex as zero if parameter specified as null
						ObjectIndex=0
					End If
					'Set the child object obtained
					Set objChild=objwebTable.ChildItem(intRowIndex,intColumnPos,"WebRadioGroup",ObjectIndex)
					'###########################################################################
							'CODE MODIFICATION
							'09/22/2014			Varun V     Modified to include FireEvent trigger before doing the actuall operation.
							'Check 	g_FireEvent_EventName is Null
							If g_FireEvent_EventName<>"" Then
								'Use the fire event method "onmouseover" to the obtained object
								objChild.FireEvent g_FireEvent_EventName
								'Change the global variable g_FireEvent_EventName to ""
								g_FireEvent_EventName = ""
							End If		
							'END CODE MODIFICATION
					'############################################################################	
					'Perform select operation on webRadioGroup
					objChild.Select "#"&intRowPosition-intRowIndex
					'Exit for loop
					Exit For
				End If
			Next
'Store the generated run time error number and error description in variables.
			errNumber = Err.Number
			errDescription = Err.Description
			'Clear the error.
			Err.Clear
			'Ends the Error Handling Scope.
			On Error GoTo 0
			'Do error handling if the item was not able to be selected.
			'In the below step last condition "GetROProperty("selected item index")" used to ensure webradiogroup element selected .
			'GetROProperty("selected item index") will return the value one short of selected webradiogroup element rowposition.
			If errNumber <>0 Or intChildItemsCount=0 Or intRowPosition-intRowIndex+1<> Cint(objChild.GetROProperty("selected item index")) Then
				'Verify the childobject existance in the table object
				If intChildItemsCount = 0 Then
				   'Report the status as Failed if webRadioGroup element not found
					reporterReportEvent "Failed", strReportStepLabel ,"Expected  webRadioGruop element not found in the webtable: '" & ScreenName_ObjectName&"' under the column name: '" & ColumnNameorPosition&"'"
				   'When tester tried to select the disabled webradiogroup element it won't result any errors , so here using "GetROProperty("selected item index")" to verify element disabled status.
				ElseIf intRowPosition-intRowIndex+1<> Cint(objChild.GetROProperty("selected item index")) Then
					'Report the status as Failed for element
					reporterReportEvent "Failed", strReportStepLabel ,"webRadioGruop element is disabled in the table: '" &ScreenName_ObjectName& "'" &Chr(13) & " for  reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'"
				Else				
					'Report the status as Failed and  error description
					reporterReportEvent "Failed", strReportStepLabel ,"Failed to perform select operation in table: '"&ScreenName_ObjectName& "'" &Chr(13) &" Reason: '"& errDescription&"'"
				End if
			Else
				'Report as passed as there was no error occured  while performing specified operation on  element
				reporterReportEvent "Passed", strReportStepLabel , "webRadioGroup element selected successfully in the table: '" & ScreenName_ObjectName & "'" &Chr(13) & " for  reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition&"'"
			End If
		Else
		  'Report the status as Failed if expected ReferenceValue not found in webtable
		   reporterReportEvent "Failed", strReportStepLabel ,"Expected reference value: '" & strRowInputValue &"' not found in the table: '" & ScreenName_ObjectName&"'"
		End If
End Sub


'####################################################################################################################################
'Name: webTableVerifyAttributeValue
'PURPOSE: To verify the property value for an element that is displayed in a web table cell.
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository.
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position of webtable in which element present.
'			ObjectIndex: Integer that contains the index value of the checkbox element. This is to set the  specified input value  in the checkbox element based on the objectindex .
'			strAttributeName: Name of the property for the object present in web table cell. This can be Image,Link,WebButton,WebList,WebRadioGroup,WebCheckBox,WebElement
'			DDReference: Reference to a value stored in the Data Dictionary

'OUTPUT:
'				None
'HISTORY
'NAME:	                            DATE:							PURPOSE
'Neeraj Gaur		         07/26/2013						NEW
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'##############################################################################################################################
Sub webTableVerifyAttributeValue(ScreenName_ObjectName , RowReferenceValueOrPosition , ColumnNameorPosition , ObjectIndex , strAttributeName , DDReference)
'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTest Library ---> webTableVerifyAttributeValue"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Get the webtable child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,ChildClasses
		strClassnames = "Image,Link,WebButton,WebList,WebRadioGroup,WebCheckBox,WebElement"
		Set objChild = webTableGetObject(ScreenName_ObjectName ,strRowValue,ColumnNameorPosition,ObjectIndex,strClassnames)
		'Clear Error History
		'##Err.Clear
'Get the referance value from data dictionary for the parameter DDReference
		strExpectedValue = ddGetItem(DDReference)
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		Err.Clear
		'Get runtime property value of the object present in a web table cell.
		strRunTimeAttributeValue = objChild.getRoProperty(strAttributeName)
		'Call bellow component to compare the actualvalue and expected value are not equal and assign return value to variable.
		blnValuesEqual=testCompareValues(strRunTimeAttributeValue,strExpectedValue,True)
		'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Error Handling
		If errNumber = 0 then				 'Verify if the runtime value of the property matches with the expected value.
			If blnValuesEqual Then			'Verify the boolean value is true/false
				'Report the status as pass if DDReference value and element default values are equal
				reporterReportEvent "Passed",strReportStepLabel,"Expected DDreference and Runtime value is equal,Expected DDreference value is: '"&strExpectedValue&"' and" &Chr(13) &" Run time value is: '"& strRunTimeAttributeValue&"'"
			Else
				'Report the status as fail if DDReference value and element default values are not equal
				reporterReportEvent "Failed",strReportStepLabel,"Expected DDreference and Runtime value is not equal,Expected DDreference value is: '"&strExpectedValue&"' and" &Chr(13) &" Run time value is: '"& strRunTimeAttributeValue&"'"
			End If
		Else						
				'Report the status as Failed and error description
				 reporterReportEvent "Failed",strReportStepLabel,"Failed to compare the expected and run time value of the property: '"&ScreenName_ObjectName&"'"&Chr(13) &" Reason: '"& errDescription	&"'"
		End If
End Sub







'##################################################################################################################################################
' NAME:  webTableVerifyColumnExists
' PURPOSE:  Verifies the expected column name(s) is displayed in  the webtable
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName - String that contains reference to the webtable object stored in the object repository
'			ExpectedColumnNames -  String that contains column names of webtable in which is to be verified
'														*Note: If more than 1 column name is to be verified then user have to send the column names with semicolon separator's
														'Example For the Input parameter ExpectedColumnNames (Ex:= "LegalEntity;LegalName;RelationShipName")'			
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil Kumar			05/11/2012					NEW
'Narasinha				23/01/2013					Modified to break the function for column exists only.
'Manjunath    		  03/28/2013			   		 Modified error handling for webtable object verification and used UCase and Trim to compare two string values
'Neeraj Gaur			07/30/2013					  Implemented weIsTable function and removed the corresponding statement for exception handling.
'##################################################################################################################################################
Sub webTableVerifyColumnExists(ScreenName_ObjectName,ExpectedColumnNames)
		'Get the web object based on input parameter : ScreenName_ObjectName
		Set objTable=webGetObject(ScreenName_ObjectName)
		'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objTable,ScreenName_ObjectName	
		'Get the column names of the table from application during runtime
		strActualColumnNames=objTable.GetRoProperty("column names")
		'Split the expected column names to an array.
		arrExpectedColumnName=Split(ExpectedColumnNames,";")
		'Initialize the blnColumnExist variable with boolean value 'false'
		blnColumnExist=False
		'Iterate trough each column name in the array
		For Each strColumnName in arrExpectedColumnName		
			'Verify the expected column existance (Column vaerification is a case insensitive comparision)
			If Instr(1,Ucase(Trim(strActualColumnNames)),UCase(Trim(strColumnName)))>0 Then
				'Set the boolean flag to True
				blnColumnExist=True
			Else
				'Set to boolean flag to False
				blnColumnExist=False
				Exit For
			End If
		Next
		'The below code verifies the existance of column name(s) in the webtalbe
		If blnColumnExist Then
			'Report the status as Passed
			reporterReportEvent "Passed","WebTable Test Library  ---> webTableVerifyColumnExists","Column Name(s): " & ExpectedColumnNames & " Exists in table: "&ScreenName_ObjectName
		Else
			'Report the status as failed
			reporterReportEvent "Failed","WebTable Test Library   ---> webTableVerifyColumnExists","Column Name :" & strColumnName & " does not Exist in table: "&ScreenName_ObjectName
		End If    		
End Sub


'##################################################################################################################################################
' NAME:  webTableVerifyColumnNotExists
' PURPOSE:  Verifies the expected column name(s) is not displayed in  the webtable
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName - String that contains reference to the webtable object stored in the object repository
'			ExpectedColumnNames -  String that contains column names of webtable in which is to be verified
'														*Note: If more than 1 column name is to be verified then user have to send the column names with semicolon separator's
														'Example For the Input parameter ExpectedColumnNames (Ex:= "LegalEntity;LegalName;RelationShipName")'			
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					   PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil Kumar			05/11/2012						NEW
'Narasinha				 23/01/2013                    Modified to break the function for column not exists only.
'Manjunath    		   03/28/2013			   		 Modified error handling for webtable object verification and used UCase and Trim to compare two string values
'Neeraj Gaur			07/30/2013					  Implemented weIsTable function and removed the corresponding statement for exception handling.
'##################################################################################################################################################
Sub webTableVerifyColumnNotExists(ScreenName_ObjectName,ExpectedColumnNames)
		'Get the web object based on input parameter : ScreenName_ObjectName
		Set objTable=webGetObject(ScreenName_ObjectName)
		'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objTable,ScreenName_ObjectName	
		'Get the column names of the table from application during runtime
		strActualColumnNames=objTable.GetRoProperty("column names")
		'Split the expected column names to an array.
		arrExpectedColumnName=Split(ExpectedColumnNames,";")
		'Initialize the blnColumnExist variable with boolean value 'false'
		blnColumnExist=False
		'Iterate trough each column name in the array
		For Each strColumnName in arrExpectedColumnName		
			'Verify the expected column existance (Column vaerification is a case insensitive comparision)
			If Instr(1,Ucase(Trim(strActualColumnNames)),UCase(Trim(strColumnName))) = 0 Then
				'Set the boolean flag to True
				blnColumnExist=True
			Else
				'Set the boolean flag to False
				blnColumnExist=False
				Exit For
			End If
		Next	
		'The below code verifies the non existance of column name(s) in the webtalbe
		If blnColumnExist Then
			'Report the status as Passed
			reporterReportEvent "Passed","WebTable Test Library --->webTableVerifyColumnNotExists","Column Name: " & ExpectedColumnNames & " is not Exist  in table: "&ScreenName_ObjectName
		Else
			'Report the status as failed
			reporterReportEvent "Failed","WebTable Test Library --->webTableVerifyColumnNotExists","Column Name: " & strColumnName & " is Exist  in table: "&ScreenName_ObjectName
		End If
End Sub


'###################################################################################################################################################
' NAME:  webTableVerifyElementDisabled
' PURPOSE:  To test the element displayed in webtable corresponding to the 'row Refrence Value' and 'Column Name'  is disabled
' PARAMETERS:
'		INPUT :
'			ScreenName_ObjectName: String that contains reference to the Table object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.												
'			ObjectIndex	:	Integer that contains the index value of the element. This is to get the specified element based on the object index.
'	OUTPUT: None	
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V							05/13/2014				New
'###################################################################################################################################################
Sub  webTableVerifyElementDisabled(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex)
		' PREREQUISITE CODE
			' 1) Declarations
			' ##############################################################		
			  Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTest Library--->webTableVerifyElementDisabled"
			 ' END PREREQUISITE CODE
			' **************************
		 ' BEGIN FUNCTION IMPLEMENTATION
		 ' ###############################################################
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnName,ObjectIndex,ChildClass name
		'ChildClass name will be consist of clickable elements like "WebButton,Link,Image,WebElement,WebCheckBox,WebList,WebEdit"
		Set objChild=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,"WebButton,Link,Image,WebCheckBox,WebList,WebEdit,WebElement")
		''#############################################################################
		''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing		
		'Check if the child object is disabled
		'If objChild.Object.isDisabled Then
		''#############################################################################
		''#############################################################################
		''CODE MODIFICATION
		'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
		''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
		''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.		
		'Check if the child object is disabled
		If objChild.Object.Disabled Then
		''END CODE MODIFICATION
		''#############################################################################		
			'Report the status as Passed  if element disabled
			reporterReportEvent "Passed",strReportStepLabel ,"Element is Disabled in the table object: '" &ScreenName_ObjectName&"' for  reference value: '"& strRowInputValue &_
																													"' and column name/position: '"& ColumnNameorPosition&"'"
		Else				
			'Report the status as Failed  if element is enabled
			reporterReportEvent "Failed",strReportStepLabel ,"Element is Enabled in the table object: '" &ScreenName_ObjectName&"' for  reference value: '"& strRowInputValue &_
																												"' and column name/position: '"& ColumnNameorPosition&"'"
		End if
End Sub


'###################################################################################################################################################
' NAME:  webTableVerifyElementEnabled
' PURPOSE:  To test the element displayed in webtable corresponding to the 'row Refrence Value' and 'Column Name'  is enabled
' PARAMETERS:
'		INPUT :
'			ScreenName_ObjectName	: String that contains reference to the Table object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.							
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.												
'			ObjectIndex	: Integer that contains the index value of the element. This is to get the specified element based on the object index.
'	OUTPUT: None	
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V							05/13/2014				New
'###################################################################################################################################################
Sub  webTableVerifyElementEnabled(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex)
		' PREREQUISITE CODE
			' 1) Declarations
			' ##############################################################		
			  Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
					strReportStepLabel = "WebTest Library--->webTableVerifyElementEnabled"
			 ' END PREREQUISITE CODE
			' **************************
		 ' BEGIN FUNCTION IMPLEMENTATION
		 ' ###############################################################
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnName,ObjectIndex,ChildClass name
		'ChildClass name will be consist of clickable elements like "WebButton,Link,Image,WebElement,WebCheckBox,WebList,WebEdit"
		Set objChild=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,"WebButton,Link,Image,WebCheckBox,WebList,WebEdit,WebElement")
		''#############################################################################
		''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing		
		'Check if the child object is disabled
		'If Not objChild.Object.isDisabled Then
		''#############################################################################
		''#############################################################################
		''CODE MODIFICATION
		'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
		''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
		''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.		
		'Check if the child object is disabled
		If Not objChild.Object.Disabled Then
		''END CODE MODIFICATION
		''#############################################################################			
			'Report the status as Passed  if element enabled
			reporterReportEvent "Passed", strReportStepLabel ,"Element is Enabled in the table object: '" &ScreenName_ObjectName&"' for  reference value: '"& strRowInputValue &_
																												"' and column name/position: '"& ColumnNameorPosition&"'"
		Else				
			'Report the status as Failed  if element is disabled
			reporterReportEvent "Failed", strReportStepLabel ,"Element is Disabled in the table object: '" &ScreenName_ObjectName&"' for  reference value: '"& strRowInputValue &_
																												"' and column name/position: '"& ColumnNameorPosition&"'"
		End if
End Sub


'####################################################################################################################################
'Name: webTableVerifyElementExists
'PURPOSE:  To verify the existence of the element in the specified table cell and [optional] compares the actual default value with the expected supplied value.
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'			ObjectIndex	: Integer that contains the index value of the element. This is to get the specified element based on the object index.
'			optDDReferenceElementDefaultValue	: [optional] Reference to an element value stored in the Data Dictionary
'OUTPUT:
'				None
'HISTORY
'NAME:																						DATE:													PURPOSE
'Manjunath L M																		04/26/2013											 NEW
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'######################################################################################################################################
Sub webTableVerifyElementExists(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,optDDReferenceElementDefaultValue)
'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTest Library ---> webTableVerifyElementExists"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
'##	On Error Resume Next
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
'Get the webtable  child object based on input parameter : ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,ObjectIndex,ChildClass name
	'ChildClass name will be consist of different class object which will be normaly present in table cell(Image,Link,WebButton,WebList,WebRadioGroup,WebCheckBox,WebElement)
	strClassNames="Image,Link,WebButton,WebList,WebRadioGroup,WebCheckBox,WebElement"
	Set objChild=webTableGetObject(ScreenName_ObjectName,strRowValue,ColumnNameorPosition,ObjectIndex,strClassNames)
	'Verify that optional parameter optDDReferenceElementDefaultValue i s having some value to be compared with child Object default value
	If  Trim(optDDReferenceElementDefaultValue) <> "" Then
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Array that contains the object class names
		arrClassNames=Array("image","link;webelement","webedit;weblist;webradiogroup","webcheckbox","webbutton")
		'Array that contains the object properties
		arrPropertyNames=Array("file name","innertext","value","checked","name")
		'Iterate through each item in the array to get the property name and its value
		For intIndexValue=0 to UBound (arrClassNames)
			'Get the property name of the specified object
			'Note g_strObjectType, From the Data Library is a Global String that  contains Class Name of the object (Ex : WebEdit,WebButton etc)
			If Instr(1,arrClassNames(intIndexValue), LCase(objChild.GetRoproperty("micClass")))<>0 Then
				'Get the value from the object
				strDefaultValue=Trim(objChild.GetROProperty(arrPropertyNames(intIndexValue)))
				'Call the below component to test the values are equal
				blnObjChildValuesEqual=testComparevalues(ddGetItem(optDDReferenceElementDefaultValue),strDefaultValue,True)
				'Verify the boolean value is true/false
				If blnObjChildValuesEqual Then			
					'Report the status as pass if ExpectedValue and  value  present in reference cell  are equal
					reporterReportEvent "Passed", strReportStepLabel ,"'"& objChild.GetRoproperty("micClass")&"' element is displayed having the default  value: '"&strDefaultValue&_
						"' in the table object: '" &ScreenName_ObjectName &"' for  reference value: '"& strRowInputValue &"' and column name\position: '"& ColumnNameorPosition&"'"
				Else
				   'Clear the error.
					Err.Clear
					'Ends the Error Handling Scope.
					On Error GoTo 0
					'Report the status as fail iif ExpectedValue and  value  present in reference cell  are not equal
					reporterReportEvent "Failed", strReportStepLabel ,"The displayed '"& objChild.GetRoproperty("micClass")&"' element is not having the default value: '"&ddGetItem(optDDReferenceElementDefaultValue)&"' but it's having value: '"&strDefaultValue&"' in the table object: '" &ScreenName_ObjectName&_
																														" for  reference value: '"& strRowInputValue &"' and column name\position: '"& ColumnNameorPosition&"'"
				End If	
			    Exit For			
			End If
		Next
	  Else
		'Report the status as passed for an element displayed in the cell
		reporterReportEvent "Passed", strReportStepLabel ,"'"& objChild.GetRoproperty("micClass")&"' element is displayed in the table object: '" &ScreenName_ObjectName&_
																												" for  reference value: '"& strRowInputValue &"' and column name\position: '"& ColumnNameorPosition&"'"
	End If	
End Sub





'####################################################################################################################################
'Name: webTableVerifyElementNotExists
'PURPOSE:  To verify the non existence of the element in the specified table cell
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'			CellItem_ScreenName_ObjectName : String that contains Reference to an element value stored in the object repository
'OUTPUT:
'				None
'HISTORY
'NAME:																						DATE:													PURPOSE
'Manjunath L M																	01/17/2014												 NEW
'Lakshman Kumar A.H.     17/03/2014					Removed Error Handling initialization.
'Varun V							07/08/2014							Modified the logic by replacing "GetRowWithCellText" method by component webTableGetRowPosition and updated the function call webTableGetColumnposition
'######################################################################################################################################
Sub webTableVerifyElementNotExists(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,CellItem_ScreenName_ObjectName )
		' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		Dim strwebClass 	         						 ' String that  contains Class Name of the object 		
		Dim arrPropertyName         				   ' Array that contains all the property names  for CellItem
		Dim arrPropertyValue		 					' Array that contains all the property values for CellItem	
		Dim blnClassNameCorrect					   ' Boolean that contains the class name correctness
		Dim arrClassNames								' Array that contains the all the possible class names  which is used for class name correctness
		Dim strRowValue				  ' String that contains the row reference value retrieved from data dictionary
		Dim blnobjChildExactMatchInObjectRepository	' Boolean that contains the exact match of properties and values of child object obtained and values retrieved for CellItem_ScreenName_ObjectName in object repository
		Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTest Library ---> webTableVerifyitemNotExists"
		' 2) Initialize Error Handling
		'##' On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'##' Clear Error
		'##Err.Clear
		' END PREREQUISITE CODE
		' **************************
		' BEGIN FUNCTION IMPLEMENTATION
		' ###############################################################
		' 1) Verify the CellItem_ScreenName_ObjectName is not empty
		If Trim(CellItem_ScreenName_ObjectName)<>"" Then
			' 2) Verify the ScreenName_ObjectName table is not empty
			If Trim(ScreenName_ObjectName)<>"" Then
				' 3) Get all data (Object Type, ProperyName, PropertyValue) stored in the Object Repository which should be exactly matched with obtained table cell item later
				ddGetObjectProperties CellItem_ScreenName_ObjectName
				' 3.a) Get the propertynames and property values to local variables .
				strwebClass=g_strObjectType	
				arrPropertyName=g_arrPropertyNames				
				arrPropertyValue=g_arrPropertyValues    		
				'3.b) Check class name correctness				
				blnClassNameCorrect=False
				arrClassNames=Array("webbutton","link","image","webedit","weblist","webcheckbox","webradiogroup","webitem")
				For intIndexClassNames=0 To Ubound(arrClassNames)
					If arrClassNames(intIndexClassNames)=Lcase(strwebClass) Then
						blnClassNameCorrect=True
					End If          					
				Next
				If Not blnClassNameCorrect Then
						'3.c) Report failed as the supplied class name is not valid						
						reporterReportEvent "Failed", strReportStepLabel ,"The object type: '"& strwebClass &"' which is added in object repository for the CellItem :'" & CellItem_ScreenName_ObjectName &"' is not valid. Please select a valid class name"&_
						"(WebButton, Link, Image, WebEdit, WebList, WebCheckBox, WebRadioGroup, Webitem). Update the same in object repository and execute again"
				End If
				' 4) Get the webtable  object based on input parameter : ScreenName_ObjectName
				Set objwebTable=webGetObject(ScreenName_ObjectName)
				' 5) Verify that supplied object is a "webtable" to perform the operation
				webIsTable objwebTable,ScreenName_ObjectName
				'Check "{" and "}" exists in the RowReferenceValueOrPosition
				If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
					'Get the row value from Data Dictionary
					strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
					'Append the obtained value with "{","}" and siign to a variable strRowValue
					strRowValue = "{"&strRowInputValue&"}"
				Else
					'Get the RowReferenceValueOrPosition value from Data Dictionary
					strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
					'Assign the strRowValue to the variable strRowInputValue
					strRowInputValue = strRowValue
				End If
				' 6.1) Get the row position of the reference value
				' GetRowWithCellText method will return the value as ' -1'  if the RowReferenceValueOrPosition doesn’t' t exist in the webtable object
				' GetRowWithCellText will return a value greater than ' 0'  that is RowPosition of the RowReferenceValueOrPosition exist in the table 				
				'##intRowPosition=objwebTable.GetRowWithCellText(strRowValue)
				'Call webTableGetRowPosition to get the column position
				intRowPosition=webTableGetRowPosition(objwebTable,ScreenName_ObjectName,strRowValue)
				' 7) Verify for the ReferenceValue existence
				If intRowPosition>0 Then
					' 8) Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
					'##intColumnPos=webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)
					intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
					 '9) Get the child item count of  object class  defined in strwebClass for specified RowReferenceValueOrPosition and ColumnName
					intTableCellChildItemsCount=objwebTable.ChildItemCount(intRowPosition,intColumnPos,strwebClass)					               						
					' •RAC_1)	Pass if Table Cell item does not exist in HTML DOM
					' Verify the child object is not exist in the retrieved Row and Column position
					If intTableCellChildItemsCount=0 Then
							reporterReportEvent "Passed", strReportStepLabel ,"The expected table cell item as passed in: '"& CellItem_ScreenName_ObjectName &"'"&_
							"' does not exist in the table: '"& ScreenName_ObjectName &"' for the row reference value: '"& strRowInputValue &"' and column/position: '"&ColumnNameorPosition&"'"
					Else				
							' 9.a) Get the child item of  object class  defined in strwebClass for specified RowReferenceValueOrPosition and ColumnName
							'Assumption : component is designed to handle only one cell item. So, index of child item will always be 0
							' Set the obtained child object
							Set objTableCellChild=objwebTable.ChildItem(intRowPosition,intColumnPos,strwebClass,0)
							' 10) Check for the ProperyName, PropertyValue stored in the Object Repository for Item reference is exactly matching with table cell element values
							For  arrindexPropertyName=0 To Ubound(arrPropertyName)
									' Check the property name is not index
									If Lcase(Trim(arrPropertyName(arrindexPropertyName)))<>"index"  Then
											' Assign False to blnobjChildExactMatchInObjectRepository
											blnobjChildExactMatchInObjectRepository=True											
											' Verify the objChild run time property value is same as the one present in the OR
											If  objTableCellChild.GetRoProperty(arrPropertyName(arrindexPropertyName))<>arrPropertyValue(arrindexPropertyName)Then																									
													blnobjChildExactMatchInObjectRepository=False
													Exit For
											End If
									End If	
							Next
							' 11) If the object obtained and CellItem_ScreenName_ObjectName property names and values equal then check for hidden status
							If blnobjChildExactMatchInObjectRepository Then
									'  Check the hidden status of the object and if true then report pass
									If webIsElementHidden(objTableCellChild) Then
											' •RAC_2)	Pass if Table Cell item does exist but is hidden
											reporterReportEvent "Passed", strReportStepLabel ,"The expected table cell item as passed in: '"& CellItem_ScreenName_ObjectName &"'"&_
											"' does exist but hidden in the table: '"& ScreenName_ObjectName &"' for the row reference value: '"& strRowInputValue &"' and column/position: '"&ColumnNameorPosition&"'"
									Else								
											' •RAC_3)	Fail if Table Cell item does exist in HTML DOM and is visible
											reporterReportEvent "Failed", strReportStepLabel ,"The expected table cell item as passed in: '"& CellItem_ScreenName_ObjectName &"'"&_
											"' does exist and is visible in the table: '"& ScreenName_ObjectName &"' for the row reference value: '"& strRowInputValue &"' and column/position: '"&ColumnNameorPosition&"'"
									End If
							Else
									' •RAC_1)	Pass if Table Cell item does not exist in HTML DOM
									'  Report pass as the object obtained and CellItem_ScreenName_ObjectName property names and values equal
									 reporterReportEvent "Passed", strReportStepLabel ,"The expected table cell item as passed in: '"& CellItem_ScreenName_ObjectName &"'"&_
									"' does not exist in the table: '"& ScreenName_ObjectName &"' for the row reference value: '"& strRowInputValue &"' and column/position: '"&ColumnNameorPosition&"'"
									'Report Warning for other element existance
									reporterReportEvent "Warning", strReportStepLabel ,"The expected table cell item as passed in: '"& CellItem_ScreenName_ObjectName &"'"&_
									"' is not same as the one that's present in the table: '"& ScreenName_ObjectName &"' for the row reference value: '"& strRowInputValue &"' and column/position: '"&ColumnNameorPosition&"'"
							End If
					End If         					
				Else
					' 7) Report the status as Failed if expected ReferenceValue not found in webtable
					reporterReportEvent "Failed", strReportStepLabel ,"Expected reference value: '" & strRowInputValue &"' not found in the table: '" &_
					ScreenName_ObjectName &"'. Please pass proper row reference value from table on which you need to verify the expected cell item"
				End If
			Else
				' 2)  Report the status as fail if ScreenName_ObjectName is empty
				reporterReportEvent "Failed", strReportStepLabel ,"An empty 'ScreenName_ObjectName' is passed to the component. ScreenName_ObjectName value is "&_
				"required. Please enter a valid ScreenName_ObjectName value and execute again"
			End If
		Else
			' 1) Report the status as fail if CellItem_ScreenName_ObjectName is empty
			reporterReportEvent "Failed", strReportStepLabel ,"An empty  'CellItem_ScreenName_ObjectName' is passed to the component. As this value is mandatory"&_
			" parameter. Please enter the valid value for the CellItem_ScreenName_ObjectName(item need to be verified in table cell) as stored in object repository and execute the script again."			
		End If
End Sub





'######################################################################################################################
' NAME:  webTableVerifyMultipleValues
' PURPOSE:  Verify the table cell value obtained is equal to the input values or with in the range of input values.
' PARAMETERS:
'		INPUT	:
'				ScreenName_ObjectName		  : 	String that contains reference to the webtable object stored in the object repository
'				ColumnNameorPosition			:String or integer that contains the Column Name / position of webtable in which required values are present
'				ValuesorValueRangeToVerify	  :Values or Value range which user wants to verify with the table cell value.
'																				Note:1)If user wants to verify that the table cell element with in a particular range of input value,
'																					then ValuesorValueRangeToVerify value should be separated by delimiter "-".Example-"10/15/2014-10/30/2014"
'																				2)If user wants to verify that the table cell element value is equal to one of the input values,
'																					then ValuesorValueRangeToVerify value should be separated by delimiter ";".Example-"Pending approval;Accepted;Paid No Issue"
'				optPagination_ObjectName			:[Optional]String that contains reference to the pagination object stored in the object repository.If user passes null value,verification will happen only in first page.
'				optPaginationToFirst_Last_ElementName:[Optional]String that contains the "PaginationToFirst" and "PaginationToLast" element text\name separated by a delimiter ";"
'																					Example-"<<;>>".*Mandatory if user passes optPagination_ObjectName
'				optPageorPageRangeToTraverse	:[Optional]String contains the Pagenumber or Range to traverse.Should be separated by delimiter "-"
'																	Example-"10-15".If user passes null,verification will be happen through out the pages
'	   OUTPUT : None
'HISTORY
'NAME:				DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V			10/14/2014						NEW
'######################################################################################################################
Sub webTableVerifyMultipleValues(ScreenName_ObjectName,ColumnNameorPosition,ValuesorValueRangeToVerify,optPagination_ObjectName,optPaginationToFirst_Last_ElementName,optPageorPageRangeToTraverse)
' PREREQUISITE CODE
	' 1) Declarations
	' ##############################################################
		Dim objwebTable								'(Object)WebTable Object
		Dim objPagination			  				 '(Object)Pagination Child object
		Dim objPaginationParent					 '(Object)Pagination parent object
		Dim strActionTOPerform	 			   '(String) Actions to perform.Range or Values equal
		Dim strStartValue							  '(String)Range start value
		Dim strEndValue							 	'(String)Range end value
		Dim arrValue					 			   '(Array)Input values which will compared with the table cell value
		Dim strTableToVerify					  '(String)Search criteria.Search through full page or partial
		Dim arrFirstLastPageNames 			'(Array)Firstamd last page names
		Dim arrPageRange						  '(Array)Page range
		Dim intStartPage							'(Integer)Start page number
		Dim intEndPage								'(Integer)End page number
		Dim intFirstPageChildObjectCount   '(Integer)First page child object count
		Dim strReportStepLabel  	 			'(String)Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			'Assign values to the variable
			strReportStepLabel = "Web Test Library --> webTableVerifyMultipleValues"
			intVerificationStartPage = 1
			intMaxpageNumber = 1
			blnRowFound = False
			intRowInitialValue = 2
			intArraycount = 0
			blnFirstPageChildObjectExist = False
			blnLastPageChildObjectExist = False
	 ' END PREREQUISITE CODE
	 ' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
		'##############################################################
		'Check the input parameter ValuesorValueRangeToVerify value and decide what operation needs to perform
		   If ValuesorValueRangeToVerify <>"" Then
			   'Check ValuesorValueRangeToVerify is separated by a delimiter "-" not ";"
				If (Instr(1,ValuesorValueRangeToVerify,"-")<>0 and Not Instr(1,ValuesorValueRangeToVerify,";")<>0) Then
					'Assign "Range" to a variable strActionTOPerform
				   strActionTOPerform = "Range"
				   'Use split method and add the value to a arrary arrValue
				   arrValue = Split(ValuesorValueRangeToVerify,"-")
				   	'Check the limit of the array arrValue
				    If UBound(arrValue)>1 Then
						'Report fail if array arrValue contains more than 2
					   reporterReportEvent "Failed",strReportStepLabel,"Input parameter value: '"&ValuesorValueRangeToVerify&"' contains more than 2 values."&_
																		"Range should have only one upper and one lower limit"
				    End If
				   'Get the first arrary value and assign to a variable strStartValue
					strStartValue = Trim(ddGetItem(Trim(arrValue(0))))
					'Get the first arrary value and assign to a variable strEndValue
					strEndValue = Trim(ddGetItem(Trim(arrValue(1))))
				'Check ValuesorValueRangeToVerify is separated by a delimiter ";" not "-"
				ElseIf (Instr(1,ValuesorValueRangeToVerify,";")<>0 and Not Instr(1,ValuesorValueRangeToVerify,"-")<>0) Then
					'Assign "ValueEqual" to a variable strActionTOPerform
					strActionTOPerform = "ValueEqual"
					'Use split method and add the value to a arrary arrValue
					arrValue= Split(ValuesorValueRangeToVerify,";")
					'Open a for loop and get the value from data dictionary for the input values
					For Each strInputValue in arrValue
						'Get the value form data dictionary and assign back to the array
						arrValue(intArraycount)=ddGetItem(Trim(strInputValue))
						'Increment the counter
						intArraycount = intArraycount+1
					Next
				Else
					'Report fail if invalid value passed to the parameter ValuesorValueRangeToVerify
					reporterReportEvent	"Failed",strReportStepLabel,"Invalid value :'"&ValuesorValueRangeToVerify&"' passed to the parameter.Please pass either '-' or ';' as a delimiter"
				End If
			Else
				'Report fail if blank value passed to the the parameter ValuesorValueRangeToVerify
				reporterReportEvent "Failed",strReportStepLabel,"An empty value passed to the parameter 'ValuesorValueRangeToVerify'.Please provide a valid value"
		   End If
		'#####################################################################
		'Check the input parameter optPagination_ObjectName, optPageorPageRangeToTraverse values and decide pagination
		   'Check if optPagination_ObjectName,optPageorPageRangeToTraverse and optPaginationToFirst_Last_ElementName is empty
		   If optPagination_ObjectName = "" and optPageorPageRangeToTraverse = "" and optPaginationToFirst_Last_ElementName = "" Then
			   'Assign null to the variable strTableToVerify
			   strTableToVerify = "FIRSTPAGE"
			'Check if optPagination_ObjectName,optPageorPageRangeToTraverse not equal to null and optPaginationToFirst_Last_ElementName is empty
			ElseIf optPagination_ObjectName <> "" and optPaginationToFirst_Last_ElementName <> "" and optPageorPageRangeToTraverse = "" Then
				'Assign ALL to the variable strTableToVerify
				strTableToVerify = "ALL"
			'Check if optPagination_ObjectName,optPageorPageRangeToTraverse and optPaginationToFirst_Last_ElementName not equal to null
			ElseIf optPagination_ObjectName <> "" and optPaginationToFirst_Last_ElementName <> "" and optPageorPageRangeToTraverse <> "" Then
				'Assign PARTIAL to the variable strTableToVerify
				strTableToVerify = "PARTIAL"
				'Split the input variable optPageorPageRangeToTraverse and assign to a array arrPageRange
				arrPageRange = Split(optPageorPageRangeToTraverse,"-")
				'Check the limit of the array arrValue
				If (Not UBound(arrPageRange)=1) Then
					'Report fail if array ubound not eqaul to 1
					reporterReportEvent	"Failed",strReportStepLabel,"Invalid value :'"&optPageorPageRangeToTraverse&"' passed to the parameter optPageorPageRangeToTraverse."&_
																									"Range should have one upper limit and one lower limit."
				'Check the input values are numeric
				ElseIf (Not (IsNumeric(arrPageRange(0)))) or (Not(IsNumeric(arrPageRange(1)))) Then
					'Report fail if the input values are non numeric
					reporterReportEvent	"Failed",strReportStepLabel,"Invalid value :'"&optPageorPageRangeToTraverse&"' passed to the parameter optPageorPageRangeToTraverse."&_
																									"Please provide valid values."
				End If
				'Assign the first value to the variable intStartPage
				intStartPage = Cint(arrPageRange(0))
				'Assign the first value to the variable intEndPage
				intEndPage = Cint(arrPageRange(1))
			Else
				'Report fail if invalid value passed to the pagination parameters
				reporterReportEvent	"Failed",strReportStepLabel,"Invalid combination of value passed to the parameters optPagination_ObjectName,optPageorPageRangeToTraverse and "&_
																								"optPaginationToFirst_Last_ElementName.Please provide valid values and rerun the script"
		    End If
		'#####################################################################
		'Get the webtable  object based on input parameter : ScreenName_ObjectName
		Set objwebTable=webGetObjectHierarchy(ScreenName_ObjectName)
		'Check the table object exists in the web page	
		If Not objwebTable.Exist(3) Then
			'Report fail if the table object doen't exist in the web page
			reporterReportEvent	"Failed",strReportStepLabel,"WebTable object :'"&ScreenName_ObjectName&"' doesn't exists in the application."&_
																		"Please check the property and re-run the script again"
		End If
		'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objwebTable,ScreenName_ObjectName
		 'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
		intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
		'Check the input parameter ColumnNameorPosition is numeric or not
		If IsNumeric(ColumnNameorPosition) Then
			'Assign 1 to the variable intRowInitialValue
			intRowInitialValue = 1
		End If
		'Check the variable strTableToVerify value not equal to empty
		If strTableToVerify <> "FIRSTPAGE" Then
				'Split the values and assign to a array arrFirstLastPageNames
				arrFirstLastPageNames = Split(optPaginationToFirst_Last_ElementName,";")
				'Check array UBound is equal to 1
				If Not (UBound(arrFirstLastPageNames) = 1) Then
					'Report fail if array ubound not eqaul to 1
					reporterReportEvent	"Failed",strReportStepLabel,"Invalid value :'"&optPaginationToFirst_Last_ElementName&"' passed to the parameter optPageorPageRangeToTraverse."&_
																									"Range should have one upper limit and one lower limit."
				End If
				'Get the pagination parent object and assign to the variable objPaginationParent
				Set objPaginationParent = webGetObjectHierarchy(optPagination_ObjectName)
				'Check the existance of the objPaginationParent in the webpage
				If objPaginationParent.Exist(3) Then
					'Get the pagination child objects and assign to objPaginationChild
					Set objPaginationChild = objPaginationParent.ChildObjects()
					'Open a for loop and iterate through all the child objects
					For intPageChildObjectCount=0 to objPaginationChild.Count-1
						'Check the text value of the child object equals to the arrFirstLastPageNames first value
						If objPaginationChild(intPageChildObjectCount).GetROProperty("text") = arrFirstLastPageNames(0) Then
							'Assign the child count to a variable intFirstPageChildObjectCount
							intFirstPageChildObjectCount = intPageChildObjectCount
							'Assign boolean true to variable blnFirstPageChildObjectExist
							blnFirstPageChildObjectExist = True
						'Check the text value of the child object equals to the arrFirstLastPageNames first value
						ElseIf	objPaginationChild(intPageChildObjectCount).GetROProperty("text") = arrFirstLastPageNames(1) Then
							'Assign boolean true to variable blnLastPageChildObjectExist
							blnLastPageChildObjectExist = True
							'Click on the child object
							objPaginationChild(intPageChildObjectCount).Click
							'Exit the for loop
							Exit For
						End If
					Next
					If Not (blnFirstPageChildObjectExist and blnLastPageChildObjectExist) Then
						'Report fail if the optPaginationToFirst_Last_ElementName value is invalid
						reporterReportEvent	"Failed",strReportStepLabel,"Invalid 'PaginationToFirst' and 'PaginationToLast' element text\name :'"&optPaginationToFirst_Last_ElementName&"' passed to the parameter optPaginationToFirst_Last_ElementName."&_
																		"Please provide valid element text\name and rerun the script."
					End If
					'Call webWaitUntilElementToLoad which will wait until the element loads completly
					webWaitUntilElementToLoad(ScreenName_ObjectName)
					'Set the variable objPaginationChild to nothing
					Set objPaginationChild = Nothing
					'On Error Resume Next
					On Error Resume Next
					'Refresh the parent child object
					objPaginationParent.RefreshObject
					'Get the err number and descrition and end the scope of on error resume next
					errNumber = err.Number
					errDesc = err.Description
					On Error GoTo 0
					If errNumber <> 0 Then
						'Report fail if the optPaginationToFirst_Last_ElementName value is invalid
						reporterReportEvent	"Failed",strReportStepLabel,"Failed to get the Pagonation Child Objects for the supplied optPagination_ObjectName '"&optPagination_ObjectName&" due to reason: '"&errDesc&_
											"'. Please recheck the supplied optPagination_ObjectName and re-run the script."
					Else
						'Get the pagination child objects and assign to objPaginationChild
						Set objPaginationChild = objPaginationParent.ChildObjects()
						'Open a for loop and iterate through all the child objects
						For intPageChildObjectCount = objPaginationChild.Count To 1 Step-1
								'Check the text property value of the child object is numeric
								If IsNumeric(objPaginationChild(intPageChildObjectCount-1).GetROProperty("Text")) Then
									'Assign the value to a variable intMaxpageNumber
									intMaxpageNumber = objPaginationChild(intPageChildObjectCount-1).GetROProperty("Text")
									Exit For
								End If
						Next
						'Click on the first pagination child object
						objPaginationChild(intFirstPageChildObjectCount).Click
					End If
						'Call webWaitUntilElementToLoad which will wait until the element loads completly
					webWaitUntilElementToLoad(ScreenName_ObjectName)
					'Set the variable objPaginationChild to nothing
					Set objPaginationChild = Nothing
					'Check the variable strTableToVerify value equal to "PARTIAL"
					If strTableToVerify="PARTIAL" Then
						'Check the intStartPage,intEndPage value is lesser than intMaxpageNumber
						If intStartPage<= Cint(intMaxpageNumber) and intEndPage<= Cint(intMaxpageNumber )Then
							'Open a for loop and iterate through pages
							For intPageNumber = 2 to intStartPage
								'Create a decription of page object
								Set objPaginationLink = Description.Create
								objPaginationLink("micclass").Value = "Link"
								objPaginationLink("text").Value = Cstr(intPageNumber)
								'On Error Resume Next
								On Error Resume Next
								objPaginationParent.RefreshObject
								'Get the err number and descrition and end the scope of on error resume next
								errNumber = err.Number
								errDesc = err.Description
								On Error GoTo 0
								If errNumber = 0 Then
									Set objPagination = objPaginationParent.ChildObjects(objPaginationLink)
									'Click on the page object
									objPagination(0).Click
								Else
									'Report fail if the optPaginationToFirst_Last_ElementName value is invalid
									reporterReportEvent	"Failed",strReportStepLabel,"Failed to get the Pagonation Child Objects for the supplied optPagination_ObjectName '"&optPagination_ObjectName&" due to reason: '"&errDesc&_
											"'. Please recheck the supplied optPagination_ObjectName and re-run the script."
								End If
								'Call webWaitUntilElementToLoad which will wait until the element loads completly
								webWaitUntilElementToLoad(ScreenName_ObjectName)
								'Set the variable objPaginationChild to nothing
								Set objPagination = Nothing
							Next
							'Asign intStartPage value to a variable intVerificationStartPage
							intVerificationStartPage = intStartPage
							'Asign intEndPage value to a variable intMaxpageNumber
							intMaxpageNumber = intEndPage
						Else
							'Report fail if the page numbers provides by the user is greater than availble pages
							reporterReportEvent "Failed",strReportStepLabel,"Page range values :'"&optPageorPageRangeToTraverse&"' are greater than the available pages :'"&Cint(intMaxpageNumber )&"' .Please provide a valid range"
						End If
					End If
				End If
		End If		
		'########################################################################
		'Verification of table cell value and input value
		'Open a for loop and iterate through  the required pages
		For intTableCounter = intVerificationStartPage to Cint(intMaxpageNumber)
				'Refresh the webTable object
				objwebTable.RefreshObject
				'Get the total row count and assign to avariable intRowCount
				intRowCount = objwebTable.RowCount
				'Open a for loop and iterate through all the rows
				For intRowPositionIndex = intRowInitialValue To intRowCount
					'Make the boolean variable blnRowFound to false
					blnRowFound = False
					'Get the cell value and assign to a variable strCellValue
					strCellValue = Trim(objwebTable.GetCellData(intRowPositionIndex ,intColumnPos))
					'Chek the strCellValue is equal to ERROR: The specified cell does not exist.
					If LCASE(strCellValue) = LCASE("ERROR: The specified cell does not exist.") Then
						Exit For
					End If
					'Chek the strCellValue has any pagination textname.
					If (blnFirstPageChildObjectExist and blnLastPageChildObjectExist) Then
						If Instr(1,strCellValue,arrFirstLastPageNames(0))<>0 and Instr(1,strCellValue,arrFirstLastPageNames(1))<>0 Then
							Exit For
						End If
					End If
					'Check the variable strActionTOPerform is equal to "Range" value
					If strActionTOPerform = "Range" Then
							'Check strCellValue is greater than strStartValue and lesser than strEndValue
							If strStartValue <= Trim(strCellValue) and strEndValue >=Trim(strCellValue) Then
								'Report done if the strCellValue is greater than strStartValue and lesser than strEndValue
								reporterReportEvent "Done",strReportStepLabel,"Table Cell value :'"&strCellValue&"' is with in the range of input values :'"&strStartValue&"' and :'"&strEndValue&"'."
							Else
								''Report fail if the strCellValue is not greater than strStartValue and not lesser than strEndValue
								reporterReportEvent "Failed",strReportStepLabel,"Table Cell value :'"&strCellValue&"' located at the rowposition :'"&intRowPositionIndex&_
																		"' having page number:'"&intTableCounter&"' is not available in the range of input values :'"&strStartValue&"' and :'"&strEndValue&"'."
							End If
					'Check the variable strActionTOPerform is equal to "ValueEqual" value
					ElseIf strActionTOPerform = "ValueEqual" Then
						'Open a for loop and iterate through all the array values
						For Each strInputValue In arrValue
							'Check if the strCellValue and rowValue are equal
							If Trim(strCellValue) = Trim(strInputValue) Then
								'Report done if strCellValue and rowValue are equal
								reporterReportEvent "Done",strReportStepLabel,"Table Cell Value :'"&strCellValue&"' and input value :'"&strInputValue&"' are equal"
								'Make the boolean variable blnRowFound to True
								blnRowFound = True
								Exit For
							End If
						Next
						'Check the boolean variable blnRowFound not equal to true
						If Not blnRowFound Then
							'Report fail if the strCellValue and rowValue are not equal
							reporterReportEvent "Failed",strReportStepLabel,"Table Cell value :'"&strCellValue&"' located at the rowposition :'"&intRowPositionIndex&_
																		"' having page number:'"&intTableCounter&"' is not equal to the input values passed by the user."
						End If
					End If
				Next
				'Check intTableCounter and intMaxpageNumber are not equal
				If Not intTableCounter = Cint(intMaxpageNumber) Then
					'Create a decription of page object
					Set objPaginationLink = Description.Create
					objPaginationLink("micclass").Value = "Link"
					objPaginationLink("text").Value = Cstr(intTableCounter+1)
					'On Error Resume Next
					On Error Resume Next
					objPaginationParent.RefreshObject
					'Get the err number and descrition and end the scope of on error resume next
					errNumber = err.Number
					errDesc = err.Description
					On Error GoTo 0
					If errNumber = 0 Then
						Set objPagination = objPaginationParent.ChildObjects(objPaginationLink)
						'Click on the pagination child object
						objPagination(0).Click
					Else
						'Report fail if the optPaginationToFirst_Last_ElementName value is invalid
						reporterReportEvent	"Failed",strReportStepLabel,"Failed to get the Pagonation Child Objects for the supplied optPagination_ObjectName '"&optPagination_ObjectName&" due to reason: '"&errDesc&_
											"'. Please recheck the supplied optPagination_ObjectName and re-run the script."
					End If
					'Call webWaitUntilElementToLoad which will wait until the element loads completly
					webWaitUntilElementToLoad(ScreenName_ObjectName)
					'Set the variable objPaginationChild to nothing
					Set objPagination = Nothing
					'Refresh the webTable object
					objwebTable.RefreshObject			
				End If
		Next
End Sub


'#############################################################################################################################
' NAME:  webTableVerifyRadioButtonDisabled
' PURPOSE:  Check the radio button present inside a webtable is Disabled.
' PARAMETERS:
'		  INPUT     :
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required radiobutton present in the webtable or Row Position where the radibutton is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'			RadioGroupName: Name of the web Radio Group.		
'	  	OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					05/27/2014								New
'Varun V							07/08/2014							Modified the logic by replacing "GetRowWithCellText" method by component webTableGetRowPosition and updated the function call webTableGetColumnposition
'Varun V						09/17/2014 					Removed webSetFrame logic as it is taken care in webSetPage
'#############################################################################################################################
Sub webTableVerifyRadioButtonDisabled(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,RadioGroupName)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim strRadioGroupName 	         						 ' string variable that  contains the name of the radio group
		  Dim intRadioButtonIndex						   			   'Integer variable that contains the index of radio button
		  Dim intRowPosition												'Integer variable contains the row position
		  Dim intColumnPos													'Integer variable contains the column position
		  Dim intRowIndex													'Integer variable contains the row index
		  Dim intRowCount													'Integer variable contains total number of rows
		  Dim blnFrameExist													 'Boolean variable contains status of frame existance
		  Dim blnElementFound											  'Boolean variable contains the status of radio group existance
		  Dim blnRadioButtonExist										 'Boolean variable contains the status of radio button existance
		  Dim strRowValue													'String variable contains the row reference value
Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Web Test Library --> webTableVerifyRadioButtonDisabled"
		  blnElementFound = False
		  blnFrameExist = False
		  blnRadioButtonExist = True
	' END PREREQUISITE CODE
	' **************************
	' BEGIN FUNCTION IMPLEMENTATION
	' ###############################################################
		'Get the webtable  object based on input parameter : ScreenName_ObjectName
		Set objwebTable=webGetObject(ScreenName_ObjectName)
		'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objwebTable,ScreenName_ObjectName
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'##Get the row position of the reference value and assign to a variable intRowPosition
		'##intRowPosition=objwebTable.GetRowWithCellText(strRowValue)
'Call webTableGetRowPosition to get the column position
		intRowPosition=webTableGetRowPosition(objwebTable,ScreenName_ObjectName,strRowValue)
		'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
		'##intColumnPos=webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)		
		intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)		
		'Verify for the ReferenceValue existance
		If intRowPosition>0 Then
			'Retrieving the start point of webRadioGroup in webtable.Get the total row count and assign to a variable intRowCount
			intRowCount=objwebTable.RowCount		
			'Iterate through all the rows in the webtable
			For intRowIndex=1 to intRowCount
				'Get the child item count  webRadioGroup for specified RowReferenceValueOrPosition and ColumnName
				intChildItemsCount=objwebTable.ChildItemCount(intRowIndex,intColumnPos,"WebRadioGroup")
				'Verify the webRadioGroup element is exist in the retrieved Row and Column position
				If intChildItemsCount > 0 Then
					'Subtract the Row index value from Row position and assign to a variable intRadioButtonIndex
intRadioButtonIndex = intRowPosition-intRowIndex
					'Make the boolean variable blnElementFound as True
					blnElementFound = True
					Exit For
End If					
			Next
		Else
			'Report the status as Failed if expected ReferenceValue not found in webtable
		   reporterReportEvent "Failed", strReportStepLabel ,"Expected reference value: '" &strRowInputValue&"' not found in the table: " & ScreenName_ObjectName&"'"
End If
		If  blnElementFound Then
			'Get the radioGroup name and assign to a variable strRadioGroupName
			strRadioGroupName = ddGetItem(RadioGroupName)
			'Assign the radiogroup object to the variable objRadioGroup by using getElementsByName method if the radio group is inside a page
		   Set objRadioGroup = g_objBrowserPage.Object.getElementsByName(strRadioGroupName)
		    'Check the number of radio button inside the group in page level
		 	If objRadioGroup.Length < 1 Then
			'########################################
			'CODE MODIFCATION	
			'09/17/2014 Varun V		Removed webSetFrame logic as it is taken care in webSetPage
				'##Call webSetFrame and assign to a variable blnFrame blnFrameExist
				'##blnFrameExist=webSetFrame
				'##Check if frame exist or not
				'##If blnFrameExist Then
					'##Assign the radiogroup object to the variable objRadioGroup by using getElementsByName method if the radio group is inside a frame
'##Set objRadioGroup = g_objBrowserFrame.Object.getElementsByName(strRadioGroupName)
					'##Check the number of radio button inside the group which is located in frame
					'##If objRadioGroup.Length<1 Then blnRadioButtonExist = False
'##End If
				'##Check the status of frame and button existance
				'##If Not (blnFrameExist AND blnRadioButtonExist) Then
					'Report fail if the radio group is not available in  page level
					reporterReportEvent "Failed", strReportStepLabel ,"Radio group having name: '"&strRadioGroupName& "' doesn't exist in the application."
				'##End If
			'END CODE MODIFICATION
			'#########################################################
End If
			''Check the radio button in radio group is disabled
			If objRadioGroup(Cint(intRadioButtonIndex)).Disabled Then
				'Report the status as passed if the radio button is Disabled
				reporterReportEvent "Passed", strReportStepLabel ,"Radio button inside the radio group: '"&strRadioGroupName& "' having row reference value: '"&strRowInputValue&"' is Disabled "
			Else
				'Report the status as failed if the radio button is Enabled
				reporterReportEvent "Failed", strReportStepLabel , "Radio button inside the radio group: '"&strRadioGroupName& "' having row reference value: '"&strRowInputValue&"' is Enabled "	
			End If
		Else
			'Report the status as failed if the radio button doesn't exist in the ColumnNameorPosition
			reporterReportEvent "Failed", strReportStepLabel , "Radio button doesn't exist in the ColumnNameorPosition: '"&ColumnNameorPosition&"'."
		End If
End Sub


'#############################################################################################################################
' NAME:  webTableVerifyRadioButtonEnabled
' PURPOSE:  Check the radio button present inside a webtable is Enabled.
' PARAMETERS:
'		  INPUT     :
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required radio button present in the webtable or Row Position where the radio button is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.
'			RadioGroupName: Name of the web Radio Group.		
'	  	OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V						05/27/2014							New
'Varun V							07/08/2014							Modified the logic by replacing "GetRowWithCellText" method by component webTableGetRowPosition and updated the function call webTableGetColumnposition
'Varun V						09/17/2014 					Removed webSetFrame logic as it is taken care in webSetPage
'#############################################################################################################################
Sub webTableVerifyRadioButtonEnabled(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,RadioGroupName)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim strRadioGroupName 	         						 ' string variable that  contains the name of the radio group
		  Dim intRadioButtonIndex						   			    'Integer variable that contains the index of radio button
		  Dim intRowPosition												'Integer variable contains the row position
		  Dim intColumnPos													'Integer variable contains the column position
		  Dim intRowIndex													'Integer variable contains the row index
		  Dim intRowCount													'Integer variable contains total number of rows
		  Dim blnFrameExist													 'Boolean variable contains status of frame existance
		  Dim blnElementFound											  'Boolean variable contains the status of radio group existance
		  Dim blnRadioButtonExist										 'Boolean variable contains the status of radio button existance
		  Dim strRowValue													'String variable contains the row reference value
Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "Web Test Library --> webTableVerifyRadioButtonEnabled"
		  blnElementFound = False
		  blnFrameExist = False
		  blnRadioButtonExist = True
	' END PREREQUISITE CODE
	' **************************
	' BEGIN FUNCTION IMPLEMENTATION
	' ###############################################################
		'Get the webtable  object based on input parameter : ScreenName_ObjectName
		Set objwebTable=webGetObject(ScreenName_ObjectName)
		'Verify that supplied object is a "webtable" to perform the operation
		webIsTable objwebTable,ScreenName_ObjectName
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'##Get the row position of the reference value and assign to a variable intRowPosition
		'##intRowPosition=objwebTable.GetRowWithCellText(strRowValue)
'Call webTableGetRowPosition to get the column position
		intRowPosition=webTableGetRowPosition(objwebTable,ScreenName_ObjectName,strRowValue)
		'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
		'##intColumnPos=webTableGetColumnposition(ScreenName_ObjectName,ColumnNameorPosition)
		intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)		
		'Verify for the ReferenceValue existance
		If intRowPosition>0 Then	
			'Retrieving the start point of webRadioGroup in webtable.Get the total row count and assign to a variable intRowCount
			intRowCount=objwebTable.RowCount		
			'Iterate through all the rows in the webtable
			For intRowIndex=1 to intRowCount
				'Get the child item count  webRadioGroup for specified RowReferenceValueOrPosition and ColumnName
				intChildItemsCount=objwebTable.ChildItemCount(intRowIndex,intColumnPos,"WebRadioGroup")
				'Verify the webRadioGroup element is exist in the retrieved Row and Column position
				If intChildItemsCount > 0 Then
					'Subtract the Row index value from Row position and assign to a variable intRadioButtonIndex
intRadioButtonIndex = intRowPosition-intRowIndex
					'Make the boolean variable blnElementFound as True
					blnElementFound = True
					Exit For
End If					
			Next
		Else
			'Report the status as Failed if expected ReferenceValue not found in webtable
		   reporterReportEvent "Failed", strReportStepLabel ,"Expected reference value: '" &strRowInputValue&"' not found in the table: '" & ScreenName_ObjectName&"'"
End If
		If  blnElementFound Then
			'Get the radioGroup name and assign to a variable strRadioGroupName
			strRadioGroupName = ddGetItem(RadioGroupName)
			'Assign the radiogroup object to the variable objRadioGroup by using getElementsByName method if the radio group is inside a page
		   Set objRadioGroup = g_objBrowserPage.Object.getElementsByName(strRadioGroupName)
		   'Check the number of radio button inside the group in page level
			If objRadioGroup.Length < 1 Then
			'#######################################################
			'CODE MODIFCATION	
			'09/17/2014 Varun V		Removed webSetFrame logic as it is taken care in webSetPage
				'##Call webSetFrame and assign to a variable blnFrame blnFrameExist
				'##blnFrameExist=webSetFrame
				'##Check if frame exist or not
				'##If blnFrameExist Then
					'##Assign the radiogroup object to the variable objRadioGroup by using getElementsByName method if the radio group is inside a frame
'##Set objRadioGroup = g_objBrowserFrame.Object.getElementsByName(strRadioGroupName)
					'##Check the number of radio button inside the group which is located in frame
					'##If objRadioGroup.Length<1 Then blnRadioButtonExist = False
'##End If
				'##Check the status of frame and button existance
				'##If Not (blnFrameExist AND blnRadioButtonExist) Then
					'##Report fail if the radio group is not available in  page level
					reporterReportEvent "Failed", strReportStepLabel ,"Radio group having name: '"&strRadioGroupName& "' doesn't exist in the application."
				'##End If
			'END CODE MODIFICATION
			'#########################################################
End If
			''Check the radio button in radio group is disabled
			If Not objRadioGroup(Cint(intRadioButtonIndex)).Disabled Then
				'Report the status as passed if the radio button is Enabled
				reporterReportEvent "Passed", strReportStepLabel ,"Radio button inside the radio group: '"&strRadioGroupName& "' having row reference value: '"&strRowInputValue&"' is Enabled "
			Else
				'Report the status as failed if the radio button is Disabled
				reporterReportEvent "Failed", strReportStepLabel , "Radio button inside the radio group: '"&strRadioGroupName& "' having row reference value: '"&strRowInputValue&"' is Disabled "	
			End If
		Else
			'Report the status as failed if the radio button doesn't exist in the ColumnNameorPosition
			reporterReportEvent "Failed", strReportStepLabel , "Radio button doesn't exist in the ColumnNameorPosition: '"&ColumnNameorPosition&"'."
		End If
End Sub


'###################################################################################################################################################
' NAME:  webTableVerifyValuesEqual
' PURPOSE:  To test the actual value is displayed in webtable corresponding to the 'row Refrence Value' and 'Column Name'  and expected value from data dictionary are equal
' PARAMETERS:
'		INPUT :
'			ScreenName_ObjectName: String that contains reference to the Table object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.												
'			DDReference: Reference to a value stored in the Data Dictionary
'	OUTPUT: None	
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Narasinha							03/22/2013					NEW
'Manjunath                        03/26/2013				Modified the input parameters and reports
'Varun V							  09/03/2013				Added On error Resume Next Statement for runtime error handling
'Varun V  							  10/17/2013 				Added Error object test
'Neeraj Gaur					   11/27/2013				Removed the On Error Resume Next code as per review comments.
'###################################################################################################################################################
Sub webTableVerifyValuesEqual(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition  ,DDReference)
'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTable Test Library ---> webTableVerifyValuesEqual"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'####################################################################
		'CODE MODIFICATION
		'11/27/2013 Neeraj Gaur Removed Onerror Resume Next Statement as per review comments.
					'***************************
					'PREREQUISITE CODE
					'##############################################################
					'CODE MODIFICATION
					'09/03/2013 Varun V  Added On error Resume Next Statement for runtime error handling.
							'Initialize Error Handling
						   'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
							'##On Error Resume Next
					'END CODE MODIFICATION
					'##############################################################
					'END PREREQUISITE CODE
					'**************************
		'END CODE MODIFICATION
		'####################################################################
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Call the below component to get the actual value is displayed in the table
		strActualValue=webTableGetReturnElementValue( ScreenName_ObjectName,strRowValue,ColumnNameorPosition  )
		'Get the referance value from data dictionary for the parameter DDReference
	    strExpectedValue=ddGetItem(DDReference)
		'Call the below component to test the values are equal
		blnwebTableValuesEqual=testComparevalues(strActualValue,strExpectedValue,True)

		'##################################################################################
		'CODE MODIFICATION
		'11/27/2013 Neeraj Gaur Removed Onerror Resume Next Statement as per review comments.
			'##############################################################################
			'CODE MODIFICATION
			'10/17/2013 Varun V  Added Error object test
					'##If Err.Number = 0 Then	
					'Verify the boolean value is true/false
						If blnwebTableValuesEqual Then			
							'Report the status as pass if ExpectedValue and value present in reference cell  are equal
							reporterReportEvent "Passed",strReportStepLabel,"Expectedvalue and  Actualvalue  present in reference cell  are equal, Value is: '"& strExpectedValue  &"'"& Chr(13) &" in table: '"& ScreenName_ObjectName &"'"&Chr(13) & " for  reference value '"& strRowInputValue &"'"&" and column name: '"& ColumnNameorPosition  &"'"
						Else
							'Report the status as fail if ExpectedValue and value present in reference cell  are not equal
							reporterReportEvent "Failed",strReportStepLabel,"ExpectedValue and  Actualvalue  present in reference cell  are not  equal,Expected  value is: '"& strExpectedValue &"'"&Chr(13) &" reference cell value is: '"&strActualValue &"' in table '"& ScreenName_ObjectName &"'"& Chr(13) & " for  reference value: '"& strRowInputValue &"' and column name: '"& ColumnNameorPosition   &"'"
						End If	
					'##Else
							'##reporterReportEvent "Failed","WebTable Test Library ---> webTableVerifyValuesEqual","Failed due to run time error"&Err.description
					'##End If
			'END CODE MODIFICATION
			'###############################################################################
		'END CODE MODIFICATION
		'###################################################################################
End Sub



'###################################################################################################################################################
' NAME:  webTableVerifyValuesNotEqual
' PURPOSE:  To test the actual value is displayed in webtable corresponding to the 'row Refrence Value' and 'Column Name'  and expected value from data dictionary are not equal
' PARAMETERS:
'		INPUT :
'			ScreenName_ObjectName	: String that contains reference to the Table object stored in the object repository
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.												
'			DDReference	: Reference to a value stored in the Data Dictionary
'	OUTPUT: None	
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath                       07/02/2013				NEW
'Narasinha						  07/03/2013			Updated as per new folder structure to place this component.
'Lakshman Kumar A.H.     17/03/2014			   Removed Error Handling initialization.
'###################################################################################################################################################
Sub webTableVerifyValuesNotEqual(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,DDReference)
	'PREREQUISITE CODE
		' Declarations
		'##############################################################     			
			Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTest Library ---> webTableVerifyValuesNotEqual"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and siign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Call the below component to get the actual value is displayed in the table
		strActualValue=webTableGetReturnElementValue( ScreenName_ObjectName,strRowValue,ColumnNameorPosition  )
		'Get the referance value from data dictionary for the parameter DDReference
	   strExpectedValue=ddGetItem(DDReference)
		'Call the below component to test the values are not equal
		blnwebTableValuesNotEqual=testComparevalues(strActualValue,strExpectedValue,True)
		'Reporting the result,depending up on the returned  boolean value i.e. true/false.
		If blnwebTableValuesNotEqual Then			
			'Report the status as fail if ExpectedValue and  value  present in reference cell  are equal
			reporterReportEvent "Failed", strReportStepLabel ,"ExpectedValue and  Actualvalue  present in reference cell  are equal, Expected  value is: '"& strExpectedValue &_
																												"' reference cell value is: '"&strActualValue &"' in table: '"& ScreenName_ObjectName&"'"
		Else
			'Report the status as pass if ExpectedValue and  value  present in reference cell  are not equal
			reporterReportEvent "Passed", strReportStepLabel ,"ExpectedValue and Actualvalue present in reference cell are not equal,Expected value is: '"& strExpectedValue &_
																													"' reference cell value is: '"&strActualValue &"' in table: '"& ScreenName_ObjectName&"'"
		End If	
End Sub






'###################################################################################################################################################
' NAME:  webTableVerifyValuesPartialMatch
' PURPOSE:  To verify the value which is displayed in webtable corresponding to the 'row Reference Value' and 'ColumnNameorPosition' and expected value from data dictionary are Partially Matched
' PARAMETERS:
'		INPUT :
'			ScreenName_ObjectName: String that contains reference to the Table object stored in the object repository.
'			RowReferenceValueOrPosition  : 	String reference that contains value which is inline with the required element present in the webtable or Row Position where the element is located.
'							Note:    1) If RowReferenceValueOrPosition is PARTIAL match. Pass normal string only.
'								 2) If RowReferenceValueOrPosition is EXACT match. Pass it along with "#". Example- "#Test"....
'								 3) If RowReferenceValueOrPosition is Numeric value. Pass it along with "#". Example- "#1"....
'			ColumnNameorPosition  : String or integer that contains the Column Name / position displayed in the  webtable.												
'			DDRef_ValueToBeVerifiedPartially: Reference to a value stored in the Data Dictionary
'	OUTPUT: None	
'HISTORY
'NAME:							           	DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Subhash Bhat							10/15/2014					NEW
'###################################################################################################################################################
Sub webTableVerifyValuesPartialMatch(ScreenName_ObjectName,RowReferenceValueOrPosition,ColumnNameorPosition,DDRef_ValueToBeVerifiedPartially)
		'PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		Dim  strRowValue            '[string]  Contains the RowReferenceValueOrPosition.
		Dim strRowInputValue      '[string] Contains the row Value.
		Dim strActualValue          '[string]  Contains the actual value is displayed in WebTable.
Dim  strExpectedValue     '[string] Contains the Expected value.
		Dim blnTableValuesPartialMatch '[Boolean] Holds the result of the test for Partial Match.
		Dim strReportStepLabel  	 '[String] Contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
				strReportStepLabel = "WebTable Test Library ---> webTableVerifyValuesPartialMatch"
'END PREREQUISITE CODE
		 '**************************
		'Check "{" and "}" exists in the RowReferenceValueOrPosition
		If Left(Trim(RowReferenceValueOrPosition),1)="{" and Right(Trim(RowReferenceValueOrPosition),1)="}" Then
			'Get the row value from Data Dictionary
			strRowInputValue = Trim(ddGetItem(Trim(Mid(Trim(RowReferenceValueOrPosition),2,(Len(Trim(RowReferenceValueOrPosition))-2)))))
			'Append the obtained value with "{","}" and sign to a variable strRowValue
			strRowValue = "{"&strRowInputValue&"}"
		Else
			'Get the RowReferenceValueOrPosition value from Data Dictionary
			strRowValue = Trim(ddGetItem(Trim(RowReferenceValueOrPosition)))	
			'Assign the strRowValue to the variable strRowInputValue
			strRowInputValue = strRowValue
		End If
		'Call the below component to get the actual value is displayed in the table
		strActualValue=webTableGetReturnElementValue( ScreenName_ObjectName,strRowValue,ColumnNameorPosition  )
		'Get the reference value from data dictionary for the parameter DDRef_ValueToBeVerifiedPartially
	    strExpectedValue=ddGetItem(DDRef_ValueToBeVerifiedPartially)
		'Call testCompareValues component to compare the actual value and expected value are partially matching and assign return value to variable blnTableValuesPartialMatch
			blnTableValuesPartialMatch=testCompareValues(strActualValue,strExpectedValue,False)
					'Report the status depend on boolean value in blnTableValuesPartialMatch
						If blnTableValuesPartialMatch Then			
							'Report the status as pass if ExpectedValue and value present in reference cell  are partially matching
							reporterReportEvent "Passed",strReportStepLabel,"Expected value and Actual value  are Partial Matching, Value is: '"&_
															 strExpectedValue  &"' in table: '"& ScreenName_ObjectName &"' for  reference value: '"& _
															 strRowInputValue &"' and column name: '"& ColumnNameorPosition  &"'."
						Else
							'Report the status as fail if ExpectedValue and value present in reference cell  are not matching
							reporterReportEvent "Failed",strReportStepLabel,"Expected value and  Actual value  are not  Matching; Expected  value is: '"& strExpectedValue &_
							"' reference cell value is: '"&strActualValue &"' in table: '"& ScreenName_ObjectName &"' for  reference value: '"& strRowInputValue &_
							"' and column name: '"& ColumnNameorPosition   &"'."
						End If	
End Sub

'########################################################################################################################################



''######################################################################################################################
' NAME:  webTableVerifyValuesSorted
' PURPOSE:  To verify values sorted as ascending or descending in the table
' PARAMETERS:
'		INPUT	:
'				ScreenName_ObjectName							 :(String) contains reference to the webtable object stored in the object repository
'				ColumnNameorPosition								:(String or integer)contains the Column Name / position of webtable in which required values are present
'				TypeOfSort		                     						:(String)contains values Sorting type to be verified from a table column Example:
																																'	1.	For Ascending sorting verification TypeOfSort should be mentioned as “A”
																																'2.	For Descending sorting verification TypeOfSort should be mentioned as “D”.
'				optPagination_ObjectName				:[Optional]String that contains reference to the pagination object stored in the object repository.If user passes null value,verification will happen only in first page.
'				optPaginationToFirst_Last_ElementName:[Optional]String that contains the "PaginationToFirst" and "PaginationToLast" element text\name separated by a delimiter ";"
'																					Example-"<<;>>".*Mandatory if user passes optPagination_ObjectName
'***Note:Sorting can be done only for string,Date and integer datatypes
'	   OUTPUT : None
'HISTORY
'NAME:				DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Rashmi C			11/07/2014					          NEW
'######################################################################################################################
Sub webTableVerifyValuesSorted(ScreenName_ObjectName,ColumnNameorPosition,TypeOfSort,optPagination_ObjectName,optPaginationToFirst_Last_ElementName)
'    PREREQUISITE CODE
	' 1) Declarations
	' ##############################################################
		Dim objwebTable								'(Object)WebTable Object
		Dim objPagination			  				 '(Object)Pagination Child object
		Dim objPaginationParent					 '(Object)Pagination parent object
		Dim arrValue					 			   '(Array)Input values which will compared with the table cell value
		Dim strTableToVerify					  '(String)Search criteria.Search through full page or partial
		Dim arrFirstLastPageNames 			'(Array)Firstamd last page names
		Dim arrPageRange						  '(Array)Page range
		Dim intFirstPageChildObjectCount   '(Integer)First page child object count
		Dim strReportStepLabel  	 			'(String)Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		
			'Assign values to the variable
			strReportStepLabel = "WebTest Library --> webTableVerifyValuesSorted"
			intVerificationStartPage = 1
			intMaxpageNumber = 1
			blnRowFound = False
		intRowInitialValue = 2
			intArraycount = 0
			blnFirstPageChildObjectExist = False
			blnLastPageChildObjectExist = False
	 ' END PREREQUISITE CODE
	 ' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
		'##############################################################
		'	     Create 2 arraylist objects
		Set arrListName_Reference_Data = CreateObject( "System.Collections.ArrayList" )
		Set arrListName_Sorted_Data=CreateObject( "System.Collections.ArrayList" )
		'Check Type of sort is ascending(A) or Descending(D)
		If (UCase(Trim(TypeOfSort))="A" Or  UCase(Trim(TypeOfSort))="D") Then
				'Check the input parameter optPagination_ObjectName, optPaginationToFirst_Last_ElementNames and decide pagination
				'Check if optPagination_ObjectName and optPaginationToFirst_Last_Element Name is empty
				If optPagination_ObjectName = "" and optPaginationToFirst_Last_ElementName = "" Then
						'Assign null to the variable strTableToVerify
						strTableToVerify = "FIRSTPAGE"
						'Check if optPagination_ObjectName not equal to null and optPaginationToFirst_Last_ElementName is not empty
				ElseIf optPagination_ObjectName <> "" and optPaginationToFirst_Last_ElementName <> ""  Then
						'Assign ALL to the variable strTableToVerify
						strTableToVerify = "ALL"
				Else
						'Report fail if invalid value passed to the pagination parameters
						reporterReportEvent	"Failed",strReportStepLabel,"Invalid combination of value passed to the parameters optPagination_ObjectName and "&_
																																									"optPaginationToFirst_Last_ElementName.Please provide valid values and rerun the script"
				End If
			'************************************************************************************************
			'Get the webtable  object based on input parameter : ScreenName_ObjectName
			Set objwebTable=webGetObjectHierarchy(ScreenName_ObjectName)
			'Check the table object exists in the web page	
			If Not objwebTable.Exist(3) Then
					'Report fail if the table object doesn't exist in the web page
					reporterReportEvent	"Failed",strReportStepLabel,"WebTable object :'"&ScreenName_ObjectName&"' doesn't exists in the application."&_
																																											"Please check the property and re-run the script again"
			End If
			'Verify that supplied object is a "webtable" to perform the operation
			webIsTable objwebTable,ScreenName_ObjectName
			'Get the Column position of column name/position passed by user, using the reusable component webTableGetColumnposition in a variable intColumnPos
			intColumnPos=webTableGetColumnposition(objwebTable,ScreenName_ObjectName,ColumnNameorPosition)
			'Check the input parameter ColumnNameorPosition is numeric or not
			If IsNumeric(ColumnNameorPosition) Then  intRowInitialValue = 1			'Assign 1 to the variable intRowInitialValue and DataMinend 			
			'Check the variable strTableToVerify value not equal to empty
			If strTableToVerify <> "FIRSTPAGE" Then
					'Split the values and assign to a array arrFirstLastPageNames
					arrFirstLastPageNames = Split(optPaginationToFirst_Last_ElementName,";")
					'Check array UBound is equal to 1
					If Not (UBound(arrFirstLastPageNames) = 1) Then
							'Report fail if array ubound not eqaul to 1
							reporterReportEvent	"Failed",strReportStepLabel,"Invalid value :'"&optPaginationToFirst_Last_ElementName&"' passed to the parameter optPageorPageRangeToTraverse."&_
																																													"Range should have one upper limit and one lower limit."
					End If
					'Get the pagination parent object and assign to the variable objPaginationParent
					Set objPaginationParent = webGetObjectHierarchy(optPagination_ObjectName)
					'Check the existance of the objPaginationParent in the webpage
					If objPaginationParent.Exist(3) Then
					'Get the pagination child objects and assign to objPaginationChild
					Set objPaginationChild = objPaginationParent.ChildObjects()
					'Open a for loop and iterate through all the child objects
							For intPageChildObjectCount=0 to objPaginationChild.Count-1
								'Check the text value of the child object equals to the arrFirstLastPageNames first value
								If objPaginationChild(intPageChildObjectCount).GetROProperty("text") = arrFirstLastPageNames(0) Then
									'Assign the child count to a variable intFirstPageChildObjectCount
									intFirstPageChildObjectCount = intPageChildObjectCount
									'Assign boolean true to variable blnFirstPageChildObjectExist
									blnFirstPageChildObjectExist = True
									'Check the text value of the child object equals to the arrFirstLastPageNames first value
								ElseIf	objPaginationChild(intPageChildObjectCount).GetROProperty("text") = arrFirstLastPageNames(1) Then
									'Assign boolean true to variable blnLastPageChildObjectExist
									blnLastPageChildObjectExist = True
									'Click on the child object
									objPaginationChild(intPageChildObjectCount).Click
									'Exit the for loop
									Exit For
								End If
						Next
					If Not (blnFirstPageChildObjectExist and blnLastPageChildObjectExist) Then
							'Report fail if the optPaginationToFirst_Last_ElementName value is invalid
							reporterReportEvent	"Failed",strReportStepLabel,"Invalid 'PaginationToFirst' and 'PaginationToLast' element text\name :'"&optPaginationToFirst_Last_ElementName&"' passed to the parameter optPaginationToFirst_Last_ElementName."&_
																																													"Please provide valid element text\name and rerun the script."
					End If
					'Call webWaitUntilElementToLoad which will wait until the element loads completly
					webWaitUntilElementToLoad(ScreenName_ObjectName)
					'Set the variable objPaginationChild to nothing
					'On Error Resume Next
					On Error Resume Next
					'Refresh the parent child object
					objPaginationParent.RefreshObject
					'Get the err number and descrition and end the scope of on error resume next
					errNumber = err.Number
					errDesc = err.Description
					On Error GoTo 0
					If errNumber <> 0 Then
							'Report fail if the optPaginationToFirst_Last_ElementName value is invalid
							reporterReportEvent	"Failed",strReportStepLabel,"Failed to get the Pagonation Child Objects for the supplied optPagination_ObjectName '"&optPagination_ObjectName&" due to reason: '"&errDesc&_
																																													"'. Please recheck the supplied optPagination_ObjectName and re-run the script."
					Else
							'Get the pagination child objects and assign to objPaginationChild
							Set objPaginationChild = objPaginationParent.ChildObjects()
							'Open a for loop and iterate through all the child objects
							For intPageChildObjectCount = objPaginationChild.Count To 1 Step-1
							'Check the text property value of the child object is numeric
							If IsNumeric(objPaginationChild(intPageChildObjectCount-1).GetROProperty("Text")) Then
									'Assign the value to a variable intMaxpageNumber
									intMaxpageNumber = objPaginationChild(intPageChildObjectCount-1).GetROProperty("Text")
									Exit For
							End If
							Next
							'Click on the first pagination child object
							objPaginationChild(intFirstPageChildObjectCount).Click
					End If
					'Call webWaitUntilElementToLoad which will wait until the element loads completly
					webWaitUntilElementToLoad(ScreenName_ObjectName)
					'Set the variable objPaginationChild to nothing
					Set objPaginationChild = Nothing
					End If
			End If
			'********************************************************************************************************************
			'Verification of table cell value and input value
			'Open a for loop and iterate through  the required pages
			For intTableCounter = intVerificationStartPage to Cint(intMaxpageNumber)
					wait 5
					'Refresh the webTable object
					objwebTable.RefreshObject
					'Get the total row count and assign to avariable intRowCount
					intRowCount = objwebTable.RowCount
					'Open a for loop and iterate through all the rows
					For intRowPositionIndex = intRowInitialValue To intRowCount-1
							'Make the boolean variable blnRowFound to false
							blnRowFound = False					
							'Get the cell value and assign to a variable strCellValue
							strCellValue = Trim(objwebTable.GetCellData(intRowPositionIndex ,intColumnPos))
							'Chek the strCellValue is equal to ERROR: The specified cell does not exist.
							If LCASE(strCellValue) = LCASE("ERROR: The specified cell does not exist.") Then
									Exit For
									'Chek the strCellValue has any pagination textname.
							ElseIf (blnFirstPageChildObjectExist and blnLastPageChildObjectExist) Then
									If Instr(1,strCellValue,arrFirstLastPageNames(0))<>0 and Instr(1,strCellValue,arrFirstLastPageNames(1))<>0 Then Exit For						
							End If
							'if the retrieved Cell value is data; convert it into date datatype and add it to arraylist,Else directly add to two arraylists
							If Isdate(strCellValue) Then
									arrListName_Reference_Data.Add  Cdate(strCellValue)
									arrListName_Sorted_Data.Add  Cdate(strCellValue)
							Else
									arrListName_Reference_Data.Add  Trim(strCellValue)
									arrListName_Sorted_Data.Add  Trim(strCellValue)
							End If
					Next   					
					'Check intTableCounter and intMaxpageNumber are not equal
					If Not intTableCounter = Cint(intMaxpageNumber) Then
							'Create a decription of page object
							Set objPaginationLink = Description.Create
							objPaginationLink("micclass").Value = "Link"
							objPaginationLink("text").Value = Cstr(intTableCounter+1)
							'On Error Resume Next
							On Error Resume Next
							objPaginationParent.RefreshObject
							'Get the err number and descrition and end the scope of on error resume next
							errNumber = err.Number
							errDesc = err.Description
							On Error GoTo 0
							If errNumber = 0 Then
									Set objPagination = objPaginationParent.ChildObjects(objPaginationLink)
									'Click on the pagination child object
									objPagination(0).Click
							Else
									'Report fail if the optPaginationToFirst_Last_ElementName value is invalid
									reporterReportEvent	"Failed",strReportStepLabel,"Failed to get the Pagonation Child Objects for the supplied optPagination_ObjectName '"&optPagination_ObjectName&" due to reason: '"&errDesc&_
																								"'. Please recheck the supplied optPagination_ObjectName and re-run the script."
						End If
						'Call webWaitUntilElementToLoad which will wait until the element loads completly
						webWaitUntilElementToLoad(ScreenName_ObjectName)
						'Set the variable objPaginationChild to nothing
						Set objPagination = Nothing
						'Refresh the webTable object
						objwebTable.RefreshObject			
					End If
			Next
					'Verify whether arraylist is empty
					If arrListName_Reference_Data.count<>0 And arrListName_Sorted_Data.count<>0 Then
							'Sort the Reference column data in Ascending
							arrListName_Reference_Data.sort
							If UCase(Trim(TypeOfSort))="A" Then
								strSortType="Ascending"
								'If sorting type is Descending Compare it against columndata available from application after sorting is done
							ElseIf UCase(Trim(TypeOfSort))="D" Then
								arrListName_Reference_Data.Reverse
								strSortType="Descending"
							End If
							'itrate through each value in array list ,andCompare against refernece array list
							For arrayIndexSort=0 to arrListName_Reference_Data.count-1
								'if comparision is failed exit from for loop and report
								If arrListName_Sorted_Data.item(arrayIndexSort) <> arrListName_Reference_Data.item(arrayIndexSort) Then
									'Report Failed  if AfterSort_arrListName_Data.item(arrayIndexSort)  and BeforSort_arrListName_Data.item(arrayIndexSort) are not equal
									reporterReportEvent "Failed",strReportStepLabel,"Table Cell Value :'"&arrListName_Sorted_Data.item(arrayIndexSort) &"' and input value :'"&arrListName_Reference_Data.item(arrayIndexSort)&"' are not equal,Sorting in "&strSortType&" order  is unsuccessfull"		
								Exit For
								End If	
							Next						
							'Report passed if sorting is successful for all Column values  	
							reporterReportEvent "Passed",strReportStepLabel,"The values of the supplied ColumnName/Position :'"&ColumnNameorPosition&"' in the table :'"&ScreenName_ObjectName&"' is Sorted successfully in "&strSortType&" order."
					Else
							'Report failed, As supplied Table column is empty
							reporterReportEvent "Failed", strReportStepLabel , "The values of the supplied ColumnName/Position :'"&ColumnNameorPosition&"' in the table :'"&ScreenName_ObjectName&"' is empty. Please supply the valid ColumnNameorPosition that contains values and re-run the script."
					End If
	Else
		'Report failed, As supplied TypeOfSort is invalid
		reporterReportEvent "Failed", strReportStepLabel , "The supplied Sorting type: '"&TypeOfSort&"' is invalid. Please supply either 'A' or 'D' as Type of sort and re-run the script."	
	End If
End Sub


'##############################################################################################################################
'Name: webVerifyAttributeValue
'PURPOSE: To verify the property/attribute value for an object/element.
'PARAMETERS:
'			ScreenName_ObjectName : String that contains reference to the object stored in the object repository.			
'			strAttributeName: Name of the property for the object. This can be Image,Link,WebButton,WebList,WebRadioGroup,WebCheckBox,WebElement and WebTable
'			DDRef_ValueToVerify: Reference to a value stored in the Data Dictionary, Which will be compared against the run time property value of the object
'OUTPUT:
'				None
'HISTORY
'NAME:	                            DATE:							PURPOSE
'Manjunath L M		        06/09/2014							 NEW
'##############################################################################################################################
Sub webVerifyAttributeValue(ScreenName_ObjectName , strAttributeName , DDRef_ValueToVerify)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################     			
			Dim objWeb ' (Object) Obtained web object as mentioned in ScreenName_ObjectName
			Dim strExpectedValue '(String) Expected value of the object for the supplied property
			Dim strRunTimeAttributeValue ' (String) Run time property value of the object
			Dim blnValuesEqual ' (Boolean) Expected and Actual compare status			
			Dim strReportStepLabel  	 '	(String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "WebTest Library ---> webVerifyAttributeValue"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		'2) Verify the ScreenName_ObjectName table is not empty
		If Trim(ScreenName_ObjectName)<>"" Then
			'3) Get the web object based on input parameter : ScreenName_ObjectName
			Set objWeb=webGetObject(ScreenName_ObjectName)   		
			'4) Get the reference value from data dictionary for the parameter DDRef_ValueToVerify
			strExpectedValue = ddGetItem(DDRef_ValueToVerify)
			'5) Initialize Error Handling
			On Error Resume Next
			'6) Get runtime property value of the object present in a web table cell.
			strRunTimeAttributeValue = objWeb.GetRoProperty(strAttributeName)
			'7) Call bellow component to compare the actualvalue and expected value are not equal and assign return value to variable.
			blnValuesEqual=testCompareValues(strRunTimeAttributeValue,strExpectedValue,True)
			'5.1) Verify the error occurrence, and if any suppress the errors
			errNumber = Err.Number
			errDescription = Err.Description        		
			On Error GoTo 0
			'5.2) Error Handling
			If errNumber = 0 Then	
				'8)Verify if the runtime value of the property matches with the expected value.
				If blnValuesEqual Then			'Verify the boolean value is true/false
					'8.1) Report passed - DDRef_ValueToVerify value and element property value are equal
					reporterReportEvent "Passed", strReportStepLabel ,"Expected value and Runtime property: '"&strAttributeName&"' value are equal for the supplied object: '"&ScreenName_ObjectName&_
																								"' , And the Value is: '"&strExpectedValue&"'"
				Else
					'8.2) Report passed - DDRef_ValueToVerify value and element property value are not equal
					reporterReportEvent "Failed", strReportStepLabel ,"Expected value and Runtime property: '"&strAttributeName&"' value is not equal for the supplied object: '"&ScreenName_ObjectName&_
																								"' , Expected value is: '"&strExpectedValue &"' And Run time value is '"& strRunTimeAttributeValue&"'"
				End If
			Else				
				'5.3) Report failure - Error obtained while retrieving the value from the object 			
				 reporterReportEvent "Failed", strReportStepLabel ,"Failed to compare the Expected and Run time value of the object "&ScreenName_ObjectName&" Reason: "& errDescription
			End If
		Else
			'2) Report the status as fail if ScreenName_ObjectName is empty
			reporterReportEvent "Failed",strReportStepLabel,"An empty 'ScreenName_ObjectName' is passed to the component. ScreenName_ObjectName value is "&_
														"required. Please enter a valid ScreenName_ObjectName value and execute again"
		End If
End Sub


'##############################################################################################################################
' NAME:  webVerifyAttributeValueWithLabel
' PURPOSE:  To verify the property/attribute value for an object/element which is displayed besides the label.
' PARAMETERS:
'		INPUT
'				Label_ScreenName_ObjectName :  [String] Contains object name that refers to the value in the object properties of Label displayed besides the Object/element on the webpage from object repository.
'				LabelItem_ScreenName_ObjectName : [String]Contains object name that refers to the value in the object properties of Object/element displayed with refernce to label on the webpage from object repository.
'			    strAttributeName:  [String]Property name of the LabelItem object for which the run time value need to be verified with the expected value.
'			   DDRef_ValueToVerify: Reference to a value stored in the Data Dictionary, Which will be compared against the run time property value of the Label Item object.
'
'		OUTPUT : None
'HISTORY
'NAME:				DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Rashmi.c			 	10/22/2014													NEW
'##############################################################################################################################
Sub webVerifyAttributeValueWithLabel(Label_ScreenName_ObjectName, LabelItem_ScreenName_ObjectName, strAttributeName, DDRef_ValueToVerify)
		'PREREQUISITE CODE
		'1) Declarations
		'##############################################################     			
			Dim objWeb ' (Object) Obtained web object as mentioned in Label_ScreenName_ObjectName
			Dim strExpectedValue '(String) Expected value of the object for the supplied property
			Dim strRunTimeAttributeValue ' (String) Run time property value of the object
			Dim blnValuesEqual ' (Boolean) Expected and Actual compare status			
			Dim strReportStepLabel  	 '	(String) Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
			strReportStepLabel = "WebTest Library ---> webVerifyAttributeValueWithLabel"
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
			'2) Get the web object based on input parameter : ScreenName_ObjectName
			Set objWeb=webGetObjectWithLabel(Label_ScreenName_ObjectName, LabelItem_ScreenName_ObjectName)		
			'3) Get the reference value from data dictionary for the parameter DDRef_ValueToVerify
			strExpectedValue = ddGetItem(DDRef_ValueToVerify)
			'4) Initialize Error Handling
			On Error Resume Next
			'5) Get runtime property value of the object present in a web table cell.
			strRunTimeAttributeValue = objWeb.GetRoProperty(strAttributeName)
			'6) Call bellow component to compare the actualvalue and expected value are equal and assign return value to variable.
			blnValuesEqual=testCompareValues(strRunTimeAttributeValue,strExpectedValue,True)
			'4.1) Verify the error occurrence, and if any suppress the errors
			errNumber = Err.Number
			errDescription = Err.Description        		
			On Error GoTo 0
			'4.2) Error Handling
			If errNumber = 0 Then	
				'7)Verify if the runtime value of the property matches with the expected value.
				If blnValuesEqual Then			'Verify the boolean value is true/false
					'7.1) Report passed - DDRef_ValueToVerify value and element property value are equal
					reporterReportEvent "Passed", strReportStepLabel ,"Expected value and Runtime property: '"&strAttributeName&"' value is equal for "&_
						"the supplied object: '"&LabelItem_ScreenName_ObjectName&"' inside the label: '"&Label_ScreenName_ObjectName&"' , And the Value is: '"&strExpectedValue&"'"
				Else
					'7.2) Report Failed - DDRef_ValueToVerify value and element property value are not equal
					reporterReportEvent "Failed", strReportStepLabel ,"Expected value and Runtime property: '"&strAttributeName&"' value is not equal for the supplied object: '"&LabelItem_ScreenName_ObjectName&_
						"' inside the label: '"&Label_ScreenName_ObjectName&"' , Expected value is: '"&strExpectedValue &"' And Run time value is '"& strRunTimeAttributeValue&"'"
				End If
			ElseIf errNumber=5 Then
				'4.3) Report failure - Error obtained while retrieving the value from the object 			
				 reporterReportEvent "Failed", strReportStepLabel ,"Failed to compare the Expected and Run time value of the object: '"&LabelItem_ScreenName_ObjectName&_
					"' inside the label: '"&Label_ScreenName_ObjectName&"' Reason: The supplied strAttributeName: '"&strAttributeName&"' is invalid."
			Else				
				'4.4) Report failure - Due to unexpected error.
				 reporterReportEvent "Failed", strReportStepLabel ,"Failed to compare the Expected and Run time value of the object: '"&LabelItem_ScreenName_ObjectName&_
					"' inside the label: '"&Label_ScreenName_ObjectName&"' Reason: "& errDescription
			End If
End Sub


'###############################################################################################################################################
' NAME:  webVerifyElementDisabled
' PURPOSE:  Verifies the  object  Disabled status
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.			
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath			08/03/2012					NEW
'Manjunath          03/07/2013                  Modified to make the component to verify disable status of the object
'###############################################################################################################################################
Sub webVerifyElementDisabled(ScreenName_ObjectName)
'Get the web object based on input parameter : ScreenName_ObjectName
	Set objElement=webGetObject(ScreenName_ObjectName)
	''#############################################################################
	''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing
	'Get the object status for the object  'ScreenName_ObjectName'	
	'blnObjectStatus=objElement.Object.isDisabled ' As Boolean
	''#############################################################################
	''#############################################################################
	''CODE MODIFICATION
	'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
	''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
	''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.	
	'Get the object status for the object  'ScreenName_ObjectName'
	blnObjectStatus=objElement.Object.Disabled ' As Boolean
	''END CODE MODIFICATION
	''#############################################################################		
	'Verify the enabled status of the object
	If blnObjectStatus Then
		'Report the status as passed
		reporterReportEvent "Passed","WebTest Library-->webVerifyElementDisabled",ScreenName_ObjectName& " is Disabled "	
	Else
		'Report the status as failed
		reporterReportEvent "Failed","WebTest Library-->webVerifyElementDisabled", ScreenName_ObjectName& " is Enabled "		
	End If
End Sub


'###############################################################################################################################################
' NAME:  webVerifyElementEnabled
' PURPOSE:  Verifies the  object  Enabled  status
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.			
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath			08/03/2012					NEW
'Manjunath          03/07/2013                  Modified to make the component to verify enable status of the object
'###############################################################################################################################################
Sub webVerifyElementEnabled(ScreenName_ObjectName)
'Get the web object based on input parameter : ScreenName_ObjectName
	Set objElement=webGetObject(ScreenName_ObjectName)
	''#############################################################################
	''02/25/2019 Venkateswarlu V Commented below line of code effecting for cross browser testing	
	'Get the object status for the object  'ScreenName_ObjectName'
	'blnObjectStatus=objElement.Object.isDisabled ' As Boolean
	''#############################################################################
	''#############################################################################
	''CODE MODIFICATION
	'' VENKATESWARLU V 02/25/2019 'This modification is implemented to support cross browser testing	
	''In IE we have “isDisabled” native property, But in Chrome and Firefox browsers “isDisabled” native property is not getting displayed.
	''So we are changing it from "isDisabled" to "Disabled" for cross browser testing.
	'Get the object status for the object  'ScreenName_ObjectName'
	blnObjectStatus=objElement.Object.Disabled ' As Boolean
	''END CODE MODIFICATION
	''#############################################################################		
	'Verify the enabled status of the object
	If Not(blnObjectStatus) Then
		'Report the status as passed
		reporterReportEvent "Passed","Web Library-->webVerifyElementEnabled",ScreenName_ObjectName& " is Enabled "
	Else
		'Report the status as failed
		reporterReportEvent "Failed","Web Library-->webVerifyElementEnabled", ScreenName_ObjectName& " is Disabled "			
	End If	
End Sub


'#######################################################################################################################################################
' NAME:  webVerifyElementExists
' PURPOSE:  To verify whether  Object Exist  on a respective screen.
' PARAMETERS:
'		INPUT
'					ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.					
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil Kumar		17/09/2012					NEW
'Narasinha			 23/01/2013                  Modified to break the function for exists only.
'Lakshman Kumar A.H.     24/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'Lakshman Kumar A.H.     24/03/2014					Modified as per the changes done w.r.t the component "webGetObjectCollection"
'Varun V								06/18/2014					Modified the component to check the hidden status of the object
'########################################################################################################################################################
Sub webVerifyElementExists(ScreenName_ObjectName)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################	
		  Dim objWebCollection      '(Object) collection of web objects
		  Dim strReportStepLabel  	 '(String)Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "WebTest Library--->webVerifyElementExists"
		 ' END PREREQUISITE CODE
		' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	 ' ###############################################################
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
	'Get the  object for the specified object "ScreenName_ObjectName"
	 Set objWebCollection=webGetObjectCollection(ScreenName_ObjectName,"","","","","")
'##'Clear the error.
	'##Err.Clear
	'##'Ends the Error Handling Scope.
	'##On Error GoTo 0
	'Verifying the object exist
	'##If Not  IsEmpty(objWebCollection)  Then
	'###################################################
	'CODE	MODIFICATION
	'06/18/2014					Varun V				Modified the component to check the hidden status of the object
		'Verify the objWebCollection is nothing
		If objWebCollection Is Nothing Then
			'Report the status as failed if the object is not hidden
			reporterReportEvent "Failed",strReportStepLabel,"Expected object : " & ScreenName_ObjectName &" doesn't Exist in the AUT"	
		'Chekc if there is any property with name index passed in OR
		ElseIf Lcase(g_strPropertyIndex)="index" Then		
			Set objWeb=objWebCollection
		'Check the object collection count is equal to 1
		ElseIf objWebCollection.Count = 1 Then
			Set objWeb=objWebCollection(0)          			
		Else
			'Report the status as failed if the object collection count is greater than 1
			reporterReportEvent "Failed",strReportStepLabel,"More than one objects with same properties exists in the"&_
			 " AUT for the input object : " & ScreenName_ObjectName&".Please modify the properties for the supplied object and re-run the script."	
		End If
		'Check the object hidden status
		If webIsElementHidden(objWeb) Then
			'Report the status as Failed if the object is hidden
			reporterReportEvent "Failed",strReportStepLabel,"Expected object : " & ScreenName_ObjectName &" is hidden in the AUT"
		Else
			'Report the status as passed if the objects exists in the application screen
			reporterReportEvent "Passed",strReportStepLabel,"Expected object : " & ScreenName_ObjectName &" Exists  in the AUT"
		End If
	 'END CODE MODIFICATION
	'######################################################
End Sub


'#######################################################################################################################################################
' NAME:  webVerifyElementNotExists
' PURPOSE:  To verify whether  Object Not Exist  on a respective screen.
' PARAMETERS:
'		INPUT
'					ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.					
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil Kumar		17/09/2012					NEW
'Narasinha			 23/01/2013					Modified to break the function for not exists only.
'Lakshman Kumar A.H.     24/02/2014					Removed Error Handling initialization.
'Lakshman Kumar A.H.     24/03/2014					Modified as per the changes done w.r.t the component "webGetObjectCollection"
'Varun V								06/18/2014					Modified the component to check the hidden status of the object
'########################################################################################################################################################
Sub webVerifyElementNotExists(ScreenName_ObjectName)
	' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################	
		  Dim objWebCollection      '(Object) collection of web objects
		  Dim strReportStepLabel  	 '(String)Step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  Dim blnElementFound			'(Boolean) Status of the element existance
		  strReportStepLabel = "WebTest Library--->webVerifyElementNotExists"
		  blnElementFound = False
		 ' END PREREQUISITE CODE
		' **************************
	 ' BEGIN FUNCTION IMPLEMENTATION
	 ' ###############################################################
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	'##On Error Resume Next
		'Get the collection of object for the specified object "ScreenName_ObjectName"
		Set objWebCollection=webGetObjectCollection(ScreenName_ObjectName,"","","","","")
	'##'Clear the error.
	'##Err.Clear
	'##'Ends the Error Handling Scope.
	'##On Error GoTo 0
	'Verifying the collection object IsEmpty
	'##If IsEmpty(objWebCollection) Then
	'###################################################
	'CODE	MODIFICATION
	'06/18/2014					Varun V				Modified the component to check the hidden status of the object
		'Verify the objWebCollection is nothing
		If objWebCollection Is Nothing Then
			'Make the boolen blnElementFound to True
				blnElementFound = True
			'Report the status as passed if the objects doesn't exist in the application screen
			reporterReportEvent "Passed",strReportStepLabel,"Expected object : '" & ScreenName_ObjectName &"' doesn't Exist in the AUT"
		'Chekc if there is any property with name index passed in OR
		ElseIf Lcase(g_strPropertyIndex)="index" Then		
		'Set the objWebCollection to the variable objWeb
			Set objWeb=objWebCollection
		'Check the object collection count is equal to 1
		ElseIf objWebCollection.Count = 1 Then
		'Set the first object to the variable objWeb
			Set objWeb=objWebCollection(0)			
		Else
			'Report the status as failed if the object collection count is greater than 1
			reporterReportEvent "Failed",strReportStepLabel,"More than one objects with same properties exists in the AUT for the input object : " & ScreenName_ObjectName&_
																						". Please modify the properties for the supplied object and re-run the script."	
		End If
		'Check the boolen status
		If Not blnElementFound Then
			'Check the object hidden status
			If webIsElementHidden(objWeb) Then
				'Report the status as Warning if the object is hidden
				reporterReportEvent "Warning",strReportStepLabel,"Expected object : '" & ScreenName_ObjectName &"' is hidden in the AUT"
			Else
				'Report the status as failed if the object is not hidden
				reporterReportEvent "Failed",strReportStepLabel,"Expected object : '" & ScreenName_ObjectName &"' Exists in the AUT"	
			End If
		End If
	 'END CODE MODIFICATION
	'######################################################
End Sub


'##########################################################################################################################################################
'Name:	webVerifyRadioButtonDisabled
'PURPOSE: Check the radio button present inside a radio group is Disabled.
'PARAMETERS: 	
'	INPUT:
'		RadioGroupName	: 			Name of the Radio Group.
'		RadioButtonIndex :  Index of the radio button present inside a radio group.
										'Note - If n radio buttons are there in a group,then RadioButtonIndex will vary from from 0 to (n-1)
'	OUTPUT:None
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					05/22/2014					New
'##########################################################################################################################################################
Sub webVerifyRadioButtonDisabled(RadioGroupName,RadioButtonIndex)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim strRadioGroupName 	         						 ' string variable that  contains the name of the radio group
		  Dim intRadioButtonIndex						   			   'Integer variable that contains the index of radio button
		  Dim blnFrameExist														'Boolean variable contains status of frame existance
		  Dim blnRadioButtonExist										'Bolean variable contains the status of the radio button existance
Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Web Test Library --> webVerifyRadioButtonDisabled"
		  blnRadioButtonExist = True
		  blnFrameExist = False
		 ' END PREREQUISITE CODE
		 ' **************************
		 ' BEGIN FUNCTION IMPLEMENTATION
		 ' ###############################################################
			'Get the radioGroup name and assign to a variable strRadioGroupName
			strRadioGroupName = ddGetItem(RadioGroupName)
			'Get the radio button index and assign to a variable intRadioButtonIndex
			intRadioButtonIndex = ddGetItem(RadioButtonIndex)
			'Check Radio button Index is numeric or not
		    If IsNumeric(intRadioButtonIndex)  Then	
			   'Call websetpage for setting the web page
			   webSetPage
			   'Assign the radiogroup object to the variable objRadioGroup by using getElementsByName method if the radio group is inside a page
			   Set objRadioGroup = g_objBrowserPage.Object.getElementsByName(strRadioGroupName)
			   'Check the number of radio button inside the group in page level
				If objRadioGroup.Length < 1 Then
						'Report fail if the radio group is not available.
						reporterReportEvent "Failed",strReportStepLabel,"Radio group having name '"&strRadioGroupName& "' doen't exist in the application."
				End If
				'Check the button index is less than total nuber button in the group
			   If Cint(intRadioButtonIndex) > objRadioGroup.Length-1 Then		
					'Report the status as failed if the radio button is invalid
					reporterReportEvent "Failed",strReportStepLabel,"Radio button Index '"&intRadioButtonIndex&"' is greater than the existing number of Radio button.Please pass a valid index "
				'Check the radio button in radio group is Disabled or not
			   ElseIf objRadioGroup(Cint(intRadioButtonIndex)).Disabled Then
					'Report the status as passed if the radio button is Enabled
					reporterReportEvent "Passed",strReportStepLabel,"Radio button inside the radio group '"&strRadioGroupName& "' having Index value '"&RadioButtonIndex&"' is Disabled "
				Else
					'Report the status as failed if the radio button is Disabled
					reporterReportEvent "Failed",strReportStepLabel, "Radio button inside the radio group '"&strRadioGroupName& "' having Index value '"&RadioButtonIndex&"' is Enabled "	
			   End If
			Else
				'Report the status as fail if the radio button index is non numeric
				reporterReportEvent "Failed",strReportStepLabel,"Radio button Index '"&intRadioButtonIndex&"' is non numeric value.Please pass numeric Value "
			End If
End Sub


'##########################################################################################################################################################
'Name:	webVerifyRadioButtonEnabled
'PURPOSE: Check the radio button present inside a radio group is Enabled.
'PARAMETERS: 	
'	INPUT:
'		RadioGroupName	: 			Name of the Radio Group.
'		RadioButtonIndex :  Index of the radio button present inside a radio group.
										'Note - If n radio buttons are there in a group,then RadioButtonIndex will vary from from 0 to (n-1)
'	OUTPUT:None
'HISTORY:
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V					05/27/2014					New
'##########################################################################################################################################################
Sub webVerifyRadioButtonEnabled(RadioGroupName,RadioButtonIndex)
' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		  Dim strRadioGroupName 	         						 ' string variable that  contains the name of the radio group
		  Dim intRadioButtonIndex						   			   'Integer variable that contains the index of radio button
		  Dim blnFrameExist														'Boolean variable contains status of frame existance
		  Dim blnRadioButtonExist										'Bolean variable contains the status of the radio button existance
Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		  strReportStepLabel = "Web Test Library --> webVerifyRadioButtonEnabled"
		  blnRadioButtonExist = True
		  blnFrameExist = False
		 ' END PREREQUISITE CODE
		 ' **************************
		 ' BEGIN FUNCTION IMPLEMENTATION
		 ' ###############################################################
			'Get the radioGroup name and assign to a variable strRadioGroupName
			strRadioGroupName = ddGetItem(RadioGroupName)
			'Get the radio button index and assign to a variable intRadioButtonIndex
			intRadioButtonIndex = ddGetItem(RadioButtonIndex)
			'Check Radio button Index is numeric or not
		    If IsNumeric(intRadioButtonIndex)  Then	
			   'Call websetpage for setting the web page
			   webSetPage
			   'Assign the radiogroup object to the variable objRadioGroup by using getElementsByName method if the radio group is inside a page
			   Set objRadioGroup = g_objBrowserPage.Object.getElementsByName(strRadioGroupName)
			   'Check the number of radio button inside the group in page level
				If objRadioGroup.Length < 1 Then
						'Report fail if the radio group is not available.
						reporterReportEvent "Failed",strReportStepLabel,"Radio group having name '"&strRadioGroupName& "' doen't exist in the application."
				End If
				'Check the button index is less than total nuber button in the group
			   If Cint(intRadioButtonIndex) > objRadioGroup.Length-1 Then		
					'Report the status as failed if the radio button is invalid
					reporterReportEvent "Failed",strReportStepLabel,"Radio button Index '"&intRadioButtonIndex&"' is greater than the existing number of Radio button.Please pass a valid index "
				'Check the radio button in radio group is Enabled or not
			   ElseIf Not objRadioGroup(Cint(intRadioButtonIndex)).Disabled Then
					'Report the status as passed if the radio button is Enabled
					reporterReportEvent "Passed",strReportStepLabel,"Radio button inside the radio group '"&strRadioGroupName& "' having Index value '"&RadioButtonIndex&"' is Enabled "
				Else
					'Report the status as failed if the radio button is Disabled
					reporterReportEvent "Failed",strReportStepLabel, "Radio button inside the radio group '"&strRadioGroupName& "' having Index value '"&RadioButtonIndex&"' is Disabled "	
			   End If
			Else
				'Report the status as fail if the radio button index is non numeric
				reporterReportEvent "Failed",strReportStepLabel,"Radio button Index '"&intRadioButtonIndex&"' is non numeric value.Please pass numeric Value "
			End If
End Sub


'################################################################################################################################################
'Name :  webVerifyValuesEqual
' PURPOSE: To test web elements default value and expected value from data dictionary are equal
'PARAMETERS:
'		INPUT :
'					ScreenName_ObjectName:  Reference to a value stored in the Object Repository
'					DDReference: Reference to a value stored in the Data Dictionary
'		OUTPUT : None
'HISTORY
'		NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'    Manjunath                   03/07/2013            To test web elements default value and expected value from data dictionary are equal
'################################################################################################################################################
Sub webVerifyValuesEqual(ScreenName_ObjectName,DDReference)
		'Call below component to get the object value from AUT during runtime
	   strActualValue=webGetReturnElementValue(ScreenName_ObjectName)
		'Get the referance value from data dictionary for the parameter DDReference
	   strExpectedValue=ddGetItem(DDReference)
	   'Call bellow component to compare the actualvalue and expected value are equal and assign return value to variable
		blnValuesEqual=testCompareValues(strActualValue,strExpectedValue,True)
		'Verify the boolean value is true/false
		If blnValuesEqual Then			
			'Report the status as pass if DDReference value and element default values are equal
reporterReportEvent "Passed","WebTest Library ---> webVerifyValuesEqual","Expected DDreference and Element default values are equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Element "& ScreenName_ObjectName & " Default value is "&strActualValue
		  Else
			'Report the status as fail if DDReference value and element default values are not equal
reporterReportEvent "Failed","WebTest Library ---> webVerifyValuesEqual","Expected DDreference and Element default values are not equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Element "& ScreenName_ObjectName & " Default value is "&strActualValue
		End If
End Sub


'#############################################################################################################################################
' NAME:  webVerifyValuesInDropdown
' PURPOSE:  To verify  value(s) present in the dropdown.
' PARAMETERS:
'		INPUT
'		ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		ValuesToVerify  : String value that contains dropdown values to verify
' 		*Note:  If multiple values to verify in dropdown then each value in the ValuesToVerify Input parameter should be separated by semicolon (;)
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M		14/08/2012					NEW
'Sunil Kumar G		23/01/2013					Modified to correct the logical error
'Narasinha			   29/03/2013				   Modified error handling for weblist object verification	
'############################################################################################################################################
Sub webVerifyValuesInDropdown(ScreenName_ObjectName,ValuesToVerify)
'Get the web object based on input parameter from database/object repository
	Set objDropDown=webGetObject(ScreenName_ObjectName)
	'Verify that supplied object is a "weblist" to perform the operation on the same
	If UCase(Trim(g_strObjectType))="WEBLIST" Then
		'Get the Inputparameter from Dictionary if exists.
		ItemsToVerify=ddGetItem(ValuesToVerify)
		'Get all the items from the dropdown
		strExtractActualValues=objDropDown.GetROProperty("all items")
		'Perform split  operation All items will be separated by  semicolon
		arrExpectedValues=Split(ItemsToVerify,";")
		'Declare the boolean flag
		blnValueVerified=True
		'Iterate through each items in the array
		For Each strItemvalue In arrExpectedValues
			' verify the existance of  the expected item in the dropdown
			If InStr(1,strExtractActualValues,strItemvalue)=0 Then
				'Set boolean value to False
				blnValueVerified=False
				Exit For
			End If
		Next
		'Verify values exist in the dropdown object
		If blnValueVerified Then
			'Report as passed  if the expected items exist in the dropdown
			reporterReportEvent "Passed","WebTest Library--->webVerifyValuesInDropdown ","Expected values "& ItemsToVerify &" All items exists in the dropdown "&ScreenName_ObjectName
		Else
			'Report the status as Failed  if the expected items doesn't exist in the dropdown
			reporterReportEvent "Failed","WebTest Library--->webVerifyValuesInDropdown ","Expected items "& ItemsToVerify & " Item value: "& strExtractActualValues & " doesn't exist in the dropdown "&ScreenName_ObjectName
		End If
	Else
		'Report the status as Failed if object type is not a webtable
		reporterReportEvent "Failed","WebTest Library--->webVerifyValuesInDropdown ","The object supplied '"& ScreenName_ObjectName &"' is not a webList and the actual Object type is "& g_strObjectType
End If
End Sub


'################################################################################################################################################
'Name :  webVerifyValuesNotEqual
' PURPOSE: To test web elements default value and expected value from data dictionary are not equal
'PARAMETERS:
'		INPUT :
'					ScreenName_ObjectName:  Reference to a value stored in the Object Repository
'					DDReference: Reference to a value stored in the Data Dictionary
'		OUTPUT : None
'HISTORY
'		NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Manjunath                   03/07/2013            To test web elements default value and expected value from data dictionary are not equal
'################################################################################################################################################
Sub webVerifyValuesNotEqual(ScreenName_ObjectName,DDReference)
		'Call below component to get the object value from AUT during runtime
		strActualValue=webGetReturnElementValue(ScreenName_ObjectName)
		'Get the referance value from data dictionary for the parameter DDReference
		strExpectedValue=ddGetItem(DDReference)
		'Call bellow component to compare the actualvalue and expected value are not equal and assign return value to variable
		blnValuesNotEqual=testCompareValues(strActualValue,strExpectedValue,True)
		'Verify the boolean value is true/false
		If blnValuesNotEqual Then			
			'Report the status as fail if DDReference value and element default values are  equal
reporterReportEvent "Failed","WebTest Library ---> webVerifyValuesNotEqual","Expected DDreference and Element default values are equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Element "& ScreenName_ObjectName & " Default value is "&strActualValue			
		  Else
			'Report the status as pass if DDReference value and element default values are not equal
reporterReportEvent "Passed","WebTest Library ---> webVerifyValuesNotEqual","Expected DDreference and Element default values are not equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Element "& ScreenName_ObjectName & " Default value is "&strActualValue
		End If
End Sub


'################################################################################################################################################
'Name :  webVerifyValuesPartialMatch
' PURPOSE:  To test web elements default value and expected value from data dictionary are partialy equal
'PARAMETERS:
'		INPUT :
'			ActualValue:		  Text that contains value to be compared (String,Integer,boolean)
'			DDReference:  		Reference to the data dictionary record that contains the expected value to match partially.
'		OUTPUT : None
'HISTORY
'		NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath                   03/07/2013             New
'################################################################################################################################################
Sub webVerifyValuesPartialMatch(ScreenName_ObjectName,DDReference)
		'Call below component to get the object value from AUT during runtime
	   strActualValue=webGetReturnElementValue(ScreenName_ObjectName)
		'Get the referance value from data dictionary for the parameter DDReference
	   strExpectedValue=ddGetItem(DDReference)
		'Call bellow component to compare the actualvalue and expected value are partialy equal and assign return value to variable
		blnValuesPartialMatch=testCompareValues(strActualValue,strExpectedValue,False)
		'Verify the boolean value is true/false
		If blnValuesPartialMatch Then			
			'Report the status as pass if DDReference value and element default values are equal
reporterReportEvent "Passed","WebTest Library ---> webVerifyValuesPartialMatch","Expected DDreference and Element default values are partialy equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Element "& ScreenName_ObjectName & " Default value is "&strActualValue
		 Else
			'Report the status as fail if DDReference value and element default values are not equal
reporterReportEvent "Failed","WebTest Library ---> webVerifyValuesPartialMatch","Expected DDreference and Element default values are not partialy equal,Expected DDreference value is: "&strExpectedValue &Chr(13) &" Element "& ScreenName_ObjectName & " Default value is "&strActualValue
		End If		
End Sub


'#############################################################################################################################################################
' NAME: webWaitUntilElementToDisappear
' PURPOSE:  This Sub makes the control to wait until the required (loading) element (object) disappear(close) completely. This function helps in object level synchronization.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains reference to the webtable object stored in the object repository
'		OUTPUT : None
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				01/30/2014				NEW
'Lakshman Kumar A.H.     14/03/2014					Removed Error Handling Initialization.
'#############################################################################################################################################################
Sub webWaitUntilElementToDisappear(ScreenName_ObjectName)	
		' PREREQUISITE CODE
		' 1) Declarations
		' ##############################################################
		Dim intWaitTime 'Integer that contains the wait time counter
		Dim objWebElementToDisappear  'Object that contains created object hierarchy for the supplied object
		Dim strReportStepLabel   'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
		strReportStepLabel="Web Library --->webWaitUntilElementToDisappear"
		' 2) Initialize Error Handling
		'##' On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		'##On Error Resume Next
		'##' Clear Error
		'##Err.Clear
		' END PREREQUISITE CODE
		'**************************
		' BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
		' 2) Verify the ScreenName_ObjectName table is not empty
		If Trim(ScreenName_ObjectName)<>"" Then
			' 3) Initializing Wait Time
			intWaitTime=0
			' 4) Call webGetObjectHierarchy component to get the object hierarchy for the supplied object
			Set objWebElementToDisappear= webGetObjectHierarchy(ScreenName_ObjectName)  		
		   ' 5) Repeat loop until the supplied(loading) element (object) close completely/until 150 seconds
			Do Until Not(objWebElementToDisappear.Exist(1)) Or intWaitTime=150			
				' Check the object hidden status ,if its true then exit the loop as the object exist in background                      			
				If webIsElementHidden(objWebElementToDisappear) Then				
					Exit Do
				End If
				'Wait for 1 sec
				Wait 1
				' Increment counter time
				intWaitTime=intWaitTime+1
			Loop
			' 6)Report the script status once the counter equal the value 150
			' If the Specified Element is not disappearing (close) completely in 150 sec		
			' o	150 seconds has transpired (fail scenario).
			If intWaitTime=150 Then
				reporterReportEvent	"Failed",strReportStepLabel,"Passed element : '"& ScreenName_ObjectName &"' still exist on the screen (max wait 150 seconds)."
				' RAC 3) •	If the object is not visible from beginning, give warning to user, execution should continue.
			ElseIf intWaitTime=0 Then
				reporterReportEvent	"Warning",strReportStepLabel,"Passed element : '"& ScreenName_ObjectName &"' not visible to wait for disappearance."
			Else
				' RAC 2)•	Once the object disappears, execution should continue
				reporterReportEvent	"Done",strReportStepLabel,"Passed element : '" &ScreenName_ObjectName&"' disappeared (close) successfully"
			End If   		
		Else
			' 2)  Report the status as fail if ScreenName_ObjectName is empty
			reporterReportEvent "Failed",strReportStepLabel,"An empty 'ScreenName_ObjectName' is passed to the component. ScreenName_ObjectName value is "&_
			"required. Please enter a valid ScreenName_ObjectName value and execute again"
		End If
End Sub


'#############################################################################################################################################################
' NAME: webWaitUntilElementToLoad
' PURPOSE:  This Sub makes the user wait until the required element (object) loads completely. This function helps in object level synchronization.
' PARAMETERS:
'		INPUT
'			ScreenName_ObjectName : String that contains the object name that refers to the value in the data dictionary or refers to the object properties from object repository.
'		OUTPUT : None
'HISTORY
'NAME:									DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				09/17/2013				NEW
'Manjunath L M				10/16/2013		Modified to include the component webIsElementExists &
'																	Removed the second parameter blnExists for the component webIsElementExists
''Lakshman Kumar A.H.     14/03/2014					Removed Error Handling Initialization
'#############################################################################################################################################################
Sub webWaitUntilElementToLoad(ScreenName_ObjectName)
	'PREREQUISITE CODE
		'CODE MODIFICATION
		'10/16/2013  Manjunath  Modified to get only exist status by using webGetObjectHierarchy and removing the parameter blnExists
			'1) Declarations
			'##############################################################
			'##Dim strwebClass 	         'String that  contains Class Name of the object
			'##Dim strPropertyName1   'String that  contains Property Name1 of the object
			'##Dim strPropertyValue1   'String that  contains Property Value1 corresponding to the PropertyName1 of the object
			'##Dim strPropertyName2   'String that  contains Property Name2 of the object
			'##Dim strPropertyValue2	'String that  contains Property Value2 corresponding to the PropertyName2 of the object
														' by default value it is string so prefixed with str		
			'##Dim objWebElementToWait  'Object that contains created hierarchy object(ex;B().P().webEdit())
			Dim blnElementLoad 'Boolean that contains the object exist status.
			'2) Initialize Error Handling
			'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
			'##On Error Resume Next
			'##'Clear Error
			 '##Err.Clear
			'END PREREQUISITE CODE
			'**************************
			'BEGIN FUNCTION IMPLEMENTATION
			'###############################################################
				
			   '##'3)Call ddGetObjectProperties to get the properties for the object supplied in ScreenName_ObjectName
				'##ddGetObjectProperties ScreenName_ObjectName
				'##'Get the propertynames and propertyvalues in declared variable .
				'##strwebClass=g_strObjectType
				'##strPropertyName1=g_strPropertyName1
				'##strPropertyValue1=g_strPropertyValue1
				'##strPropertyName2=g_strPropertyName2
				'##strPropertyValue2=g_strPropertyValue2
				'##'4)Create the object hierarchy for the obtained object
					'##strPropertyDescription=strPropertyName1&":="&strPropertyValue1
					'##'Verify the  property name2 and value2 are not null
					'##If  strPropertyName2 <>"" And strPropertyValue2 <> "" Then
						'##'Create the property description by using the supplied property names and values
						'##strPropertyDescription=strPropertyDescription&Chr(34)&","&Chr(34)&strPropertyName2&":="&strPropertyValue2
					'##End If
					'##'Setting the current page object to construct the object hierarchy
					'##webSetPage	
					'##'Create the object hierarchy
					'##Execute "Set objWebElementToWait=g_objBrowserPage."&strwebClass&Chr(40)&Chr(34)&strPropertyDescription&Chr(34)&Chr(41)
				'##'5)  Verify for the error occurance
				'##If Err.Number=0 Then
					'##'Report as done as there was no error occured  while creating the object hierarchy
					'##reporterReportEvent "Done","Web Library-->webWaitUntilElementToLoad", "Object hierarchy created successfully for the supplied object : "&ScreenName_ObjectName
				 '##Else
					'##'Report as Failed as there was error occured  while creating the object hierarchy
					'##reporterReportEvent "Failed","Web Library--->webWaitUntilElementToLoad","Failed to create Object hierarchy for the supplied object : "&ScreenName_ObjectName&Chr(13)&" due to the reason "&Err.Description& " .Please contact Automation Team ."
				'##End If 		
			'3) Call webIsElementExists component to get the object exist status
blnElementLoad=webIsElementExists (ScreenName_ObjectName)
				'##'6) Wait the supplied object load by verifying the exist method of the created object
'4) Verify the status in blnElementLoad
				'##If objWebElementToWait.Exist(100) Then
				If  blnElementLoad Then		
		'END CODE MODIFICATION
		'#################################
					'Report done as the object supplied exist in the application
					reporterReportEvent "Done","Web Library-->webWaitUntilElementToLoad", "The supplied object: "&ScreenName_ObjectName&" exist/loaded successfully in the opened application" 			
				Else
					'Report fail as the object supplied does not exist in the application
					reporterReportEvent "Failed","Web Library--->webWaitUntilElementToLoad","Failed to load the object supplied: "&ScreenName_ObjectName&Chr(13)&" due to the performance issue (max wait 100 seconds) of the application "
			End If
End Sub


'#################################################################################################################
' NAME: webWaitUntilPageRefresh
' PURPOSE:  This Sub makes the user wait until the required browser page loads completely. This function helps in synchronisation
' PARAMETERS:
'		INPUT
'			objBrowserPage - Browser and page object
'		OUTPUT : None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Anil						17/09/2012				NEW
'Manjunath 			09/18/2013			Modified to use Lcase while comparing the ready state and if readystate is not complete within
															'100 seconds  report the status as  failed due to performance of browser to load
'Lakshman Kumar A.H.     21/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#################################################################################################################
Private Sub webWaitUntilPageRefresh(objBrowserPage)
		''PREREQUISITE CODE
		'1) Declarations
		'##############################################################
		Dim intWaitTime 'Integer that contains the wiat time counter
		'2) Initialize Error Handling
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear Error
		Err.Clear
		'END PREREQUISITE CODE
		'**************************
		'BEGIN FUNCTION IMPLEMENTATION
		'###############################################################
	'3) To synchronize browser and page object
		objBrowserPage.Sync
	   '4) Initializing Wait Time
	   intWaitTime=1
	   '######################################
		'CODE MODIFICATION
		'09/18/2013  Manjunath L M  Modified to use Lcase while comparing the ready state and if readystate is not complete within 100 seconds
															'report the status as  failed due to performance of browser to load
	   '5) Repeat loop until the browser page status is complete
	   '##While objBrowserPage.Object.ReadyState<>"complete" And intWaitTime<>60
		Do Until Lcase(objBrowserPage.Object.ReadyState) = "complete" Or intWaitTime=100
		'END CODE MODIFICATION
		'#################################
			Wait 1
			'Increment counter time
			intWaitTime=intWaitTime+1
		Loop
'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'6)Report the script status on error once the counter exceeds the value 60
		If intWaitTime=100 Then
			reporterReportEvent	"Failed","Web Library --->webWaitUntilPageRefresh","Failed due to application performance (max wait 100 seconds)."
		End If
End Sub


'#########################################################################################################################################
' NAME: webCreateFirefoxUserProfile
' PURPOSE:  To create firefox browser profile with machine name and user name.
' PARAMETERS:
'				INPUT:	
'							None
'				OUTPUT:
'							Component can be create firefox profile  and added dictionary object
'HISTORY
'NAME:								DATE:					PURPOSE
'--------------------------------------------------------------------------------------------------------------------------------------
'Udayakumar Reddy 						04/06/2021				New
'#########################################################################################################################################

Private Function webCreateFirefoxUserProfile()
	
	'PREREQUISITE CODE
	'1) Declarations
	'##############################################################
	'##'2) Initialize Error Handling
	strReportStepLabel = "Web Browser Library--->webCreateFirefoxUserProfile"
	'##'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error	
	On Error Resume Next
	'Clear the Error
	Err.Clear	
	'END PREREQUISITE CODE
	'##############################################################
	
	'###############################################################
	'BEGIN FUNCTION IMPLEMENTATION
	Set wshShell = CreateObject( "WScript.Shell" )
	hostname = wshShell.RegRead( "HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Hostname" )
	username = wshShell.ExpandEnvironmentStrings( "%USERNAME%" )
	pcname_username=hostname&"_"&username&"_Profile"
	
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	If NOT (objFSO.FolderExists("C:\Users\"&username&"\AppData\Local\Mozilla\Firefox\Profiles")) Then
	    ' Create Profiles folder
	    objFSO.CreateFolder("C:\Users\"&username&"\AppData\Local\Mozilla\Firefox\Profiles")
	    reporterReportEvent "Passed",strReportStepLabel, "Profiles folder doesn't exists at path C:\Users\"&username&"\AppData\Local\Mozilla\Firefox\ , it has been created successfully now"
	End If
	
	Set objFolder = objFSO.GetFolder("C:\Users\"&username&"\AppData\Local\Mozilla\Firefox\Profiles")
	Set objSubFolders = objFolder.SubFolders
	 fldcount=objSubFolders.Count
	 flgProfileExist = False
	If fldcount<>0 Then
		For each objSubFolder In objSubFolders
		    If instr(objSubFolder, pcname_username) Then
		    	reporterReportEvent "Done",strReportStepLabel,"'"&pcname_username&"' profile already exists."
		    	flgProfileExist = True
		    	Exit for
		    End If
		Next
		If flgProfileExist = False Then
			wshShell.Run("firefox -CreateProfile "& pcname_username &" -no-remote")
		End If
	Else
		wshShell.Run("firefox -CreateProfile "& pcname_username &" -no-remote")
	End If
	
	errNumber = Err.Number
	errDescription = Err.Description
	
	'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Verify error occured while creting friefox profile instance
		If errNumber =0 Then
			If flgProfileExist = False Then
				reporterReportEvent "Passed",strReportStepLabel,"'"&pcname_username&"' profile created successfully."				
			End If
			ddAddItem "FirefoxUserProfile",pcname_username																	
		Else
			'Report the status as Failed and  error description
			reporterReportEvent "Failed",strReportStepLabel,"Failed to create firefox browser profile instance, "&" Reason: "& errDescription			
		End If
	
	Set objSubFolders =Nothing
	Set objFolder =Nothing
	Set objFSO =Nothing
	Set wshShell=Nothing
	
	'END CODE MODIFICATION
'#############################################################################
End Function


'##########################################################################################
' NAME:  winMapNetDrive
' PURPOSE:  To map network drive to network path supplied to this function
' PARAMETERS:
'		INPUT      :
'						DDDriveLetter : String that contains key reference to DriveLetter in the Data dictionary.
'						DDRemoteDriveAddr : String that contains key reference the network path in Data dictionary.
'	   OUTPUT :
'						None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Udayakumar Reddy         07/13/2020              NEW
'##########################################################################################

Function winMapNetDrive(DDDriveLetter, DDDrivePath)

	On error resume  next
	'	'Get information from Data Dictionary
		drivePath = Trim(ddGetItem(DDDrivePath))
		driveLetter= UCase(Trim(ddGetItem(DDDriveLetter)))
		CmdCommand = "NET USE"
		
	Set objShell = CreateObject("WScript.Shell")
		
	If driveLetter<>"" and driveLetter<>"NA"  Then
		driltrstatus=true
		
			If drivePath<>"" and drivePath<>"NA" Then
				dripathtatus=true
					If not len(driveLetter)>=2 and IsNumeric(driveLetter)=False Then
						drivecharstatus=true
					Else
						reporterReportEvent "Fail","Windows Library-->winMapNetDrive", "Drive Letter should not be greater than 1 letter and should not numeric, please provide valid one character."
					End If	
				Else
					reporterReportEvent "Fail","Windows Library-->winMapNetDrive", "Drive Path should not Empty, please provide valid drive path."
			End If
		Else
			reporterReportEvent "Fail","Windows Library-->winMapNetDrive", "Drive letter should not empty, please provide valid Letter."
	End If	

	If driltrstatus=true and dripathtatus=true and drivecharstatus=true Then
		cmdline="cmd /K "&CmdCommand&" "&driveLetter&":"&" "&Chr(34)& drivePath &Chr(34)&" &&exit"
		reporterReportEvent "Done","Windows Library-->winMapNetDrive","Command line is  "& cmdline
		cmdlinestatus=true

	End If

	If cmdlinestatus=true Then
			
		Set objNetwork = CreateObject("WScript.Network")
		Set CheckDrive = objNetwork.EnumNetworkDrives()
		AlreadyConnected = False
		For intDrive = 0 To CheckDrive.Count - 1 Step 2
			If CheckDrive.Item(intDrive)=driveLetter&":" Then	
				reporterReportEvent "Done","Windows Library-->winMapNetDrive", driveLetter&": drive already exists."
				AlreadyConnected=true
					Exit for
			End If
		Next	
			
		If AlreadyConnected=true Then			
			Err.Clear			
			delcmd="cmd /K "& CmdCommand &" "& driveLetter &": /Delete /Yes &&exit"	
			Set objShellExec = objShell.Exec(delcmd)
			delcmdStatus= objShellExec.StdOut.ReadAll	
			If instr(delcmdStatus, driveLetter&": was deleted successfully") = 1 Then
				reporterReportEvent "Done","Windows Library-->winMapNetDrive", driveLetter&": was Drive deleted successfully."
			else
				reporterReportEvent "Failed","Windows Library-->winMapNetDrive","Could not delete Drive" &"Error Message: "& delcmdStatus
			End If
		End If
		
		Set CheckDrive = nothing
		Set objNetwork = nothing
		Err.Clear
		objShell.Exec(cmdline)
		Set objShell= nothing
		wait 5
		Set objNetwork = CreateObject("WScript.Network")
		Set CheckDrive = objNetwork.EnumNetworkDrives()
		drivemappedstatus = False
		
		For intDrive = 0 To CheckDrive.Count - 1 Step 2	
			If CheckDrive.Item(intDrive)=driveLetter&":" Then	
				drivemappedstatus=true
					Exit for
			End If
		Next
		
		If drivemappedstatus=true Then
			reporterReportEvent "Pass","Windows Library-->winMapNetDrive","Mapped  "& drivePath &" Network Address to "&driveLetter &" drive successfully."
			else
			reporterReportEvent "Failed","Windows Library-->winMapNetDrive","Could not map Drive to "& drivePath &" Please provide valid network path."	
		End If
				
	End If	
	
	Set objShellExec= nothing
	Set objShell= nothing
	Set CheckDrive = nothing
	Set objNetwork = nothing
	
End Function



'#########################################################################################################
' NAME:  winObjectVerifyTextExists
' PURPOSE: To verify the text value displayed on the application for window object (Graph).
' PARAMETERS:
'		INPUT:		
'                   ScreenName_ObjectName : String that contains reference to the Window object stored in the object repository
'					strInputText : String that contains to verify the value on the application(it can be a 'data dictionary' input or a normal string input)
'		OUTPUT : 	
'				  True/False
'Pre-Requisite: Check the Activex Addin in UFT before using this Function
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Murali      					09/26/2016					NEW
'#########################################################################################################


Sub winObjectVerifyTextExists(ScreenName_ObjectName,strInputText)

Dim arrDataValues         'Array that contains all the strInputText values

'On Error Resume Next' causes execution to continue with the statement immediately following the statement that caused the run-time error
On Error Resume Next
Err.Clear
'#############################################################################
'Call webGetObjectHierarchy component to get the object hierarchy for the supplied object
Set winObjectHierarchy=webGetObjectHierarchy(ScreenName_ObjectName)

'Store the generated run time error number and error description in variables.
errNumber = Err.Number
errDescription = Err.Description
'Clear the error.
Err.Clear
'Ends the Error Handling Scope.
		If errNumber<>0 Then
reporterReportEvent "Failed","Windows Library ---> winObjectVerifyTextExists","Browser does not exist in the desktop Reason:="&" "&errDescription
End If

'###########################################################################

'Verify the Object existence for 100 sec and return the status to the component
If  winObjectHierarchy.Exist(100) Then

'Verify the strInputText is empty or not
If Not isEmpty(Trim(strInputText)) and strInputText<>empty Then

'verify the straInputText has pipeline or not
If InStr(1,strInputText,"||")>0 Then
'split the strInputText based on delimiter
									arrDataValues=Split(strInputText,"||",-1,vbTextCompare)
												
						Else
						        'assigning the strInputText to arrDataValues array
									ReDim arrDataValues(0)
									arrDataValues(0)=Trim(strInputText)
						End If
						
						'Iterate through each index of arrDataValues
						For Itm=0 to UBound(arrDataValues)
						
						'getting the data dictionary value
						arrDataValues(Itm)=ddGetItem(arrDataValues(Itm))
						
						'verifying if the array values is empty
						  If len(trim(arrDataValues(Itm)))>0 Then
						
'verifying the text exists or not
blnTextEqual = winObjectHierarchy.GetTextLocation(Trim(arrDataValues(Itm)),-1,-1,-1,-1,TRUE)

'verify the blnTextEqual is true/false
If blnTextEqual Then

'Report the status as passed when inputstring is exists in the application
reporterReportEvent "Passed","Windows Library ---> winObjectVerifyTextExists","Value is:'"&arrDataValues(Itm)&"' found in the application for supplied object: '"&ScreenName_ObjectName&"'"


Else
'Report the status as failed when input string is not available in the opened application
reporterReportEvent "Failed","Windows Library ---> winObjectVerifyTextExists","Value is:'"&arrDataValues(Itm)&"' is not Found in the application for supplied object: '"&ScreenName_ObjectName&"'"

End If

Else

'Report the status as failed when inputstring is empty
reporterReportEvent "Failed","Windows Library ---> winObjectVerifyTextExists","Value is:'"&arrDataValues(Itm)&"' empty, please verify the passed value for supplied object: '"&ScreenName_ObjectName&"'"	

Exit for

End If

Next


Else
'Report the status as failed when inputstring is empty

reporterReportEvent "Failed","Windows Library ---> winObjectVerifyTextExists","Value is:'"&strInputText&"' empty, please verify the passed value for supplied object: '"&ScreenName_ObjectName&"'"
End If

else

'Report the status as failed when supplied ScreenName_ObjectName is not exist
reporterReportEvent "Failed","Windows Library ---> winObjectVerifyTextExists","The supplied object: '"&ScreenName_ObjectName&"' does not exist in the opened application"

End If

'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0

End Sub


'####################################################################################
' NAME :  xlCloseAllExcelFile
' PURPOSE: To Close all the Excel file opened
' PARAMETERS:
'		INPUT:None			
'		OUTPUT:None			
'HISTORY
'         NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Manjunath L M                   02/26/2014              New
'####################################################################################
Private Sub xlCloseAllExcelFile
' "On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	'Get all the running EXCEL.exe proccess
strComputer = "."
	Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
	Set colProcessList = objWMIService.ExecQuery ("Select * from Win32_Process Where Name = 'EXCEL.exe'")
	'Close each EXCEL.exe
	For Each objProcess in colProcessList
		objProcess.Terminate()
	Next
End Sub


'###############################################################################################################################################################
'NAME :  xlGetAllWorksheetNames
' PURPOSE: To get all the work sheets name in a variable of the supplied workbook, each work sheet name separated by delimiter (;).
'PARAMETERS:
'		INPUT:
'			objWorkbook : Object that contains workbook of the Excel file
'		OUTPUT:
'		xlGetAllWorksheetNames : String that contains sheets name (each sheet name is separated by delimiter semi colon (;))from which the data will be loaded to data dictionary
'HISTORY
'NAME:							DATE:						PURPOSE
'-----------------------------------------------------------------------------------------------------
' Manjunath L M	     07/31/2013					NEW
'###############################################################################################################################################################
Private Function xlGetAllWorksheetNames (objWorkbook)
		'Iterate from the second sheet of the test script
		For i = 1 to objWorkbook.Sheets.Count
			'Get the sheet names in a variable SheetName, each sheet will be separated by delimiter semi colon (;)
			tempXLSheetName = objWorkbook.Sheets.Item(i).Name&";"&tempXLSheetName
		Next
		'Return sheets name to component.
		xlGetAllWorksheetNames =Left(tempXLSheetName,Len(tempXLSheetName)-1)
End Function


'##############################################################################################################################
' NAME : xlGetWorkbookName
' PURPOSE: To get the work book name from which the data will be loaded to data dictionary depends on the supplied parameter FileName
'PARAMETERS:
'		INPUT:
'				FilePath : String that contains path of the Excel file to be loaded to data dictionary.
'		OUTPUT:
'               xlGetWorkbookName : String that contains workbook  name from which the data will be loaded to data dictionary
'HISTORY
'		NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  Manjunath L M			07/31/2011				NEW
'##############################################################################################################################
Private Function xlGetWorkbookName ( FilePath )
	'Verify whether passed file path is default or external which is used open a worksheet
	If Trim(FilePath) = "" Or IsEmpty(FilePath)   Then
		'Supplied file path is default then return default work book name (QTP Environment 'TestDir' parameter contains the default file path of the script) to component
		xlGetWorkbookName=Trim(Environment.Value("TestDir")& "/Default.xls")              	
	Else
		'Supplied file path is external, return the same work book name to component
		xlGetWorkbookName=Trim(FilePath)      	
	End If
End Function


'#########################################################################################################
'NAME :  xlGetWorksheetName
' PURPOSE: To get the work sheet /sheets name from which the data will be loaded to data dictionary depends on the supplied parameter SheetName.
'PARAMETERS:
'		INPUT:
'			objWorkbook :Object that contains workbook of the Excel file
'			FilePath:	String that contains path of the Excel file to be loaded to data dictionary .
'			SheetName:  String that contains name of the worksheet within the Excel file.
' 			        **note: To load default Excel file and default action sheet of the script, pass 'null' value .To load all the sheets from the Excel file ,pass ALL
'									To load the specified sheets pass sheets name with the delimiter semi colon (;) separated
'		OUTPUT:
'		xlGetWorksheetName :String that contains sheet/sheets name from which the data will be loaded to data dictionary
'HISTORY
'NAME:							DATE:						PURPOSE
'-----------------------------------------------------------------------------------------------------
' Manjunath L M	     07/31/2013					NEW
' Manjunath L M       02/20/2014			Modified to return the sheet index inplace of default sheet name for defalt sheet
'####################################################################################################
Private Function xlGetWorksheetName (objWorkbook,FilePath,SheetName)
	'Verify SheetName parameter is having value equal to ALL ,if so get all the sheets name
	If Ucase(Trim(SheetName))="ALL"  Then
		'Call component xlGetAllWorksheetNames to get the all the sheets name present in the excel workbook
		xlGetWorksheetName = xlGetAllWorksheetNames ( objWorkbook )'and return  the same to component
		'Verify SheetName parameter is having some value ,if so return the supplied sheet/sheets name
	ElseIf Trim(SheetName)<>"" Then 	
		'Get the supplied sheet/sheets name
		xlGetWorksheetName = Trim( SheetName)'and return  the same to component
	Else
		'Verify the file path supplied is default.xls of the script ,if so get the action name sheet to be loaded to data dictionary
		If InStr(1,LCase(FilePath),"/default.xls")>0 Then
		'################################
		'CODE MODIFICATION
		'02/20/2014  Manjunath  Modified to return the sheet index inplace of default sheet name for defalt sheet
				'##Verify Sheet name consist of square braces in default .xls (if we are calling external action into the test,called action name will consist of ' [ ' and ' ] ' braces)
				' ##example : AddProduct[AddProduct] ) hence we have used below code
				'##If InStr(1,Environment("ActionName"),"[")>0 and InStr(1,Environment("ActionName"),"]")>0 Then
					'##Square braces are replaced by flower braces while importing default sheet  name in QTP
					'##tempXLSheetName = Replace(Replace(Environment("ActionName"),"[","{"),"]","}")
				'##Else
					'##if sheet name does not consist of square braces then assign sheet name as action name only
					'##tempXLSheetName = Environment("ActionName")
				'##End If			
				'##Excel file sheet name can consist of maximum of 31 characters.Hence we have used the below code
				'##If Len(tempXLSheetName)>31 Then
					'##Take up the maximum 31 characters from sheet name and return the same to component
					'##xlGetWorksheetName=Left(tempXLSheetName,31)
				'##Else
					'##File sheet name is les then the 31 characters then return  the same to component
					'##xlGetWorksheetName=tempXLSheetName
				'##End If
			'Assign second("Action1") sheet to the variable and return  the same to component
			xlGetWorksheetName = 2		
		'END CODE MODIFICATION
		'#################################
		'File specified is not a default sheet of the test script then assign first(1) sheet to be loaded to data dictionary
		Else
			'Assign first sheet to the variable and return  the same to component
			xlGetWorksheetName = 1			
		End If		
	End if	
End Function


'#############################################################################################################
'NAME :  xlLoadExcelData
' PURPOSE: To Load the  Excel file data to the dictionary and to copy(import) the data from the  scripts action (template)
'					sheet("Example:Action1") to all the called external action (template) sheets .
'PARAMETERS:
'		INPUT:
'			FilePath:	(Optional) String that contains path of the Excel file to be loaded to data dictionary .
'			SheetName:  (Optional)String that contains name of the worksheet within the Excel file.
' 			        **note: To load default Excel file and default action sheet of the script, pass 'null' value .To load all the sheets from the Excel file ,pass ALL
'									To load the specified sheets pass sheets name with the delimiter semi colon (;) separated
'		OUTPUT:None			
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  C.MCMILLAN	   	  	08/12/2011					NEW
'    ANIL 						08/23/2012					Modified the component to handle the sheet name length to 31characters.
'	Manjunath L M		   08/01/2013                 Modified to hadle the loading of multiple sheets to data dictionary
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#############################################################################################################
Function xlLoadExcelData (FilePath, SheetName)	'As boolean
	'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	'Define the below variables which is used internally in the functrion to retrive a data from Excel file and add to data dictionary
	Dim intColumn					'Integer that contains column position
	Dim blnDataInRow 			'Boolean value
	Dim intRow						'Integer that contains row position
	'Call xlGetWorkbookName to get the work book name from which the data will be loaded to data dictionary
	xlFilePath=xlGetWorkbookName(FilePath)
	'Call  xlOpenWorkbook  to create workbook object for the supplied FilePath
	Set objWorkbook = xlOpenWorkbook (xlFilePath)
	'Call xlGetWorksheetName to get the work sheet/sheets name from which the data will be loaded to data dictionary
	arrXLSheetName=Split (xlGetWorksheetName (objWorkbook,xlFilePath,SheetName),";") 'store the sheet/sheets name in an array arrXLSheetName
	'Iterate through all the sheet name in a array arrXLSheetName to load the data
	For Each xlSheetName in arrXLSheetName
		'Call xlGetWorksheetName to get the work sheet/sheets name from which the data will be loaded to data dictionary
		Set xlWorksheet = xlOpenWorksheet (objWorkbook , xlSheetName )		
		xlLoadExcelData = False 'Initialize the function to false
		'Verify worksheet object is created which is used to read  the data
		If Not xlWorksheet Is Nothing Then			
			'Start at row2(as row 1 is the header row) in excel which is used to retrive cell value
			'Start at first column in excel which is used to retrieve cell value
			intColumn = 1
			blnDataInRow = True
			With xlWorksheet
				' Iterate through the rows/ columns adding data to the data dictionary
				'We want to stop adding data when a blank row is found
				Do Until blnDataInRow = False
					intRow = 2				
					blnDataInRow = False
					'Iterate all the cells in excel file untill it finds empty cell
					Do Until .Cells(intRow,intColumn).value = ""
						'If data was found notify the script so that it will continue to next row when finished (else it will stop)
						If  .Cells(intRow,intColumn).value <> "" Then		blnDataInRow = True			
							' Add item to Data Dictionary , blank cells will be added as empty string
						If Not ddAddItem (Trim(.Cells(1,intColumn).value) , Trim(.Cells(intRow,intColumn).value)) Then
							reporterReportEvent "Failed", "Data Library-->xlLoadExcelData", "Couldn't add value at Row "& intRow &" Col "& intColumn
							Exit Function
						End If
						'Increase the row count to retrive next row value in excel file
						intRow = intRow+1
					Loop
				'increase the column count to get the next column data
				intColumn = intColumn+ 1
				g_iAddIteration=0
				Loop
			End With
			xlLoadExcelData = True 'Initialize the function to True	
		End If
	Next
	'Close the workbook which is open		
	xlWorksheet.application.activeworkbook.Close()
	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0			
	If 	xlLoadExcelData Then		'Report the status depend son boolean value in xlLoadExcelData
		'report the status if data is loaded successfully
		reporterReportEvent "Done", "Data Library-->xlLoadExcelData", "Data loaded successfully into data dictionay"	
	Else
		'Report failed to open worksheet
		reporterReportEvent "Failed", "Data Library-->xlLoadExcelData", "Couldn't Open Data Worksheet :- "&xlSheetName&" ,form the filpath :- "&xlFilePath
	End If
End Function


'###########################################################################################################
' NAME : xlOpenWorkbook
' PURPOSE: Opens an Excel file and returns the object  to the user.
'PARAMETERS:
'		INPUT:
'				FilePath: String that contains path of the Excel file
'		OUTPUT:
'                xlOpenWorkbook: Object that contains workbook of the Excel file
' 				**NOTE: The user can close an opened workbook by using :workbook.close()
'HISTORY
'	NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'  C.MCMILLAN			12/2011						NEW
'###########################################################################################################
Private  Function xlOpenWorkbook(FilePath)  ' As workbook
	'Variable declaration
	Dim objExcel, objWorkbook
	 'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	'Clear the Error
	Err.Clear
	'Create Excel object instance.
	Set objExcel = CreateObject("Excel.Application")
	'Disable excel DisplayAlerts
	objExcel.DisplayAlerts=False
	'Verify error occured if Microsoft.Office.Interop.Excel.dll not installed in machine
	If Err.Number >0  Then
		'Report a warning as Microsoft.Office.Interop.Excel.dll not installed in machine
		reporterReportEvent "Warning", "Excel Library-->xlOpenWorkbook", "Excel.Application (Microsoft.Office.Interop.Excel.dll) Not Installed On this Machine"
		Exit Function
	End If
	'Clear the error if occured for Microsoft.Office.Interop.Excel.dll not installing in the machine
	Err.Clear
	'Assign objWorkbook as object  which is used to open a workbook from a particular path passed in FilePath parameter
	Set objWorkbook = objExcel.WorkBooks.Open(FilePath)
	'Verify error occured which will appears when worksheet unable to open
	If Err.Number <> 0 Then
		'Report a warning as Worksheet unable to open
		reporterReportEvent "Warning", "Excel Library-->xlOpenWorkbook", "Couldn't Open Worksheet at "& FilePath
		Exit Function
	End If
	'Assign output parameter as xlOpenWorkbook as object  which is used to open a WorkSheet from a particular path passed in FilePath parameter
	Set xlOpenWorkbook = objWorkbook
End Function


'###############################################################################################
' NAME : xlOpenWorksheet
' PURPOSE: Opens an Excel file worksheet and returns the worksheet object to user.
'PARAMETERS:
'		INPUT:
'				objWorkbook:	Object that contains workbook of the Excel file
'				SheetName:  String that contains name of the worksheet within the file
'		OUTPUT:
'				xlOpenWorksheet: Object that contains excel worksheet in the specified sheet name
'HISTORY
'NAME:					   		DATE:								PURPOSE
'-----------------------------------------------------------------------------------------------------
' C.MCMILLAN	     	 12/08/2011						NEW
'Manjunath L M		   07/31/2013                 Modified to hadle the loading of multiple sheets to data dictionary
'################################################################################################
Private Function xlOpenWorksheet(objWorkbook, SheetName) 	'As Worksheet
'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
On Error Resume Next
	'Variable declaration
	Dim objWorksheet
	'Initialize the function to boolean value False
	Set xlOpenWorksheet = Nothing
	'Verify workbook is opened from the specified file path parameter
	If Not objWorkbook Is Nothing Then		
		'Verify the sheet name specified is actually sheet number
		If IsNumeric(SheetName) Then
			'Return worksheet object to the function from specified sheet
			Set objWorkSheet = objWorkbook.Sheets(Cint(SheetName))
		 Else
			'open specified sheet name of a workbook which is used to read a data from excel file
			Set objWorkSheet = objWorkbook.Worksheets(SheetName)
		End If        	
		'Check for the error, if worksheet was not found in specified  file path report the status as warning
		If err.number <> 0 Then
			'Report a warning as Worksheet was not found in passed file path
			reporterReportEvent "Warning", "Excel Library-->xlOpenWorksheet", "Worksheet :- "&SheetName& " was not found"
			Exit Function
		End If
		'Assign a worksheet object of passed Excel file path workbook which will be used to read data from Excel file
		Set xlOpenWorksheet = objWorksheet
	End If
End Function


'#########################################################################################
' NAME:  microsoftexcel
' PURPOSE: The microsoftexcel class will provide the data library methods for interacting with excel databases.
'HISTORY
'	NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Varun V/Rashmi C					07/21/2014				New
'#########################################################################################
Class microsoftexcel
		' PREREQUISITE CODE
		' Declarations      	
		Dim objExcelDbConnection ' (Object) Excel object instance
		Dim errNumber ' (Error) Contains Number
		Dim errDescription  '  (Error) Contains description		
		Dim strReportStepLabel   ' (String) Step label for the reports (StepLabel consist of LibraryName---->ComponentName)	
		'Class_Initialize Is fired whenever the class object is instantiates
		Private Sub Class_Initialize()
		End Sub
		'Class_Terminate when the object goes out of scope or object is set to nothing
		Private Sub Class_Terminate()
		End Sub
		'######################################################################################
		' NAME:  ConnectToDataSource
		' PURPOSE:  To establish new connection to Excel database
		' PARAMETERS:
		'       INPUT:
		'			DbName: String that contains the Data source Name in the Dictionary.
					'*****************
					'User Inputs from Data dictionary/Test data file		
		'					DbName "_FilePath"	: DD Reference that contains the excel file path.
					'*****************
		'       OUTPUT: None
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Varun V/Rashmi C					07/21/2014				New
		'#########################################################################################
		Sub ConnectToDataSource(DbName)		
			' PREREQUISITE CODE
			' Declarations		
					Dim strConnectionString '(String) Connection String [Provider, Excel Filepath]
					Dim strExcelProvider   '(string) Provider for Excel database
					Dim strFilePath '(String) Excel File path
					strReportStepLabel="microsoftexcel Library--->ConnectToDataSource"					
			' END PREREQUISITE CODE
			' **************************
			' BEGIN FUNCTION IMPLEMENTATION
			' ###############################################################	
				'Get the File path from Data Dictionary and assign to a variable strFilePath
				 strFilePath = Trim(ddGetItem(DbName &"_FilePath"))
				 'Check the input file path extension is .xls or .xlsx
				 If Right(LCase(strFilePath),4)=".xls" or  Right(LCase(strFilePath),5) = ".xlsx" Then
					 'Assign the provider name to a variable strExcelProvider
					 strExcelProvider="Microsoft.ACE.OLEDB.12.0"
					' Create Excel Connection String and assign to a variable strConnectionString
					'HDR=Yes;" indicates that the first row contains columnnames, not data. "HDR=No;" indicates the opposite.
					'IMEX=1;" tells the driver to always read "intermixed" (numbers, dates, strings etc) data columns as text.
					strConnectionString="Provider="&strExcelProvider&";Data Source=" &strFilePath& ";Extended Properties=""Excel 12.0;HDR=Yes;IMEX = 1"";"
					' Initialize Error Handling
					On Error Resume Next
					' Clear Error
					Err.Clear	
					' Create a database object instance
					Set objExcelDbConnection=CreateObject("ADODB.Connection")		
					' Attempt to connect to Excel database
					objExcelDbConnection.Open strConnectionString       	
					' Verify the error occurrence, and if any suppress the errors
					errNumber=Err.Number
					errDescription=Err.Description
					On Error GoTo 0
					' If no errors while opening the Excel connection report done
					If errNumber=0 Then
						reporterReportEvent "Done", strReportStepLabel , "Successfully connected to the Excel DB for given DataBase Name: '"&DbName&"'"
					' If error number is -2147467259, report failed stating that provider or connection string is not valid
					ElseIf errNumber="-2147467259" Then
						reporterReportEvent "Failed", strReportStepLabel , "Failed to make Excel DB connection due to invalid provider or invalid connection string supplied."&_
																													"Please contact automation team"
					' Report fail for any other errors
					Else
						reporterReportEvent "Failed", strReportStepLabel ,"Failed to connect Excel data base for given connection: '"&DbName&"'"&Chr(13) &" Reason: "& errDescription &_
																													"Please contact automation team."
					End If
				Else
					'Report the status as Failed if the file path is invalid
					reporterReportEvent "Failed", strReportStepLabel ,"Input File path for '"&DbName&"_FilePath' is Null or invalid file format.Please pass a valid File path."
				End If		
		End Sub
		'#########################################################################################
		' NAME:  QueryDataSource
		' PURPOSE: Query the input sql statement for excel database and return dataset to the user
		' PARAMETERS:
		'		INPUT      :
		'				sqlQueryStatement : String that contains query statement to be executed on Excel database
		'	   OUTPUT :
		'				QueryDataSource : Object that contains the recordset
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Varun V/Rashmi C					07/21/2014				New
		'#########################################################################################
		Function QueryDataSource(sqlQueryStatement)
			' PREREQUISITE CODE
			' Declarations
			' ##############################################################			
			strReportStepLabel="microsoftexcel Library--->QueryDataSource"
			' END PREREQUISITE CODE
			' **************************
			' BEGIN FUNCTION IMPLEMENTATION
			' ###############################################################			
			'Initialize Error Handling
			On Error Resume Next
			' Clear Error
			Err.Clear
			' Execute specified sql statement and return the dataset
			Set QueryDataSource=objExcelDbConnection.Execute(sqlQueryStatement)			
			' Verify the error occurrence, and if any suppress the errors
			errNumber=Err.Number
			errDescription=Err.Description
			On Error GoTo 0
			 ' If no errors while executing query in Excel connection report done
			If errNumber=0 Then
				'Report as Done as there was no error occured  while performing query execution
				reporterReportEvent "Done" , strReportStepLabel , "The supplied query: "&sqlQueryStatement&" is executed and"&_
																											" returned the Excel dataset object successfully"                                       	
			Else
				' Report the status as Failed and  error description
				reporterReportEvent "Failed", strReportStepLabel ,"Failed to execute the query: "&sqlQueryStatement&" in  Excel data base"&_
																											" due to Reason : "&Chr(13)&errDescription
			End If
		End Function
End Class


'#################################################################################################
' NAME:  excel
' PURPOSE: The excel class will provide the data writer library methods for copying data from different source to excel
'HISTORY
'	NAME:							DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Manjunath L M				05/07/2014             		New
'#################################################################################################
Class excel
		'Class_Initialize Is fired whenever the class object is instantiates
		Private Sub Class_Initialize()
		End Sub
		'Class_Terminate when the object goes out of scope or object is set to nothing
		Private Sub Class_Terminate()
		End Sub
		'##################################################################################################################
		' NAME:  TxtWriteToFile
		' PURPOSE: Stores the data from the array, elements in array is in the form of Semicolon-Delimited key name
		'					and key value, to the first sheet of the file specified in save path
		' PARAMETERS:
		'		INPUT      :
		'				arrDDKeys_DataValues :	Array that contains element in the form of Semicolon-Delimited key name and key value
		'				SaveFilePath	:	The destination file path
		'	   OUTPUT :
		'				None
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'---------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Manjunath L M					05/07/2014             		New
		'##################################################################################################################
		Sub TxtWriteToFile(arrDDKeys_DataValues,SaveFilePath)
				'PREREQUISITE CODE
				'1) Declarations
				'##############################################################
					Dim objWorkBook 'Object that contains the workbook opened from the SaveFilePath
					Dim xlWorksheet   'Object that contains the first worksheet opened from the workbook
					Dim blnColumnHeaderToAdd 'Boolean that contains the column header status to add in worksheet
					Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
					strReportStepLabel = "Excel Library-->ExcelWriter--> TxtWriteToFile"	
					'END PREREQUISITE CODE
				'**************************
				'BEGIN FUNCTION IMPLEMENTATION
				'###############################################################
				'Open the work book from the supplied SaveFilePath
				Set objWorkBook=xlOpenWorkbook (SaveFilePath)			
				'Check the workbook is created properly or not
				If objWorkBook Is Nothing  Then
					reporterReportEvent "Failed",strReportStepLabel,"Not able to create the workbook for the supplied path: '"&SaveFilePath&"'. Please create new workbook(excel sheet) and re-run"
				End If				
				'Open the first sheet from opened workbook
				Set xlWorksheet = xlOpenWorksheet (objWorkBook , 1)
				'Remove all the content from the filepath if any
				xlWorksheet.Cells.Delete
				'Iterate through all the array elements in the arrDDKeys_DataValues
				For Each strKeysValue In arrDDKeys_DataValues
					'Divide keyname(column) and key value (cell value) by ;(; is/should used as seperator for keyname and keyvalue )
					arrDDKeysSeperatedbyKeyValue=Split(strKeysValue,";")
					'Get the column name in arrcolumnName from first element of arrDDKeysSeperatedbyKeyValue
					arrcolumnName=Split(arrDDKeysSeperatedbyKeyValue(0),"[")
					'Get the column and row position to put the data
					intColumn=1
					'Check the key name(column) existence in the sheet					
					Do Until Instr(1,arrcolumnName(0),Trim(xlWorksheet.Cells(1,intColumn).value))<>0 						
						'increment the column position
						intColumn= intColumn+ 1
						'Check the cell content is empty, if it's then exit from do and column position is used for next entry
						If  Trim(xlWorksheet.Cells(1,intColumn).value) = "" Then
							Exit Do						
						End If
					Loop
					'If column header is already there then find row position to enter the data
					If Trim(xlWorksheet.Cells(1,intColumn).value) <> "" Then
						'As column header is exist it will contains some data in 2nd row .So start from 3rd row.
						intRow = 3
						'Assign Boolean false to blnColumnHeaderToAdd, as because the column already exist
						blnColumnHeaderToAdd=False						
						'Get the row position for the data entry, by looping through the rows until we find empty cell
						Do Until Trim(xlWorksheet.Cells(intRow,intColumn).value) = ""
							'Increment the row position
							intRow=intRow+1
							Loop
					Else                             						
						'Assign Boolean  true to blnColumnHeaderToAdd, as column header not exist in the sheet
						blnColumnHeaderToAdd=True
						'Assign row position as 2
						intRow=2				
					End If
					'Check the Boolean blnColumnHeaderToAdd status.
					If blnColumnHeaderToAdd Then
						'Enter the column header as passed in first element of the arrDDKeysSeperatedbyKeyValue
						xlWorksheet.Cells(1,intColumn)=arrcolumnName(0)						
						'Make the column header font bold
						xlWorksheet.Cells(1,intColumn).Font.Bold=True				
					End If
					'Enter the value in the cell as passed in second element of the arrDDKeysSeperatedbyKeyValue
					xlWorksheet.Cells(intRow,intColumn)=arrDDKeysSeperatedbyKeyValue(1)                 			
				Next
				'Save the sheet
				objWorkBook.Save
				'Close the workbook which is open
				Set objWorkBook=Nothing
				'Call component to close all the sheets opened
				xlCloseAllExcelFile
		End Sub
		'##################################################################################################################
		' NAME:  RSWriteToFile
		' PURPOSE: Store the data from the array, elements in array is a RecordSet object, to the file specified in save path
							'RS1 is in sheet DataFrom_RecordSet1, RS2 is in sheet DataFrom_RecordSet2,RS3 is in sheet DataFrom_RecordSet3..
							'Contains sheets as many as RecordSet only.
		' PARAMETERS:
		'		INPUT      :
		'				arrDDKeys_DataValues :	Array that contains RecordSet elements
		'				SaveFilePath	:	The destination file path
		'	   OUTPUT :
		'				None
		'HISTORY
		'NAME:									DATE:				PURPOSE
		'---------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Manjunath L M					05/07/2014             		New		
		'##################################################################################################################
		Sub RSWriteToFile(arrDDKeys_DataValues,SaveFilePath)
				'PREREQUISITE CODE
				'1) Declarations
				'##############################################################
					Dim objWorkBook 'Object that contains the workbook opened from the SaveFilePath
					Dim xlWorksheet   'Object that contains the worksheet opened from the workbook
					Dim intSheetCount 'Integer contains the number of sheets existing in the workbook
					Dim intRecordSetCount 'Integer contains the number of RecordSet supplied
					Dim blnIsColumnName 'Boolean that contains the column header status to add in worksheet
					Dim strReportStepLabel  	 'String that contains the step label for the reports(StepLabel consist of LibraryName---->ComponentName)
					strReportStepLabel = "Excel Library-->ExcelWriter--> RSWriteToFile"	
					'END PREREQUISITE CODE
				'**************************
				'BEGIN FUNCTION IMPLEMENTATION
				'###############################################################
				'Open the work book from the supplied SaveFilePath
				Set objWorkBook=xlOpenWorkbook (SaveFilePath)			
				'Check the workbook is created properly or not
				If objWorkBook Is Nothing  Then
					reporterReportEvent "Failed",strReportStepLabel,"Not able to create the workbook for the supplied path: '"&SaveFilePath&"'. Please create new workbook(excel sheet) and re-run"
				End If
				'Get the sheet count from xls/xlsx file to copy each RecordSet values to each sheet
				intSheetCount=objWorkBook.Sheets.Count
				'Get the number of record set in the data array
				intRecordSetCount=Ubound(arrDDKeys_DataValues)+1
				'If the sheets are less than recordset count, add the number of sheets required
				If intRecordSetCount > intSheetCount Then						
						Set xlWorksheet=objWorkBook.Sheets
						'Add new sheets
						xlWorksheet.Add ,,intRecordSetCount-intSheetCount
				'If the sheets are more than recordset count, remove the extra sheets
				ElseIf intRecordSetCount < intSheetCount Then       			
						For intDeletSheetIndex=intSheetCount-intRecordSetCount To 1 Step-1
							objWorkBook.WorkSheets(intDeletSheetIndex).Delete							
						Next                    	
				End If
				'Initialize Error Handling
				On Error Resume Next
				'If there are any previous sheets with name "DataFrom_RecordSet", And if the user tries to rename sheets with the duplicate name ,excel will throw the error.
				'Make all the sheet names to default, This will be helpful when renaming the sheets to "DataFrom_RecordSet",
				For intDefaultName=1 To intRecordSetCount
					objWorkBook.WorkSheets(intDefaultName).Name="Default"&intDefaultName
				Next
				'Iterate through all the recordsets from the array and copy all the data from each recordset to separate sheets
				For rsIndex=0 To intRecordSetCount-1
					'Get the recordset from the array
					Set objRecordSet=arrDDKeys_DataValues(rsIndex)
					'Open the sheet from the workbook
					Set xlWorksheet = xlOpenWorksheet (objWorkBook , rsIndex+1)
					xlWorksheet.Name="DataFrom_RecordSet"&rsIndex+1
					'Remove all the content from the filepath if any
					xlWorksheet.Cells.Delete
					'Get the number of fileds (column) in the recordset
					intColumnCount=objRecordSet.Fields.Count	
					'Intiate the row and columnname status				
					intStartRow = 2
					blnIsColumnName=True
					'Iterate through all the records until EOF
					Do While Not objRecordSet.EOF				
						'Iterate through all the fields(columns)
						For ColumnIndex=0 To intColumnCount-1							
								'Check blnIsColumnName status , if yes then get the name of the column(field) and column value
								If blnIsColumnName Then									
									'Enter the column name to the excel cell					            						
									xlWorksheet.Cells(intStartRow-1,ColumnIndex+1).Value=objRecordSet.Fields.Item(ColumnIndex).Name
									'Make the excel cell(name of the column) Bold
									xlWorksheet.Cells(1,ColumnIndex+1).Font.Bold=True'Make the column header font bold								
									strColumnValue=objRecordSet.Fields.Item(ColumnIndex).Value
								'If not get the value for the column(fields)
								Else
									strColumnValue=objRecordSet.Fields.Item(ColumnIndex).Value
								End If
								'Enter the column value to the excel cell					            						
								xlWorksheet.Cells(intStartRow,ColumnIndex+1).Value=strColumnValue								
						Next
						'Assign blnIsColumnName false, as in the first iteration all the column names are copied to excel cell
						blnIsColumnName=False
						'Increment the start row by 1
						intStartRow=intStartRow+1		
						'Move RecordSet pointer to next
						objRecordSet.MoveNext
					Loop
					'Save the sheet
					objWorkBook.Save
					'Move RecordSet pointer to first, This will be useful in copying data from multiple RecordSet
					objRecordSet.MoveFirst
					'Close RecordSet
					Set objRecordSet=Nothing
				Next
				'Store the generated run time error number and error description in variables.
				errNumber = Err.Number
				errDescription = Err.Description
				'Clear the error.
				Err.Clear
				'Ends the Error Handling Scope.
				On Error GoTo 0
				If errNumber <> 0 Then reporterReportEvent "Failed",strReportStepLabel,"Not able to load data from RecordSet to the workbook in the supplied path: '"&_
																					SaveFilePath&"'. Due to Reason: "&errDescription
				'Close the workbook which is open
				Set objWorkBook=Nothing
				'Call component to close all the sheets opened
				xlCloseAllExcelFile
		End Sub
End Class


'##########################################################################################
' NAME:  xmlAddNode
' PURPOSE:  To Add nodes and its attributes in the specified parent hierarchy in the specfied XML file.
' PARAMETERS:
'		INPUT :
'				DDRefFilePath : String that contains key reference to XML file path in the Data dictionary.
'				DDRefParentHierarchy : String that contains key reference to parent hierarchy in the Data dictionary.
'				DDRefNodeName :  String that contains key reference to name of the node in the Data dictionary.
'				DDRefCnt : String that contains key referance to number of nodes to add in the Data dictionary.
'				DDRefAttrList : String that contains key referance to list of attributes for specified node in the Data dictionary.
'	   OUTPUT :
'				None
'HISTORY
'NAME:								DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Jayarami reddy                     09/09/2020              NEW
'##########################################################################################

Function xmlAddNode(DDRefFilePath, DDRefParentHierarchy , DDRefNodeName, DDRefCnt, DDRefAttrList)

On error resume  next

	filePath = Trim(ddGetItem(DDRefFilePath))
	parentHierarchy = Trim(ddGetItem(DDRefParentHierarchy))
	nodeName = Trim(ddGetItem(DDRefNodeName))
	nodeCount = Trim(ddGetItem(DDRefCnt))
	attrNames = Trim(ddGetItem(DDRefAttrList))
	
	If filePath<>"" and filePath<>"NA" Then
		flgFilePath = true
		If parentHierarchy<>"" and parentHierarchy<>"NA" Then
			If right (parentHierarchy,1) <> "/" and instr(parentHierarchy,"//") = 0 and left (parentHierarchy,1) <> "\" and right (parentHierarchy,1) <> "\" and instr(parentHierarchy,"\") = 0 Then
				flgParentHier = true
				If nodeName<>"" and nodeName<>"NA" Then
					flgNodeName = true
					If nodeCount<>"" and nodeCount<>"NA" Then
						If Not ((CInt(nodeCount) > 20 ) or (CInt(nodeCount) < 1 )) Then
							flgNodeCount = true
							If attrNames<>"" and attrNames <> "NA" Then
								If left(attrNames,1) <> "|" and right (attrNames,1) <> "|" and instr(attrNames,"||") = 0 Then
									flgAttrNames = true
									attrValues = split(attrNames,"|")
								else
									reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","Attribute list is not correct format " & attrNames & ", please provide valid attribute list."	
								End If
							Else
								attrNames = ""
								attrValues = split(attrNames,"|")
								flgAttrNames = true
							End If
						Else
							reporterReportEvent "Failed","XML Test Library ---> xmlAddNode", "DDRefCnt should be from 1 to 20, please provide valid nodeCount."
						End If
					Else
						reporterReportEvent "Failed","XML Test Library ---> xmlAddNode", "DDRefCnt should not be empty, please provide valid nodeCount."				
					End If				
				Else
						reporterReportEvent "Failed","XML Test Library ---> xmlAddNode", "Node name should not be empty, please provide valid node name."
				End If
			Else
				reporterReportEvent "Failed","XML Test Library ---> xmlAddNode", parentHierarchy & " ParentHierarchy is not correct format, please provide valid parentHierarchy."	
			End If
		Else
			reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","Parent hierarchy should not be empty, please provide valid parent hierarchy."
		End If
		Else
			reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","XML file path should not be empty, please provide valid XML file path."
	End If

	If flgFilePath = true and flgParentHier = true and flgNodeName = true and flgNodeCount = true and flgAttrNames = true Then

		'Load the xml file   	
		xmlLoadXMLFile filePath
		'Validate the XML file
		If g_xmlObj.xml <> "" then
			
			'Validating parentHierarchy format
			Set parentHieVer = g_xmlObj.SelectSingleNode(parentHierarchy)
			If Not parentHieVer Is Nothing Then
			    flgParentHieVer = true
			Else
				reporterReportEvent "Failed","XML Test Library ---> xmlAddNode", parentHierarchy & " Parent hierarchy not valid, please provide valid parent hierarchy."
			End If
			
			If flgParentHieVer = true Then
				'Verifying for the parse error code
		        If g_xmlObj.parseError.errorCode=0 Then
		
		        	'storing the run time generated error number and description
		            vbErrornumber=err.number
		            vbErrorDescription=err.description
		            'clearing the error
		            err.clear
		            'Ends the Error Handling Scope.
		            On error goto 0
		            'Verify for vb errors
		            If vbErrornumber<>0 Then
			            'Report the status as Failed if error occurred while saving the xml file
			            reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","Error Occurred while Saving the XML file. The Error description: '" &vbErrorDescription& "'" &chr(13)& "The XML file path provided is '" &strAcualResultFilePath& "' ."
		            End If
		
		            'Verify if error occurs while saving the xml file
		            If g_xmlObj.parseError.errorCode<>"0" Then
			            'Report the status as Failed if error occurred while saving the xml file
			            reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","Error Occurred while Saving the XML file. The Error description: '" &g_xmlObj.parseError.reason& "'" &chr(13)& "The XML file path provided is '" &strAcualResultFilePath& "' ."
		        	End If
		        	
		        	'Verify the nodeCount
		        	If IsNumeric(nodeCount) Then
		        		'Code to add 'Event' element
			            For eventCount = 0 to nodeCount-1
			
				            'select the parent element
				            Set parentNode = g_xmlObj.SelectSingleNode(parentHierarchy)

				            'Declare object to create element
				            Set eventName = g_xmlObj.CreateElement(nodeName)
				
				            'Moving closed event into new line
							Set chldBlankEvent = g_xmlObj.createTextNode("")
							chldBlankEvent.text = vbCrLf & "        "
							eventName.appendChild(chldBlankEvent)
							
							'Add attributes to the nodes
							For attCount = 0 To ubound(attrValues)
					            'adding Attribute="" and value = ""
					            Set attrName = g_xmlObj.CreateAttribute(attrValues(attCount))
					            attrName.Text = ""
					            eventName.Attributes.SetNamedItem(attrName)
				            Next
				
				            ' add a new element - Event
				            parentNode.AppendChild (eventName)
				            g_xmlObj.Save filePath
				
				            'After nodes added click enter
				            Set chldBlankNode = g_xmlObj.createTextNode("")
				            chldBlankNode.text = vbCrLf & "        "
							parentNode.appendChild(chldBlankNode)

				            On error resume next
				            'save the xml file
				            g_xmlObj.Save filePath
				
				            'storing the run time generated error number and description
				            vbErrornumber=err.number
				            vbErrorDescription=err.description
				            'clearing the error
				            err.clear
				            'Ends the Error Handling Scope.
				            On error goto 0
				            'Verify for vb errors
				            If vbErrornumber<>0 Then
					            'Report the status as Failed if error occurred while saving the xml file
					            reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","Error Occurred while Saving the XML file. The Error description: '" &vbErrorDescription& "'" &chr(13)& "The XML file path provided is '" &strAcualResultFilePath& "' ."
				            End If
				            'Verify if error occurs while saving the xml file
				            If g_xmlObj.parseError.errorCode<>"0" Then
					            'Report the status as Failed if error occurred while saving the xml file
					            reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","Error Occurred while Saving the XML file. The Error description: '" &g_xmlObj.parseError.reason& "'" &chr(13)& "The XML file path provided is '" &strAcualResultFilePath& "' ."
				            End IF
			            Next
			        	reporterReportEvent "Passed","XML Test Library ---> xmlAddNode", nodeCount & " " & nodeName & " nodes are added successfully with attributes - " & attrNames & " under " & parentHierarchy & " parentHierarchy."
	        		else
	        			reporterReportEvent "Failed","XML Test Library ---> xmlAddNode", nodeCount & " node count should be numeric and it can not be empty, please priovide valid node count."
		        	End If
		        	
		        End  If
			End If
		else
			reporterReportEvent "Failed","XML Test Library ---> xmlAddNode","Not able to open the file at path " & filePath & ", please provide valid XML file path."
		End If		
	End If
	
End Function


'######################################################################################################
' NAME:  xmlGetElementValue
' PURPOSE:  To get the innertext value for given element tag name  from the xml file.
' PARAMETERS:
'		INPUT      :
'						xmlElementName : Text that contains name of the xml tag(element) for which innertext value will be retrieved
'	   OUTPUT :
'						xmlGetElementValue: Text that contains Innertext value of the given tag(element)  value	
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil                              	04/03/2013                   NEW
'######################################################################################################
Private Function xmlGetElementValue(xmlElementName)
		'verify the existance of input parameter in data dictionary
		strxmlElementName=ddGetItem (xmlElementName)
		'Search for the xmlElementName(tag/node) and set the object to the node
		Set objElementTag=g_xmlObj.getElementsByTagName(strxmlElementName)
		'Verify that xmlElementName(tag/node) exist in the xml file
		If objElementTag.length > 0 Then
			'Verify that multiple elements for the searched element name
			If objElementTag.length < 2 Then
				'Get the xmlElementName(tag/node) text value
				strxmlElementValue=objElementTag.item(0).text
				'Report the status as Done , if the searched xmlElementName(tag/node) is found .
				reporterReportEvent "Done","XML Element Library--->xmlGetElementValue","Searched xmlElementTag name"&strxmlElementName&" exist in the XML file and element value is "&strxmlElementValue
			Else
				'Report the status as warning if searched element tag count is exceeding the range
				reporterReportEvent "Warning","XML Element Library--->xmlGetElementValue","More than one element tag found in  Xml file for the searched element tag name "&strxmlElementName
			End If
		Else
			'Report the status as failed xmlElementName(tag/node) was not  found
			reporterReportEvent "Failed","XML Element Library--->xmlGetElementValue","Searched Tag "&strxmlElementName&"does not exist in the XML File"
		End If
		'Return the retrieved value to the component
		xmlGetElementValue=strxmlElementValue
End Function


'#############################################################################################################
' NAME:  xmlLoadXMLFile
' PURPOSE: To load the xml file to the XMLobject from specified file path .
' PARAMETERS:
'		INPUT      :
'						DDRefrenceXMLFilePath : String that contains key reference to the location of the file path in the Data dictionary.
'	   OUTPUT :
'                       Object XML that contains loaded xml file
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil                         	04/03/2013                   NEW
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'#############################################################################################################
Private Sub xmlLoadXMLFile(DDRefrenceXMLFilePath)
	'verify the existance of input parameter in data dictionary
	strXMLFilePath=ddGetItem(DDRefrenceXMLFilePath)
	'verify that xml object instance
	If Not IsObject(g_xmlObj) Then
		'Call the beolw component to create a new XML object instance
		xmlNewXML
	End If
	'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
	On Error Resume Next
	'Clear the Error
	Err.Clear	
	'Load the xml file to the XML object
	g_xmlObj.load strXMLFilePath
'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0
	'Verify the error occurrance while loading the XMl file
	If errNumber =0 Then
		'Report as done as there was no error occured  while loading XML file to the object
		reporterReportEvent "Done","XML Object Library--->xmlLoadXMLFile", "XML file loaded successfullty to the XML global object"
	 Else
		'Report the status as Failed and  error description
		reporterReportEvent "Failed","XML Object Library--->xmlLoadXMLFile","Failed to load XML file " &Chr(13) &" Reason: "& errDescription
	End If
End Sub


'##################################################################################################
' NAME:  xmlLoadXMLString
' PURPOSE: To load the xml file string to the xml object from the data dictionary.
' PARAMETERS:
'		INPUT      :
'						DDRefrenceXMLString: String that contains key reference to the file string in the Data dictionary.
'	   OUTPUT :
'						Object XML that contains loaded xml file string
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil                         	04/03/2013                   NEW
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'##################################################################################################
Private Sub xmlLoadXMLString(DDRefrenceXMLString)
		'verify the existance of input parameter in data dictionary
	    strXMLString=ddGetItem(DDRefrenceXMLString)
		'verify that xml object instance
		If Not IsObject(g_xmlObj) Then
			'Call the beolw component to create a new XML object instance
			xmlNewXML
		End If
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear the Error
		Err.Clear	
		'Load the xml file string to the XML object
		g_xmlObj.loadXML strXMLString
'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Verify the error occurrance while loading the XMl file string
		If errNumber =0 Then
			'Report as done as there was no error occured  while loading XML file string to the object
			reporterReportEvent "Done","XML Object Library--->xmlLoadXMLString", "XML file string loaded successfullty to the XML global object"
		 Else
			'Report the status as Failed and  error description
			reporterReportEvent "Failed","XML Object Library--->xmlLoadXMLString","Failed to load XML file string " &Chr(13) &" Reason: "& errDescription
		End If  		
End Sub


'############################################################################
' NAME:  xmlNewXML
' PURPOSE: create a new XML object instance
' PARAMETERS:
'		INPUT     :  None				
'	   OUTPUT :  XML object instance
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil                              	04/03/2013                   NEW
'Lakshman Kumar A.H.     26/02/2014					Modified to start and end the Error Handling Scope appropriately wherever it requires.
'############################################################################
Private Sub xmlNewXML()
		'On Error Resume Next" causes execution to continue with the statement immediately following the statement that caused the run-time error
		On Error Resume Next
		'Clear the Error
		Err.Clear
	 	'Create a XML object instance used to read or modify the XMLfile
		Set g_xmlObj=CreateObject("MSXML2.DOMDocument")     	
'Store the generated run time error number and error description in variables.
		errNumber = Err.Number
		errDescription = Err.Description
		'Clear the error.
		Err.Clear
		'Ends the Error Handling Scope.
		On Error GoTo 0
		'Verify error occured while creting XML object instance
		If errNumber =0 Then
			'Report as done as there was no error occured  while creting XML object instance
			reporterReportEvent "Done","XML Object Library--->xmlNewXML", "XML object instance created successfullty"
		Else
			'Report the status as Failed and  error description
			reporterReportEvent "Failed","XML Object Library--->xmlNewXML","Failed to create XML object instance " &Chr(13) &" Reason: "& errDescription
		End If		
End Sub


'##########################################################################################
' NAME:  xmlSetElementAttributeValue
' PURPOSE:  To set the text of the attribute value for the given attribute name and for the given element name from XML file.
' PARAMETERS:
'		INPUT      :

'						DDRefrenceActualResultFilePath : String or data dictionary that contains key reference to complete file path of the xml file.
'						DDRefrencexmlElementName : String or data dictionary that contains key reference to name of the tag(element).
'						DDRefrenceAttributeName :  String or data dictionary that contains key reference to name of the attribute nodename for the given tag(element) for which innertext value will be verified.
'						DDRefrenceAttributeNewValue :  String or data dictionary that contains key reference to name of the attribute value for the given attribute nodename for the given tag(element).
'						DDRefrencexmlElementNameIndex :  String or data dictionary  that contains key reference to index for the given tag(element).
'                       Note1*: If 'DDRefrencexmlElementNameIndex' value is provided as null then the code considers the 'DDRefrencexmlElementNameIndex' value as '0'
'						Note2*: Close the XML File before using this component
'	   OUTPUT :
'						None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Rashmi                     02/07/2017              NEW
'##########################################################################################

Sub xmlSetElementAttributeValue(DDRefrenceActualResultFilePath,DDRefrencexmlElementName,DDRefrenceAttributeName,DDRefrenceAttributeNewValue,DDRefrencexmlElementNameIndex)
	
'Get the Actual restult file path ,element xml Tag ,xml Attribute names ,xml Attribute value and the index of the element xml tag from data dictionary to a variable
	strAcualResultFilePath=ddGetItem(Trim(DDRefrenceActualResultFilePath))
	strXmlElementTagName=ddGetItem(Trim(DDRefrencexmlElementName))
	strAttributeName=ddGetItem(Trim(DDRefrenceAttributeName))
	strAttributeNewValue=ddGetItem(Trim(DDRefrenceAttributeNewValue))
	strxmlElementNameIndex=ddGetItem(Trim(DDRefrencexmlElementNameIndex))

'verify if the index is empty or not
If IsEmpty(strxmlElementNameIndex) or strxmlElementNameIndex="" Then
	strxmlElementNameIndex="0"
End If

'verify if the index is numeric or not
If IsNumeric(strxmlElementNameIndex) Then
		'verify if the index value is negative or not
		If strxmlElementNameIndex<0 Then
		reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","The index 'DDRefrencexmlElementNameIndex' value provided is '" &strxmlElementNameIndex& "' negative. Please Provide the valid Element tag index value.[XML Element  index starts with 0]"
		End If
	'Call the below component to load the xml file from the specified path
	xmlLoadXMLFile strAcualResultFilePath
	'Verifying for the parse error code
	If g_xmlObj.parseError.errorCode=0 Then
			
	'set the object to objNodeList by getting the strXmlElementTagName(tag/node)
	Set objNodeList = g_xmlObj.getElementsByTagName(strXmlElementTagName)	
		
		'verifying if the element tag name exists
		If Trim(objNodeList.length)>0 Then
				
				'To verify the length of the index
				If strxmlElementNameIndex<=Trim(objNodeList.length-1) Then
				'setting the flag value to '0'
				Flag=0
				'To get the length of the attributes value	
				Attributeslength=objNodeList(strxmlElementNameIndex).attributes.length
				For i = 0 To Attributeslength-1
				'verifying for the attribute name
					If lcase(objNodeList(strxmlElementNameIndex).attributes.item(i).nodename)=lcase(strAttributeName) Then
					'setting the attribute value to 'strAttributeNewValue'
					objNodeList(strxmlElementNameIndex).attributes.item(i).text=strAttributeNewValue
'					ErrNumber=err.Number
'					Errdescription=err.description
					ErrNumber=g_xmlObj.parseError.errorCode
					Errdescription=g_xmlObj.parseError.reason					
					'setting the flag value to '1'
					Flag=1
				Exit For
					End If
				Next
				Else
				'Report the status as Failed if the index value 'DDRefrencexmlElementNameIndex' has exceeded the index value in the xml file for the element tag  passed
				reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","The index 'DDRefrencexmlElementNameIndex' value is '" &strxmlElementNameIndex& "' and the maximum index value in the xml file is '" &objNodeList.length-1& "' .Please Provide the valid Element tag index value.[XML Element  index starts with 0]"
				End If
		Else
		'Report the status as Failed if the element tag is not available in the xml file
		reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","The Element Tag '" &strXmlElementTagName& "' is not found in the Xml file path '" &strAcualResultFilePath& "'"
		End If
	Else
	'Report the status as Failed while loading the xml file
	reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","Error Occurred while loading the XML file. The Error description: '" &g_xmlObj.parseError.reason& "' . Please provide a valid XML file path." &chr(13)& "The XML file path provided is '" &strAcualResultFilePath& "' ."
	End If
Else
'Report the status as failed if the parameter 'DDRefrencexmlElementNameIndex' is not numeric
reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","The Element tag index 'DDRefrencexmlElementNameIndex': '" &strxmlElementNameIndex& "' is not numeric. Please provide the valid numeric Element tag index value."
End If

If Flag=1 and ErrNumber=0 Then
		'Report the status as passed if the values are set in the xml file
		reporterReportEvent "Passed","XML Test Library ---> xmlSetElementAttributeValue","New Attribute Value '" &strAttributeNewValue&  "' for attribute name '" &strAttributeName& "' is set successfully in the Xml file for the element tag '" &strXmlElementTagName& "' with the index '" &strxmlElementNameIndex& "'"
	ElseIf ErrNumber<>0 Then
	   'Report the status as failed if error occurred while setting the attribute value
	    reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","Error Occurred while setting the attribute value '" &strAttributeNewValue& "' for the attribute name '" &strAttributeName& "' .Error Description : '" &Errdescription& "'"
	ElseIf Flag=0 and ErrNumber=0 Then
		'Report the status as failed if the values are not set in the xml file as attributes are not present
		reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","The attribute name '" &strAttributeName& "' is not present in the Xml file for the element tag '" &strXmlElementTagName&"' with index '" &strxmlElementNameIndex& "'"
	End If
	
	'causes execution to continue with the statement immediately following the statement that caused the run-time error
	On error resume next
	'save the xml file
	g_xmlObj.Save strAcualResultFilePath
	
	'storing the run time gernerated error number and description
	vbErrornumber=err.number
	vbErrorDescription=err.description
	'clearing the error
	err.clear
	'Ends the Error Handling Scope.
	On error goto 0
	'Verify for vb errors
	If vbErrornumber<>0 Then
	'Report the status as Failed if error occurred while saving the xml file
	reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","Error Occurred while Saving the XML file. The Error description: '" &vbErrorDescription& "'" &chr(13)& "The XML file path provided is '" &strAcualResultFilePath& "' ."		
	End If
	
	'Verify if error occurs while saving the xml file
	If g_xmlObj.parseError.errorCode<>"0" Then
	'Report the status as Failed if error occurred while saving the xml file
	reporterReportEvent "Failed","XML Test Library ---> xmlSetElementAttributeValue","Error Occurred while Saving the XML file. The Error description: '" &g_xmlObj.parseError.reason& "'" &chr(13)& "The XML file path provided is '" &strAcualResultFilePath& "' ."
	End IF
	
End Sub


'##########################################################################################
' NAME:  xmlVerifyElementValue
' PURPOSE:  To get the inner text for the given element  name from XMl file and compare with expected value.
' PARAMETERS:
'		INPUT      :
'						DDRefrenceExpectedResult : String that contains key reference to the expected value to be compared against actual value in the Data dictionary.
'						DDRefrenceActualResultFilePath : String that contains key reference to complete file path of the xml file in the Data dictionary.
'						DDRefrencexmlElementName :  String that contains key reference to name of the tag(element) for which innertext value will be verified in the Data dictionary.
'	   OUTPUT :
'						None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Sunil                     04/03/2013              NEW
'Manjunath          06/06/2013			Modified the input parameters should be from the data dictionary
'##########################################################################################
Sub xmlVerifyElementValue(DDRefrenceExpectedResult,DDRefrenceActualResultFilePath,DDRefrencexmlElementName)
'Get the Actual restult file path ,xml Element name  and ExpectedResult  from data dictionary to a variable
	strAcualResultFilePath=ddGetItem(Trim(DDRefrenceActualResultFilePath))
	strxmlElementName=ddGetItem(Trim(DDRefrencexmlElementName))	
	strExpectedResult=ddGetItem(Trim(DDRefrenceExpectedResult))
'Call the below component to load the xml file from the specified path
	xmlLoadXMLFile strAcualResultFilePath
'Get the element  text value from XML file
	strActualElementValue=xmlGetElementValue(strxmlElementName)
	'Call bellow component to compare the actual element  text value and ExpectedResults value are equal and assign return value to variable
	blnxmlVerifyElementValue=testCompareValues(strActualElementValue,strExpectedResult,True)
	'Verify the boolean value is true/false
	If blnxmlVerifyElementValue Then			
		'Report the status as passed if ExpectedResult value and xmlElementName value are  equal
		reporterReportEvent "Passed","XML Test Library ---> xmlVerifyElementValue","ExpectedResult  and xmlElement value are equal, ExpectedResult  is: "& strExpectedResult &Chr(13) &"xmlElement "& strxmlElementName & "  value is "&strActualElementValue	
	Else
		'Report the status as failed if ExpectedResult value and xmlElementName  value are not equal
		reporterReportEvent "Failed","XML Test Library ---> xmlVerifyElementValue","ExpectedResult and xmlElement value are not equal, ExpectedResult  is: "& strExpectedResult &Chr(13) &" xmlElement "& strxmlElementName & "value is "&strActualElementValue
	End If
End Sub



'##########################################################################################
' NAME:  getUserEnvVarVal
' PURPOSE:  To get the user environment value from user environment variable
' PARAMETERS:
'		INPUT  :
'						envName : String that contains the name of a user environment variable
'	   OUTPUT :
'						None
'HISTORY
'NAME:						DATE:					PURPOSE
'-----------------------------------------------------------------------------------------------------
'Jayarami Reddy                     03/10/2023            		NEW
'##########################################################################################
Function getUserEnvVarVal(envName)
	On Error Resume Next
	'###########################################
	'PREREQUISITE CODE
	strReportStepLabel = "Master Library--->getUserEnvVarVal"
	'END PREREQUISITE CODE
	'###########################################
	Set wshShell = CreateObject( "WScript.Shell" )
	Set wshUserEnv = wshShell.Environment( "USER" )
	'Start loop to get all env variables
	For Each strItem In wshUserEnv	
		'Split the string item based on '='
		oneDriveVal = Split(strItem, "=")
		'Verify env variable matches to 'useonedrive'
		If StrComp(UCase(trim(oneDriveVal(0))), Ucase(trim(envName)),1) = 0 Then
			'Get the env variable value and added into dictionary
			ddAddItem "UseOneDrive", oneDriveVal(1)
		End If
	Next
	'Store the generated run time error number and error description in variables.
	errNumber = Err.Number
	errDescription = Err.Description
	'Clear the error.
	Err.Clear
	'Ends the Error Handling Scope.
	On Error GoTo 0
	'Verify the error occurrence	
	If errNumber =0 Then
		'Report as Passed as successfully read value of environment variable
		reporterReportEvent "Passed", strReportStepLabel, "Successfully read value of environment variable : " & envName
	Else
		'Report as failed with the error description
		reporterReportEvent "Failed",strReportStepLabel,"Failed to read value of environment variable '"& envName &"' environment variable,  Reason: '"& errDescription&"'."
	End If
	'Release the object
	Set wshUserEnv = Nothing
	Set wshShell     = Nothing
End Function
